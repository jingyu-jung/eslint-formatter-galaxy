const result = [
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/coverage/lcov-report/block-navigation.js",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 1,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 86,
        endColumn: 6,
        fix: {
          range: [21, 24],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 4,
        column: 5,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 4,
        endColumn: 76,
        fix: {
          range: [128, 131],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 7,
        column: 5,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 7,
        endColumn: 46,
        fix: {
          range: [259, 262],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 10,
        column: 5,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 10,
        endColumn: 80,
        fix: {
          range: [391, 394],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 10,
        column: 23,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 10,
        endColumn: 79,
        fix: {
          range: [409, 465],
          text: "`:not(${  missingCoverageClasses.join('):not(')  }) > `",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 13,
        column: 5,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 17,
        endColumn: 57,
        fix: {
          range: [572, 575],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 14,
        column: 9,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 17,
        endColumn: 56,
        fix: {
          range: [595, 720],
          text: "`${fileListingElements.join(', ') \n        }, ${ \n        notSelector \n        }${missingCoverageClasses.join(', ' + notSelector)}`",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 17,
        column: 37,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 17,
        endColumn: 55,
        fix: {
          range: [701, 719],
          text: "`, ${  notSelector}`",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 20,
        column: 5,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 20,
        endColumn: 71,
        fix: {
          range: [820, 823],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 22,
        column: 5,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 22,
        endColumn: 22,
        fix: {
          range: [892, 895],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 42,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 42,
        endColumn: 27,
        fix: {
          range: [1436, 1439],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 53,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 53,
        endColumn: 27,
        fix: {
          range: [1768, 1771],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "default-case",
        severity: 2,
        message: "Expected a default case.",
        line: 74,
        column: 9,
        nodeType: "SwitchStatement",
        messageId: "missingDefaultCase",
        endLine: 84,
        endColumn: 10,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/coverage/lcov-report/prettify.js",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "func-names",
        severity: 1,
        message: "Unexpected unnamed function.",
        line: 2,
        column: 41,
        nodeType: "FunctionExpression",
        messageId: "unnamed",
        endLine: 2,
        endColumn: 49,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 52,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 105,
        fix: {
          range: [72, 75],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 105,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 272,
        fix: {
          range: [125, 128],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 272,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 381,
        fix: {
          range: [292, 295],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 381,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 646,
        fix: {
          range: [401, 404],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 646,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 796,
        fix: {
          range: [666, 669],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 796,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 1071,
        fix: {
          range: [816, 819],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 1071,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 1236,
        fix: {
          range: [1091, 1094],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 1236,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 1323,
        fix: {
          range: [1256, 1259],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 1323,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 1506,
        fix: {
          range: [1343, 1346],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 1506,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 1667,
        fix: {
          range: [1526, 1529],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 1667,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 1846,
        fix: {
          range: [1687, 1690],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 1846,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 1919,
        fix: {
          range: [1866, 1869],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 1919,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 1941,
        fix: {
          range: [1939, 1942],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 1941,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2060,
        fix: {
          range: [1961, 1964],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2060,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2072,
        fix: {
          range: [2080, 2083],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2072,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2084,
        fix: {
          range: [2092, 2095],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2084,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2096,
        fix: {
          range: [2104, 2107],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2096,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2108,
        fix: {
          range: [2116, 2119],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2108,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2120,
        fix: {
          range: [2128, 2131],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2120,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2132,
        fix: {
          range: [2140, 2143],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2132,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2144,
        fix: {
          range: [2152, 2155],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2144,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2156,
        fix: {
          range: [2164, 2167],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2156,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2168,
        fix: {
          range: [2176, 2179],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2168,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2180,
        fix: {
          range: [2188, 2191],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2180,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2192,
        fix: {
          range: [2200, 2203],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2192,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2204,
        fix: {
          range: [2212, 2215],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2204,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2219,
        fix: {
          range: [2224, 2227],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2219,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2525,
        fix: {
          range: [2239, 2242],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2539,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2548,
        fix: {
          range: [2559, 2562],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2548,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2560,
        fix: {
          range: [2568, 2571],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2560,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2573,
        fix: {
          range: [2580, 2583],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 2577,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 2595,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2577,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2595,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'V' declared on line 2 column 5216 is used outside of binding context.",
        line: 2,
        column: 2581,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 2582,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'U' declared on line 2 column 5220 is used outside of binding context.",
        line: 2,
        column: 2585,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 2586,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'V' declared on line 2 column 5216 is used outside of binding context.",
        line: 2,
        column: 2596,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 2597,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'U' declared on line 2 column 5220 is used outside of binding context.",
        line: 2,
        column: 2598,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 2599,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 2600,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 2603,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'V' declared on line 2 column 5216 is used outside of binding context.",
        line: 2,
        column: 2602,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 2603,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 2605,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 2617,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2605,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2617,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ae' declared on line 2 column 5244 is used outside of binding context.",
        line: 2,
        column: 2609,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 2611,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'V' declared on line 2 column 5216 is used outside of binding context.",
        line: 2,
        column: 2614,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 2615,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ae' declared on line 2 column 5244 is used outside of binding context.",
        line: 2,
        column: 2620,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 2622,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-lonely-if",
        severity: 2,
        message: "Unexpected if as the only statement in an else block.",
        line: 2,
        column: 2648,
        nodeType: "IfStatement",
        messageId: "unexpectedLonelyIf",
        endLine: 2,
        endColumn: 2753,
        fix: {
          range: [2667, 2774],
          text: ' if(/[a-z]/i.test(ae.source.replace(/\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi,""))){S=true;ac=false;break}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ae' declared on line 2 column 5244 is used outside of binding context.",
        line: 2,
        column: 2665,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 2667,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 2755,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 2791,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2755,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2791,
        fix: {
          range: [2775, 2778],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2807,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2831,
        fix: {
          range: [2827, 2830],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 2853,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 2873,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 2853,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 2873,
        fix: {
          range: [2873, 2876],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-else-return",
        severity: 2,
        message: "Unnecessary 'else' after 'return'.",
        line: 2,
        column: 2903,
        nodeType: "BlockStatement",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 3055,
        fix: {
          range: [2811, 3076],
          text: 'function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}if("0"<=af&&af<="7"){return parseInt(ah.substring(1),8)}else{if(af==="u"||af==="x"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-lonely-if",
        severity: 2,
        message: "Unexpected if as the only statement in an else block.",
        line: 2,
        column: 2904,
        nodeType: "IfStatement",
        messageId: "unexpectedLonelyIf",
        endLine: 2,
        endColumn: 3054,
        fix: {
          range: [2923, 3075],
          text: ' if("0"<=af&&af<="7"){return parseInt(ah.substring(1),8)}else{if(af==="u"||af==="x"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of <=.",
        line: 2,
        column: 2907,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 2914,
        fix: {
          range: [2927, 2934],
          text: 'af>="0"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-else-return",
        severity: 2,
        message: "Unnecessary 'else' after 'return'.",
        line: 2,
        column: 2964,
        nodeType: "BlockStatement",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 3054,
        fix: {
          range: [2811, 3076],
          text: 'function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if("0"<=af&&af<="7"){return parseInt(ah.substring(1),8)}if(af==="u"||af==="x"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-lonely-if",
        severity: 2,
        message: "Unexpected if as the only statement in an else block.",
        line: 2,
        column: 2965,
        nodeType: "IfStatement",
        messageId: "unexpectedLonelyIf",
        endLine: 2,
        endColumn: 3053,
        fix: {
          range: [2984, 3074],
          text: ' if(af==="u"||af==="x"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-else-return",
        severity: 2,
        message: "Unnecessary 'else' after 'return'.",
        line: 2,
        column: 3028,
        nodeType: "BlockStatement",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 3053,
        fix: {
          range: [2811, 3076],
          text: 'function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if("0"<=af&&af<="7"){return parseInt(ah.substring(1),8)}else{if(af==="u"||af==="x"){return parseInt(ah.substring(2),16)}return ah.charCodeAt(1)}}}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 3124,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 3155,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3124,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3155,
        fix: {
          range: [3144, 3147],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 2,
        column: 3202,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 2,
        endColumn: 3209,
        fix: {
          range: [3222, 3229],
          text: "`\\\\${ag}`",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3235,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3394,
        fix: {
          range: [3255, 3258],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-regex-literals",
        severity: 2,
        message:
          "Use a regular expression literal instead of the 'RegExp' constructor.",
        line: 2,
        column: 3276,
        nodeType: "NewExpression",
        messageId: "unexpectedRegExp",
        endLine: 2,
        endColumn: 3392,
        suggestions: [
          {
            messageId: "replaceWithLiteral",
            fix: {
              range: [3296, 3412],
              text: "/\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]/g",
            },
            desc: "Replace with an equivalent regular expression literal.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3394,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3404,
        fix: {
          range: [3414, 3417],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3404,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3414,
        fix: {
          range: [3424, 3427],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3414,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3433,
        fix: {
          range: [3434, 3437],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 3437,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 3463,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3437,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3463,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3893 is used outside of binding context.",
        line: 2,
        column: 3441,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3443,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 4061 is used outside of binding context.",
        line: 2,
        column: 3441,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3443,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3893 is used outside of binding context.",
        line: 2,
        column: 3464,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3466,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 4061 is used outside of binding context.",
        line: 2,
        column: 3464,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3466,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 3470,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 3474,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3893 is used outside of binding context.",
        line: 2,
        column: 3472,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3474,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 4061 is used outside of binding context.",
        line: 2,
        column: 3472,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3474,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 3476,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 3490,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3476,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3490,
        fix: {
          range: [3496, 3499],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3893 is used outside of binding context.",
        line: 2,
        column: 3486,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3488,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 4061 is used outside of binding context.",
        line: 2,
        column: 3486,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3488,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 3532,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 3546,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3532,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3546,
        fix: {
          range: [3552, 3555],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 3546,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 3553,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3546,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3553,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3893 is used outside of binding context.",
        line: 2,
        column: 3556,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3558,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 4061 is used outside of binding context.",
        line: 2,
        column: 3556,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3558,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of ===.",
        line: 2,
        column: 3565,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 3579,
        fix: {
          range: [3585, 3599],
          text: 'aq[ar+1]==="-"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3893 is used outside of binding context.",
        line: 2,
        column: 3574,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3576,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 4061 is used outside of binding context.",
        line: 2,
        column: 3574,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3576,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3893 is used outside of binding context.",
        line: 2,
        column: 3590,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3592,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 4061 is used outside of binding context.",
        line: 2,
        column: 3590,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3592,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3893 is used outside of binding context.",
        line: 2,
        column: 3597,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3599,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 4061 is used outside of binding context.",
        line: 2,
        column: 3597,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3599,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '|'.",
        line: 2,
        column: 3681,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 3699,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '|'.",
        line: 2,
        column: 3700,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 3718,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '&'.",
        line: 2,
        column: 3751,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 3770,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '~'.",
        line: 2,
        column: 3767,
        nodeType: "UnaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 3770,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '&'.",
        line: 2,
        column: 3771,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 3791,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '~'.",
        line: 2,
        column: 3788,
        nodeType: "UnaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 3791,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "func-names",
        severity: 1,
        message: "Unexpected unnamed function.",
        line: 2,
        column: 3805,
        nodeType: "FunctionExpression",
        messageId: "unnamed",
        endLine: 2,
        endColumn: 3813,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 3858,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 3868,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3858,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3868,
        fix: {
          range: [3878, 3881],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 3868,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 3885,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3868,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3885,
        fix: {
          range: [3888, 3891],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 3889,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 3897,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3889,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3897,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'ar' is already defined.",
        line: 2,
        column: 3893,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 3895,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3441 is used outside of binding context.",
        line: 2,
        column: 3893,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3895,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 4061 is used outside of binding context.",
        line: 2,
        column: 3893,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3895,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3441 is used outside of binding context.",
        line: 2,
        column: 3898,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3900,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 4061 is used outside of binding context.",
        line: 2,
        column: 3898,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3900,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 3911,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 3915,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3441 is used outside of binding context.",
        line: 2,
        column: 3913,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3915,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 4061 is used outside of binding context.",
        line: 2,
        column: 3913,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3915,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 3917,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 3931,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3917,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 3931,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'at' declared on line 2 column 4089 is used outside of binding context.",
        line: 2,
        column: 3921,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3923,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3441 is used outside of binding context.",
        line: 2,
        column: 3927,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3929,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 4061 is used outside of binding context.",
        line: 2,
        column: 3927,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3929,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'at' declared on line 2 column 4089 is used outside of binding context.",
        line: 2,
        column: 3934,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3936,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'at' declared on line 2 column 4089 is used outside of binding context.",
        line: 2,
        column: 3971,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3973,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'at' declared on line 2 column 4089 is used outside of binding context.",
        line: 2,
        column: 3994,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 3996,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 3999,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4012,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 3999,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4012,
        fix: {
          range: [4019, 4022],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-spread",
        severity: 2,
        message: "Use the spread operator instead of '.apply()'.",
        line: 2,
        column: 4032,
        nodeType: "CallExpression",
        messageId: "preferSpread",
        endLine: 2,
        endColumn: 4052,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4057,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4065,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4057,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4065,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'ar' is already defined.",
        line: 2,
        column: 4061,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 4063,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3441 is used outside of binding context.",
        line: 2,
        column: 4061,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4063,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3893 is used outside of binding context.",
        line: 2,
        column: 4061,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4063,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3441 is used outside of binding context.",
        line: 2,
        column: 4066,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4068,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3893 is used outside of binding context.",
        line: 2,
        column: 4066,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4068,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 4079,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 4083,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3441 is used outside of binding context.",
        line: 2,
        column: 4081,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4083,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3893 is used outside of binding context.",
        line: 2,
        column: 4081,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4083,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4085,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4099,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4085,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4099,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'at' is already defined.",
        line: 2,
        column: 4089,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 4091,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'at' declared on line 2 column 3921 is used outside of binding context.",
        line: 2,
        column: 4089,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4091,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3441 is used outside of binding context.",
        line: 2,
        column: 4095,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4097,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ar' declared on line 2 column 3893 is used outside of binding context.",
        line: 2,
        column: 4095,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4097,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'at' declared on line 2 column 3921 is used outside of binding context.",
        line: 2,
        column: 4109,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4111,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'at' declared on line 2 column 3921 is used outside of binding context.",
        line: 2,
        column: 4120,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4122,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'at' declared on line 2 column 3921 is used outside of binding context.",
        line: 2,
        column: 4126,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4128,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'at' declared on line 2 column 3921 is used outside of binding context.",
        line: 2,
        column: 4136,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4138,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'at' declared on line 2 column 3921 is used outside of binding context.",
        line: 2,
        column: 4144,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4146,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'at' declared on line 2 column 3921 is used outside of binding context.",
        line: 2,
        column: 4174,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4176,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4230,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4426,
        fix: {
          range: [4250, 4253],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-regex-literals",
        severity: 2,
        message:
          "Use a regular expression literal instead of the 'RegExp' constructor.",
        line: 2,
        column: 4253,
        nodeType: "NewExpression",
        messageId: "unexpectedRegExp",
        endLine: 2,
        endColumn: 4424,
        suggestions: [
          {
            messageId: "replaceWithLiteral",
            fix: {
              range: [4273, 4444],
              text: "/(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)/g",
            },
            desc: "Replace with an equivalent regular expression literal.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4426,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4443,
        fix: {
          range: [4446, 4449],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4443,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4453,
        fix: {
          range: [4463, 4466],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4457,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4470,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4457,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4470,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4461,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4463,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4461,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4463,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4461,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4463,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4461,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4463,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4670 is used outside of binding context.",
        line: 2,
        column: 4466,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4468,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4859 is used outside of binding context.",
        line: 2,
        column: 4466,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4468,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4471,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4473,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4471,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4473,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4471,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4473,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4471,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4473,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 4477,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 4481,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4479,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4481,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4479,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4481,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4479,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4481,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4479,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4481,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4483,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4497,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4483,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4497,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4691 is used outside of binding context.",
        line: 2,
        column: 4487,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4489,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4970 is used outside of binding context.",
        line: 2,
        column: 4487,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4489,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4493,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4495,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4493,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4495,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4493,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4495,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4493,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4495,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4691 is used outside of binding context.",
        line: 2,
        column: 4500,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4502,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4970 is used outside of binding context.",
        line: 2,
        column: 4500,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4502,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 4510,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 4514,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4670 is used outside of binding context.",
        line: 2,
        column: 4512,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4514,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4859 is used outside of binding context.",
        line: 2,
        column: 4512,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4514,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-lonely-if",
        severity: 2,
        message: "Unexpected if as the only statement in an else block.",
        line: 2,
        column: 4520,
        nodeType: "IfStatement",
        messageId: "unexpectedLonelyIf",
        endLine: 2,
        endColumn: 4594,
        fix: {
          range: [4539, 4615],
          text: ' if("\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){an[af]=-1}}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of ===.",
        line: 2,
        column: 4523,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 4542,
        fix: {
          range: [4543, 4562],
          text: 'ag.charAt(0)==="\\\\"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4691 is used outside of binding context.",
        line: 2,
        column: 4530,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4532,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4970 is used outside of binding context.",
        line: 2,
        column: 4530,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4532,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4544,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4568,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4544,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4568,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'af' declared on line 2 column 4789 is used outside of binding context.",
        line: 2,
        column: 4548,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4550,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4691 is used outside of binding context.",
        line: 2,
        column: 4552,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4554,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4970 is used outside of binding context.",
        line: 2,
        column: 4552,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4554,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'af' declared on line 2 column 4789 is used outside of binding context.",
        line: 2,
        column: 4571,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4573,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'af' declared on line 2 column 4789 is used outside of binding context.",
        line: 2,
        column: 4575,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4577,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4670 is used outside of binding context.",
        line: 2,
        column: 4579,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4581,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4859 is used outside of binding context.",
        line: 2,
        column: 4579,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4581,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'af' declared on line 2 column 4789 is used outside of binding context.",
        line: 2,
        column: 4586,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4588,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4600,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4608,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4600,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4608,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'ak' is already defined.",
        line: 2,
        column: 4604,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 4606,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4604,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4606,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4604,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4606,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4604,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4606,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4604,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4606,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4609,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4611,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4609,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4611,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4609,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4611,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4609,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4611,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 4622,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 4626,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4624,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4626,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4624,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4626,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4624,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4626,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4624,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4626,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of ===.",
        line: 2,
        column: 4631,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 4642,
        fix: {
          range: [4651, 4662],
          text: "an[ak]===-1",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4639,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4641,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4639,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4641,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4639,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4641,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4639,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4641,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4647,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4649,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4647,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4649,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4647,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4649,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4647,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4649,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 4651,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 4655,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4661,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4674,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4661,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4674,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'ak' is already defined.",
        line: 2,
        column: 4665,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 4667,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4665,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4667,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4665,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4667,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4665,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4667,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4665,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4667,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'am' is already defined.",
        line: 2,
        column: 4670,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 4672,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4466 is used outside of binding context.",
        line: 2,
        column: 4670,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4672,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4859 is used outside of binding context.",
        line: 2,
        column: 4670,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4672,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4675,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4677,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4675,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4677,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4675,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4677,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4675,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4677,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 4681,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 4685,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4683,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4685,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4683,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4685,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4683,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4685,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4683,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4685,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4687,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4701,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4687,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4701,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'ag' is already defined.",
        line: 2,
        column: 4691,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 4693,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4487 is used outside of binding context.",
        line: 2,
        column: 4691,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4693,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4970 is used outside of binding context.",
        line: 2,
        column: 4691,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4693,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4697,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4699,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4697,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4699,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4697,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4699,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4697,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4699,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4487 is used outside of binding context.",
        line: 2,
        column: 4704,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4706,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4970 is used outside of binding context.",
        line: 2,
        column: 4704,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4706,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 4714,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 4718,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4466 is used outside of binding context.",
        line: 2,
        column: 4716,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4718,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4859 is used outside of binding context.",
        line: 2,
        column: 4716,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4718,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4466 is used outside of binding context.",
        line: 2,
        column: 4725,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4727,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4859 is used outside of binding context.",
        line: 2,
        column: 4725,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4727,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4745,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4747,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4745,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4747,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4745,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4747,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4745,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4747,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-lonely-if",
        severity: 2,
        message: "Unexpected if as the only statement in an else block.",
        line: 2,
        column: 4761,
        nodeType: "IfStatement",
        messageId: "unexpectedLonelyIf",
        endLine: 2,
        endColumn: 4844,
        fix: {
          range: [4780, 4865],
          text: ' if("\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){aj[ak]="\\\\"+an[am]}}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of ===.",
        line: 2,
        column: 4764,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 4783,
        fix: {
          range: [4784, 4803],
          text: 'ag.charAt(0)==="\\\\"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4487 is used outside of binding context.",
        line: 2,
        column: 4771,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4773,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4970 is used outside of binding context.",
        line: 2,
        column: 4771,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4773,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4785,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4809,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4785,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4809,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'af' is already defined.",
        line: 2,
        column: 4789,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 4791,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'af' declared on line 2 column 4548 is used outside of binding context.",
        line: 2,
        column: 4789,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4791,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4487 is used outside of binding context.",
        line: 2,
        column: 4793,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4795,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4970 is used outside of binding context.",
        line: 2,
        column: 4793,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4795,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'af' declared on line 2 column 4548 is used outside of binding context.",
        line: 2,
        column: 4812,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4814,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'af' declared on line 2 column 4548 is used outside of binding context.",
        line: 2,
        column: 4816,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4818,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4466 is used outside of binding context.",
        line: 2,
        column: 4820,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4822,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4859 is used outside of binding context.",
        line: 2,
        column: 4820,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4822,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4827,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4829,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4827,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4829,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4827,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4829,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4827,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4829,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 2,
        column: 4831,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 2,
        endColumn: 4842,
        fix: {
          range: [4851, 4862],
          text: "`\\\\${an[am]}`",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4466 is used outside of binding context.",
        line: 2,
        column: 4839,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4841,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4859 is used outside of binding context.",
        line: 2,
        column: 4839,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4841,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4850,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4863,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4850,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4863,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'ak' is already defined.",
        line: 2,
        column: 4854,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 4856,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4854,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4856,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4854,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4856,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4854,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4856,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4854,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4856,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'am' is already defined.",
        line: 2,
        column: 4859,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 4861,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4466 is used outside of binding context.",
        line: 2,
        column: 4859,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4861,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'am' declared on line 2 column 4670 is used outside of binding context.",
        line: 2,
        column: 4859,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4861,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4864,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4866,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4864,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4866,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4864,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4866,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4864,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4866,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 4870,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 4874,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4872,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4874,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4872,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4874,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4872,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4874,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4872,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4874,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of ===.",
        line: 2,
        column: 4879,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 4891,
        fix: {
          range: [4899, 4911],
          text: 'aj[ak]==="^"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4888,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4890,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4888,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4890,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4888,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4890,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4888,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4890,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of !==.",
        line: 2,
        column: 4893,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 4907,
        fix: {
          range: [4913, 4927],
          text: 'aj[ak+1]!=="^"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4902,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4904,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4902,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4904,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4902,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4904,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4902,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4904,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4912,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4914,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4912,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4914,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4912,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4914,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4949 is used outside of binding context.",
        line: 2,
        column: 4912,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4914,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4945,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4953,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4945,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4953,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'ak' is already defined.",
        line: 2,
        column: 4949,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 4951,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4949,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4951,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4949,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4951,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4949,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4951,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4949,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4951,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4954,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4956,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4954,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4956,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4954,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4956,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4954,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4956,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 4960,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 4964,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4962,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4964,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4962,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4964,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4962,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4964,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4962,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4964,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4966,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 4980,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4966,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 4980,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'ag' is already defined.",
        line: 2,
        column: 4970,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 4972,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4487 is used outside of binding context.",
        line: 2,
        column: 4970,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4972,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4691 is used outside of binding context.",
        line: 2,
        column: 4970,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4972,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 4976,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4978,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 4976,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4978,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 4976,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4978,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 4976,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4978,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 4980,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 5000,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 4980,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5000,
        fix: {
          range: [5000, 5003],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4487 is used outside of binding context.",
        line: 2,
        column: 4987,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4989,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4691 is used outside of binding context.",
        line: 2,
        column: 4987,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 4989,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4487 is used outside of binding context.",
        line: 2,
        column: 5003,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5005,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4691 is used outside of binding context.",
        line: 2,
        column: 5003,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5005,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 5030,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5032,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 5030,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5032,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 5030,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5032,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 5030,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5032,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4487 is used outside of binding context.",
        line: 2,
        column: 5036,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5038,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4691 is used outside of binding context.",
        line: 2,
        column: 5036,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5038,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-lonely-if",
        severity: 2,
        message: "Unexpected if as the only statement in an else block.",
        line: 2,
        column: 5045,
        nodeType: "IfStatement",
        messageId: "unexpectedLonelyIf",
        endLine: 2,
        endColumn: 5176,
        fix: {
          range: [5064, 5197],
          text: ' if(ai!=="\\\\"){aj[ak]=ag.replace(/[a-zA-Z]/g,function(ao){var ap=ao.charCodeAt(0);return"["+String.fromCharCode(ap&~32,ap|32)+"]"})}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4461 is used outside of binding context.",
        line: 2,
        column: 5062,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5064,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4604 is used outside of binding context.",
        line: 2,
        column: 5062,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5064,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4665 is used outside of binding context.",
        line: 2,
        column: 5062,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5064,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ak' declared on line 2 column 4854 is used outside of binding context.",
        line: 2,
        column: 5062,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5064,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4487 is used outside of binding context.",
        line: 2,
        column: 5066,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5068,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ag' declared on line 2 column 4691 is used outside of binding context.",
        line: 2,
        column: 5066,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5068,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "func-names",
        severity: 1,
        message: "Unexpected unnamed function.",
        line: 2,
        column: 5089,
        nodeType: "FunctionExpression",
        messageId: "unnamed",
        endLine: 2,
        endColumn: 5097,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5102,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5126,
        fix: {
          range: [5122, 5125],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 2,
        column: 5132,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 2,
        endColumn: 5173,
        fix: {
          range: [5152, 5193],
          text: "`[${String.fromCharCode(ap&~32,ap|32)}]`",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '&'.",
        line: 2,
        column: 5156,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 5162,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '~'.",
        line: 2,
        column: 5159,
        nodeType: "UnaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 5162,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '|'.",
        line: 2,
        column: 5163,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 5168,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 5198,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 5208,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5198,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5208,
        fix: {
          range: [5218, 5221],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 5212,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 5230,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5212,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5230,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'V' is already defined.",
        line: 2,
        column: 5216,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 5217,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'V' declared on line 2 column 2581 is used outside of binding context.",
        line: 2,
        column: 5216,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5217,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'U' is already defined.",
        line: 2,
        column: 5220,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 5221,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'U' declared on line 2 column 2585 is used outside of binding context.",
        line: 2,
        column: 5220,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5221,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'V' declared on line 2 column 2581 is used outside of binding context.",
        line: 2,
        column: 5231,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5232,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'U' declared on line 2 column 2585 is used outside of binding context.",
        line: 2,
        column: 5233,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5234,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 5235,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 5238,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'V' declared on line 2 column 2581 is used outside of binding context.",
        line: 2,
        column: 5237,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5238,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 5240,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 5252,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5240,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5252,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'ae' is already defined.",
        line: 2,
        column: 5244,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 5246,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ae' declared on line 2 column 2609 is used outside of binding context.",
        line: 2,
        column: 5244,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5246,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'V' declared on line 2 column 2581 is used outside of binding context.",
        line: 2,
        column: 5249,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5250,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ae' declared on line 2 column 2609 is used outside of binding context.",
        line: 2,
        column: 5255,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5257,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ae' declared on line 2 column 2609 is used outside of binding context.",
        line: 2,
        column: 5266,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5268,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 2,
        column: 5296,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 2,
        endColumn: 5301,
        fix: {
          range: [5316, 5321],
          text: "`${ae}`",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ae' declared on line 2 column 2609 is used outside of binding context.",
        line: 2,
        column: 5299,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5301,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 2,
        column: 5311,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 2,
        endColumn: 5326,
        fix: {
          range: [5331, 5346],
          text: "`(?:${W(ae)})`",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'ae' declared on line 2 column 2609 is used outside of binding context.",
        line: 2,
        column: 5319,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 5321,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5386,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5417,
        fix: {
          range: [5406, 5409],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5417,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5426,
        fix: {
          range: [5437, 5440],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5426,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5434,
        fix: {
          range: [5446, 5449],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5434,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5443,
        fix: {
          range: [5454, 5457],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5443,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5451,
        fix: {
          range: [5463, 5466],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5451,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5457,
        fix: {
          range: [5471, 5474],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-lonely-if",
        severity: 2,
        message: "Unexpected if as the only statement in an else block.",
        line: 2,
        column: 5509,
        nodeType: "IfStatement",
        messageId: "unexpectedLonelyIf",
        endLine: 2,
        endColumn: 5617,
        fix: {
          range: [5528, 5638],
          text: ' if(window.getComputedStyle){S=document.defaultView.getComputedStyle(V,null).getPropertyValue("white-space")}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 5618,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 5652,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5618,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5652,
        fix: {
          range: [5638, 5641],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of ===.",
        line: 2,
        column: 5627,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 5651,
        fix: {
          range: [5647, 5671],
          text: 'S.substring(0,3)==="pre"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "default-case",
        severity: 2,
        message: "Expected a default case.",
        line: 2,
        column: 5668,
        nodeType: "SwitchStatement",
        messageId: "missingDefaultCase",
        endLine: 2,
        endColumn: 6046,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 5731,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 5751,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5731,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5751,
        fix: {
          range: [5751, 5754],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 5781,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 5800,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5781,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5800,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of ===.",
        line: 2,
        column: 5803,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 5812,
        fix: {
          range: [5823, 5832],
          text: 'ad==="BR"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of ===.",
        line: 2,
        column: 5814,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 5823,
        fix: {
          range: [5834, 5843],
          text: 'ad==="LI"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '<<'.",
        line: 2,
        column: 5837,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 5841,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 5843,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 5846,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '|'.",
        line: 2,
        column: 5849,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 5859,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '<<'.",
        line: 2,
        column: 5850,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 5856,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 5850,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 5853,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 5884,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 5904,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 5884,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 5904,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '<<'.",
        line: 2,
        column: 6002,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 6006,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '|'.",
        line: 2,
        column: 6025,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 6035,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '<<'.",
        line: 2,
        column: 6026,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 6032,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 6026,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 6029,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6143,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6174,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6143,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6174,
        fix: {
          range: [6163, 6166],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-spread",
        severity: 2,
        message: "Use the spread operator instead of '.apply()'.",
        line: 2,
        column: 6179,
        nodeType: "CallExpression",
        messageId: "preferSpread",
        endLine: 2,
        endColumn: 6208,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6209,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6220,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6209,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6220,
        fix: {
          range: [6229, 6232],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6234,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6250,
        fix: {
          range: [6254, 6257],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef-init",
        severity: 2,
        message: "It's not necessary to initialize 'V' to undefined.",
        line: 2,
        column: 6238,
        nodeType: "VariableDeclarator",
        messageId: "unnecessaryUndefinedInit",
        endLine: 2,
        endColumn: 6249,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6254,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6272,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6254,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6272,
        fix: {
          range: [6274, 6277],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6292,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6309,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6292,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6309,
        fix: {
          range: [6312, 6315],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6404,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6413,
        fix: {
          range: [6424, 6427],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6413,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6419,
        fix: {
          range: [6433, 6436],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "func-names",
        severity: 1,
        message: "Unexpected unnamed function.",
        line: 2,
        column: 6420,
        nodeType: "FunctionExpression",
        messageId: "unnamed",
        endLine: 2,
        endColumn: 6428,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6431,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6450,
        fix: {
          range: [6451, 6454],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6450,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6460,
        fix: {
          range: [6470, 6473],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6460,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6470,
        fix: {
          range: [6480, 6483],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6474,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6494,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6474,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6494,
        fix: {
          range: [6494, 6497],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 6500,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 6504,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6506,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6519,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6506,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6519,
        fix: {
          range: [6526, 6529],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6519,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6531,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6519,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6531,
        fix: {
          range: [6539, 6542],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6542,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6558,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6542,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6558,
        fix: {
          range: [6562, 6565],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '--' used.",
        line: 2,
        column: 6559,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 6563,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6589,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6601,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6589,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6601,
        fix: {
          range: [6609, 6612],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6601,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6614,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6601,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6614,
        fix: {
          range: [6621, 6624],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 2,
        column: 6608,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 2,
        endColumn: 6613,
        fix: {
          range: [6628, 6633],
          text: "`${af}`",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-prototype-builtins",
        severity: 2,
        message:
          "Do not access Object.prototype method 'hasOwnProperty' from target object.",
        line: 2,
        column: 6621,
        nodeType: "CallExpression",
        messageId: "prototypeBuildIn",
        endLine: 2,
        endColumn: 6635,
        suggestions: [
          {
            messageId: "callObjectPrototype",
            data: {
              prop: "hasOwnProperty",
            },
            fix: {
              range: [6638, 6656],
              text: "Object.prototype.hasOwnProperty.call(ag, ",
            },
            desc: "Call Object.prototype.hasOwnProperty explicitly.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6701,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6716,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6701,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6716,
        fix: {
          range: [6721, 6724],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6716,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 7512,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6716,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 7512,
        fix: {
          range: [6736, 6739],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "func-names",
        severity: 1,
        message: "Unexpected unnamed function.",
        line: 2,
        column: 6722,
        nodeType: "FunctionExpression",
        messageId: "unnamed",
        endLine: 2,
        endColumn: 6730,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "one-var",
        severity: 2,
        message: "Split 'var' declarations into multiple statements.",
        line: 2,
        column: 6735,
        nodeType: "VariableDeclaration",
        messageId: "split",
        endLine: 2,
        endColumn: 6768,
        fix: {
          range: [6774, 6775],
          text: "; var ",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6735,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6768,
        fix: {
          range: [6755, 6758],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6768,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6781,
        fix: {
          range: [6788, 6791],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6781,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6790,
        fix: {
          range: [6801, 6804],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6790,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6812,
        fix: {
          range: [6810, 6813],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6812,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6822,
        fix: {
          range: [6832, 6835],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6826,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6847,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6826,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6847,
        fix: {
          range: [6846, 6849],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 6854,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 6858,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6860,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6874,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6860,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6874,
        fix: {
          range: [6880, 6883],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6874,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6888,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6874,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6888,
        fix: {
          range: [6894, 6897],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6888,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6902,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6888,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6902,
        fix: {
          range: [6908, 6911],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6902,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6909,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6902,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6909,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 6948,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 6971,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 6948,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 6971,
        fix: {
          range: [6968, 6971],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-destructuring",
        severity: 2,
        message: "Use array destructuring.",
        line: 2,
        column: 6997,
        nodeType: "AssignmentExpression",
        messageId: "preferDestructuring",
        endLine: 2,
        endColumn: 7005,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 7015,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 7023,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 7015,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 7023,
        fix: {
          range: [7035, 7038],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 7029,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 7033,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-destructuring",
        severity: 2,
        message: "Use array destructuring.",
        line: 2,
        column: 7070,
        nodeType: "AssignmentExpression",
        messageId: "preferDestructuring",
        endLine: 2,
        endColumn: 7078,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of ===.",
        line: 2,
        column: 7117,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 7144,
        fix: {
          range: [7137, 7164],
          text: 'ap.substring(0,5)==="lang-"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 7217,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 7227,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 7217,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 7227,
        fix: {
          range: [7237, 7240],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 7271,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 7284,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 7271,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 7284,
        fix: {
          range: [7291, 7294],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 7284,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 7306,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 7284,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 7306,
        fix: {
          range: [7304, 7307],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 7306,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 7326,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 7306,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 7326,
        fix: {
          range: [7326, 7329],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 7378,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 7401,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 7378,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 7401,
        fix: {
          range: [7398, 7401],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'ah'.",
        line: 2,
        column: 7493,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 2,
        endColumn: 7495,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "one-var",
        severity: 2,
        message: "Split 'var' declarations into multiple statements.",
        line: 2,
        column: 7535,
        nodeType: "VariableDeclaration",
        messageId: "split",
        endLine: 2,
        endColumn: 7549,
        fix: {
          range: [7563, 7564],
          text: "; var ",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 7535,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 7549,
        fix: {
          range: [7555, 7558],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7590,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7591,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7610, 7611],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7610, 7610],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7592,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7593,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7612, 7613],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7612, 7612],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7594,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7595,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7614, 7615],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7614, 7614],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7601,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7602,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7621, 7622],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7621, 7621],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7616,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7617,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7636, 7637],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7636, 7636],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7628,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7629,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7648, 7649],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7648, 7648],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7637,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7638,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7657, 7658],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7657, 7657],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7639,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7640,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7659, 7660],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7659, 7659],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7641,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7642,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7661, 7662],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7661, 7661],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7647,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7648,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7667, 7668],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7667, 7667],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7649,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7650,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7669, 7670],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7669, 7669],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7651,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7652,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7671, 7672],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7671, 7671],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7658,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7659,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7678, 7679],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7678, 7678],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7673,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7674,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7693, 7694],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7693, 7693],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7685,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7686,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7705, 7706],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7705, 7705],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7694,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7695,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7714, 7715],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7714, 7714],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7696,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7697,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7716, 7717],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7716, 7716],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7698,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7699,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7718, 7719],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7718, 7718],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7704,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7705,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7724, 7725],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7724, 7724],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7713,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7714,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7733, 7734],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7733, 7733],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7730,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7731,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7750, 7751],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7750, 7750],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7736,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7737,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7756, 7757],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7756, 7756],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7745,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7746,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7765, 7766],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7765, 7765],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7762,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7763,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7782, 7783],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7782, 7782],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-lonely-if",
        severity: 2,
        message: "Unexpected if as the only statement in an else block.",
        line: 2,
        column: 7788,
        nodeType: "IfStatement",
        messageId: "unexpectedLonelyIf",
        endLine: 2,
        endColumn: 8035,
        fix: {
          range: [7807, 8056],
          text: ' if(T.multiLineStrings){W.push([C,/^(?:\\\'(?:[^\\\\\\\']|\\\\[\\s\\S])*(?:\\\'|$)|\\"(?:[^\\\\\\"]|\\\\[\\s\\S])*(?:\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,null,"\'\\"`"])}else{W.push([C,/^(?:\\\'(?:[^\\\\\\\'\\r\\n]|\\\\.)*(?:\\\'|$)|\\"(?:[^\\\\\\"\\r\\n]|\\\\.)*(?:\\"|$))/,null,"\\"\'"])}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7826,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7827,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7846, 7847],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7846, 7846],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7835,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7836,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7855, 7856],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7855, 7855],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7852,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7853,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7872, 7873],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7872, 7872],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7858,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7859,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7878, 7879],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7878, 7878],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7867,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7868,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7887, 7888],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7887, 7887],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7884,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7885,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7904, 7905],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7904, 7904],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\`.",
        line: 2,
        column: 7890,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7891,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7910, 7911],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7910, 7910],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\`.",
        line: 2,
        column: 7899,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7900,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7919, 7920],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7919, 7919],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\`.",
        line: 2,
        column: 7916,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7917,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7936, 7937],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7936, 7936],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7958,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7959,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7978, 7979],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7978, 7978],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7967,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7968,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [7987, 7988],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [7987, 7987],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 7983,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7984,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [8003, 8004],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [8003, 8003],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7989,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7990,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [8009, 8010],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [8009, 8009],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 7998,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 7999,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [8018, 8019],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [8018, 8018],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 8014,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 8015,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [8034, 8035],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [8034, 8034],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 8071,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 8072,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [8091, 8092],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [8091, 8091],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 8078,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 8079,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [8098, 8099],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [8098, 8098],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 8082,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 8083,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [8102, 8103],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [8102, 8102],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 8084,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 8085,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [8104, 8105],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [8104, 8104],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 8091,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 8092,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [8111, 8112],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [8111, 8111],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 8105,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 8126,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 8105,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 8126,
        fix: {
          range: [8125, 8128],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 8592,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 8696,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 8592,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 8696,
        fix: {
          range: [8612, 8615],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 2,
        column: 8728,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 2,
        endColumn: 8743,
        fix: {
          range: [8748, 8763],
          text: "`^${M}(${X})`",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 8747,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 8761,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 8747,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 8761,
        fix: {
          range: [8767, 8770],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 8781,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 8824,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 8781,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 8824,
        fix: {
          range: [8801, 8804],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 2,
        column: 8788,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 2,
        endColumn: 8801,
        fix: {
          range: [8808, 8821],
          text: "`${T.keywords}`",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 2,
        column: 8858,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 2,
        endColumn: 8896,
        fix: {
          range: [8878, 8916],
          text: '`^(?:${U.replace(/[\\s,]+/g,"|")})\\\\b`',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-regex-literals",
        severity: 2,
        message:
          "Use a regular expression literal instead of the 'RegExp' constructor.",
        line: 2,
        column: 9076,
        nodeType: "NewExpression",
        messageId: "unexpectedRegExp",
        endLine: 2,
        endColumn: 9177,
        suggestions: [
          {
            messageId: "replaceWithLiteral",
            fix: {
              range: [9096, 9197],
              text: "/^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*/i",
            },
            desc: "Replace with an equivalent regular expression literal.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\..",
        line: 2,
        column: 9231,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 9232,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [9251, 9252],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [9251, 9251],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 9235,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 9236,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [9255, 9256],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [9255, 9255],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 9237,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 9238,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [9257, 9258],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [9257, 9257],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\`.",
        line: 2,
        column: 9239,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 9240,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [9259, 9260],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [9259, 9259],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\/.",
        line: 2,
        column: 9241,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 9242,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [9261, 9262],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [9261, 9261],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\#.",
        line: 2,
        column: 9243,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 9244,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [9263, 9264],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [9263, 9263],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 9272,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 9373,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 9272,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 9373,
        fix: {
          range: [9292, 9295],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 9390,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 9421,
        fix: {
          range: [9410, 9413],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 9421,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 9439,
        fix: {
          range: [9441, 9444],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 9439,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 9462,
        fix: {
          range: [9459, 9462],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 9462,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 9468,
        fix: {
          range: [9482, 9485],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-lonely-if",
        severity: 2,
        message: "Unexpected if as the only statement in an else block.",
        line: 2,
        column: 9520,
        nodeType: "IfStatement",
        messageId: "unexpectedLonelyIf",
        endLine: 2,
        endColumn: 9622,
        fix: {
          range: [9539, 9643],
          text: ' if(window.getComputedStyle){S=ac.defaultView.getComputedStyle(V,null).getPropertyValue("white-space")}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 9623,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 9657,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 9623,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 9657,
        fix: {
          range: [9643, 9646],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of ===.",
        line: 2,
        column: 9632,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 9656,
        fix: {
          range: [9652, 9676],
          text: 'S.substring(0,3)==="pre"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 9657,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 9687,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 9657,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 9687,
        fix: {
          range: [9677, 9680],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 9736,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 9747,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 9736,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 9747,
        fix: {
          range: [9756, 9759],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "default-case",
        severity: 2,
        message: "Expected a default case.",
        line: 2,
        column: 9763,
        nodeType: "SwitchStatement",
        messageId: "missingDefaultCase",
        endLine: 2,
        endColumn: 10259,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of ===.",
        line: 2,
        column: 9824,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 9842,
        fix: {
          range: [9844, 9862],
          text: 'al.nodeName==="BR"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 9909,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 9929,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 9909,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 9929,
        fix: {
          range: [9929, 9932],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 9986,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10006,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 9986,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10006,
        fix: {
          range: [10006, 10009],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10006,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10026,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10006,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10026,
        fix: {
          range: [10026, 10029],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10033,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10065,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10033,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10065,
        fix: {
          range: [10053, 10056],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'al'.",
        line: 2,
        column: 10065,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 2,
        endColumn: 10067,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10081,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10124,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10081,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10124,
        fix: {
          range: [10101, 10104],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10131,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10152,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10131,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10152,
        fix: {
          range: [10151, 10154],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to function parameter 'ak'.",
        line: 2,
        column: 10299,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParam",
        endLine: 2,
        endColumn: 10301,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10351,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10384,
        fix: {
          range: [10371, 10374],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10384,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10405,
        fix: {
          range: [10404, 10407],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10412,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10428,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10412,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10428,
        fix: {
          range: [10432, 10435],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10428,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10450,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10428,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10450,
        fix: {
          range: [10448, 10451],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10473,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10482,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10473,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10482,
        fix: {
          range: [10493, 10496],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10541,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10569,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10541,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10569,
        fix: {
          range: [10561, 10564],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10573,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10579,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10573,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10579,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-cond-assign",
        severity: 2,
        message: "Unexpected assignment within a 'for' statement.",
        line: 2,
        column: 10581,
        nodeType: "AssignmentExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 10597,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10639,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10646,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10639,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10646,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'Y' declared on line 2 column 10812 is used outside of binding context.",
        line: 2,
        column: 10643,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 10644,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'Y' declared on line 2 column 10812 is used outside of binding context.",
        line: 2,
        column: 10647,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 10648,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 10658,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 10661,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'Y' declared on line 2 column 10812 is used outside of binding context.",
        line: 2,
        column: 10660,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 10661,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'Y' declared on line 2 column 10812 is used outside of binding context.",
        line: 2,
        column: 10668,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 10669,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '|'.",
        line: 2,
        column: 10681,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 10685,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10718,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10748,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10718,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10748,
        fix: {
          range: [10738, 10741],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10772,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10804,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10772,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10804,
        fix: {
          range: [10792, 10795],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-bitwise",
        severity: 2,
        message: "Unexpected use of '|'.",
        line: 2,
        column: 10789,
        nodeType: "BinaryExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 10799,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 10808,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 10826,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10808,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 10826,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'Y' is already defined.",
        line: 2,
        column: 10812,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 10813,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'Y' declared on line 2 column 10643 is used outside of binding context.",
        line: 2,
        column: 10812,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 10813,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'Y' declared on line 2 column 10643 is used outside of binding context.",
        line: 2,
        column: 10827,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 10828,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 10831,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 10834,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'Y' declared on line 2 column 10643 is used outside of binding context.",
        line: 2,
        column: 10833,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 10834,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'Y' declared on line 2 column 10643 is used outside of binding context.",
        line: 2,
        column: 10841,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 10842,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 2,
        column: 10857,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 2,
        endColumn: 10871,
        fix: {
          range: [10877, 10891],
          text: "`L${(Y+X)%10}`",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'Y' declared on line 2 column 10643 is used outside of binding context.",
        line: 2,
        column: 10863,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 10864,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 10985,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11029,
        fix: {
          range: [11005, 11008],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11029,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11042,
        fix: {
          range: [11049, 11052],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11042,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11063,
        fix: {
          range: [11062, 11065],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11063,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11080,
        fix: {
          range: [11083, 11086],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11080,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11088,
        fix: {
          range: [11100, 11103],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11088,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11104,
        fix: {
          range: [11108, 11111],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11104,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11120,
        fix: {
          range: [11124, 11127],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11120,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11129,
        fix: {
          range: [11140, 11143],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11129,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11150,
        fix: {
          range: [11149, 11152],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11150,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11165,
        fix: {
          range: [11170, 11173],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11165,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11173,
        fix: {
          range: [11185, 11188],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "one-var",
        severity: 2,
        message: "Split 'var' declarations into multiple statements.",
        line: 2,
        column: 11181,
        nodeType: "VariableDeclaration",
        messageId: "split",
        endLine: 2,
        endColumn: 11191,
        fix: {
          range: [11207, 11208],
          text: "; var ",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11181,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11191,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11181,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11191,
        fix: {
          range: [11201, 11204],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-multi-assign",
        severity: 2,
        message: "Unexpected chained assignment.",
        line: 2,
        column: 11198,
        nodeType: "AssignmentExpression",
        messageId: "unexpectedChain",
        endLine: 2,
        endColumn: 11202,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 11232,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 11236,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 11240,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 11244,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 11248,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 11252,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 11256,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 11260,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-multi-assign",
        severity: 2,
        message: "Unexpected chained assignment.",
        line: 2,
        column: 11286,
        nodeType: "AssignmentExpression",
        messageId: "unexpectedChain",
        endLine: 2,
        endColumn: 11290,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11298,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11311,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11298,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11311,
        fix: {
          range: [11318, 11321],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11311,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11326,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11311,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11326,
        fix: {
          range: [11331, 11334],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11326,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11337,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11326,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11337,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'W' declared on line 2 column 11501 is used outside of binding context.",
        line: 2,
        column: 11330,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 11331,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'W' declared on line 2 column 11501 is used outside of binding context.",
        line: 2,
        column: 11343,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 11344,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'W' declared on line 2 column 11501 is used outside of binding context.",
        line: 2,
        column: 11353,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 11354,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'W' declared on line 2 column 11501 is used outside of binding context.",
        line: 2,
        column: 11364,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 11365,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 11371,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 11375,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 11382,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 11386,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'W' declared on line 2 column 11501 is used outside of binding context.",
        line: 2,
        column: 11394,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 11395,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-multi-assign",
        severity: 2,
        message: "Unexpected chained assignment.",
        line: 2,
        column: 11398,
        nodeType: "AssignmentExpression",
        messageId: "unexpectedChain",
        endLine: 2,
        endColumn: 11409,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11410,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11422,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11410,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11422,
        fix: {
          range: [11430, 11433],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-unused-vars",
        severity: 2,
        message: "'ae' is assigned a value but never used.",
        line: 2,
        column: 11414,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 2,
        endColumn: 11416,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11434,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11448,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11434,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11448,
        fix: {
          range: [11454, 11457],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-unused-vars",
        severity: 2,
        message: "'af' is assigned a value but never used.",
        line: 2,
        column: 11438,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 2,
        endColumn: 11440,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11448,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11467,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11448,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11467,
        fix: {
          range: [11468, 11471],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11467,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11479,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11467,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11479,
        fix: {
          range: [11487, 11490],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-unused-vars",
        severity: 2,
        message: "'ag' is assigned a value but never used.",
        line: 2,
        column: 11471,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 2,
        endColumn: 11473,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11479,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11497,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11479,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11497,
        fix: {
          range: [11499, 11502],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11497,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11518,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11497,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11518,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-redeclare",
        severity: 2,
        message: "'W' is already defined.",
        line: 2,
        column: 11501,
        nodeType: "Identifier",
        messageId: "redeclared",
        endLine: 2,
        endColumn: 11502,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'W' declared on line 2 column 11330 is used outside of binding context.",
        line: 2,
        column: 11501,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 11502,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11518,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11534,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11518,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11534,
        fix: {
          range: [11538, 11541],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11534,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11540,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11534,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11540,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-cond-assign",
        severity: 2,
        message: "Unexpected assignment within an 'if' statement.",
        line: 2,
        column: 11561,
        nodeType: "AssignmentExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 11580,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'W' declared on line 2 column 11330 is used outside of binding context.",
        line: 2,
        column: 11578,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 11579,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11626,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11650,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11626,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11650,
        fix: {
          range: [11646, 11649],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11650,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11682,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11650,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11682,
        fix: {
          range: [11670, 11673],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11702,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11723,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11702,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11723,
        fix: {
          range: [11722, 11725],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-multi-assign",
        severity: 2,
        message: "Unexpected chained assignment.",
        line: 2,
        column: 11782,
        nodeType: "AssignmentExpression",
        messageId: "unexpectedChain",
        endLine: 2,
        endColumn: 11821,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'W' declared on line 2 column 11330 is used outside of binding context.",
        line: 2,
        column: 11816,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 11817,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "block-scoped-var",
        severity: 2,
        message:
          "'W' declared on line 2 column 11330 is used outside of binding context.",
        line: 2,
        column: 11860,
        nodeType: "Identifier",
        messageId: "outOfScope",
        endLine: 2,
        endColumn: 11861,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11894,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11903,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11894,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11903,
        fix: {
          range: [11914, 11917],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11923,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11937,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11923,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11937,
        fix: {
          range: [11943, 11946],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '--' used.",
        line: 2,
        column: 11938,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 11941,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 11947,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 11958,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 11947,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 11958,
        fix: {
          range: [11967, 11970],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-prototype-builtins",
        severity: 2,
        message:
          "Do not access Object.prototype method 'hasOwnProperty' from target object.",
        line: 2,
        column: 11964,
        nodeType: "CallExpression",
        messageId: "prototypeBuildIn",
        endLine: 2,
        endColumn: 11978,
        suggestions: [
          {
            messageId: "callObjectPrototype",
            data: {
              prop: "hasOwnProperty",
            },
            fix: {
              range: [11982, 11999],
              text: "Object.prototype.hasOwnProperty.call(t, ",
            },
            desc: "Call Object.prototype.hasOwnProperty explicitly.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-lonely-if",
        severity: 2,
        message: "Unexpected if as the only statement in an else block.",
        line: 2,
        column: 11995,
        nodeType: "IfStatement",
        messageId: "unexpectedLonelyIf",
        endLine: 2,
        endColumn: 12068,
        fix: {
          range: [12014, 12089],
          text: ' if(window.console){console.warn("cannot override language handler %s",T)}',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 2,
        column: 12014,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 12026,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "warn",
            },
            fix: {
              range: [12034, 12087],
              text: "",
            },
            desc: "Remove the console.warn().",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-prototype-builtins",
        severity: 2,
        message:
          "Do not access Object.prototype method 'hasOwnProperty' from target object.",
        line: 2,
        column: 12097,
        nodeType: "CallExpression",
        messageId: "prototypeBuildIn",
        endLine: 2,
        endColumn: 12111,
        suggestions: [
          {
            messageId: "callObjectPrototype",
            data: {
              prop: "hasOwnProperty",
            },
            fix: {
              range: [12115, 12132],
              text: "Object.prototype.hasOwnProperty.call(t, ",
            },
            desc: "Call Object.prototype.hasOwnProperty explicitly.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to function parameter 'T'.",
        line: 2,
        column: 12117,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParam",
        endLine: 2,
        endColumn: 12118,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\!.",
        line: 2,
        column: 12253,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12254,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12273, 12274],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12273, 12273],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\-.",
        line: 2,
        column: 12269,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12270,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12289, 12290],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12289, 12289],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 12685,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12686,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12705, 12706],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12705, 12705],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 12689,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12690,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12709, 12710],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12709, 12709],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 12693,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12694,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12713, 12714],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12713, 12713],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 12697,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12698,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12717, 12718],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12717, 12717],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 12701,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12702,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12721, 12722],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12721, 12721],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 12705,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12706,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12725, 12726],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12725, 12725],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 12835,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12836,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12855, 12856],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12855, 12855],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 12837,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12838,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12857, 12858],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12857, 12857],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 12849,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12850,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12869, 12870],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12869, 12869],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 12851,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12852,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12871, 12872],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12871, 12871],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\/.",
        line: 2,
        column: 12855,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12856,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12875, 12876],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12875, 12875],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\/.",
        line: 2,
        column: 12881,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12882,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12901, 12902],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12901, 12901],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 12913,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12914,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12933, 12934],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12933, 12933],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 12918,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12919,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12938, 12939],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12938, 12938],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 12923,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12924,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12943, 12944],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12943, 12943],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 12954,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12955,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12974, 12975],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12974, 12974],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 12959,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12960,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12979, 12980],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12979, 12979],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 12964,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12965,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [12984, 12985],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [12984, 12984],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 12998,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 12999,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [13018, 13019],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [13018, 13018],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 13000,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 13001,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [13020, 13021],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [13020, 13020],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 13038,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 13039,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [13058, 13059],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [13058, 13058],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 13043,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 13044,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [13063, 13064],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [13063, 13063],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 13048,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 13049,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [13068, 13069],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [13068, 13068],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 13080,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 13081,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [13100, 13101],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [13100, 13100],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 13085,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 13086,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [13105, 13106],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [13105, 13105],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 13090,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 13091,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [13110, 13111],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [13110, 13110],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 13125,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 13126,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [13145, 13146],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [13145, 13145],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 13127,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 13128,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [13147, 13148],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [13147, 13147],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14075,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14097,
        fix: {
          range: [14095, 14098],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14101,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14123,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14101,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14123,
        fix: {
          range: [14121, 14124],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14123,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14142,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14123,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14142,
        fix: {
          range: [14143, 14146],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'V'.",
        line: 2,
        column: 14142,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 2,
        endColumn: 14143,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'V'.",
        line: 2,
        column: 14157,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 2,
        endColumn: 14158,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'V'.",
        line: 2,
        column: 14173,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 2,
        endColumn: 14174,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 2,
        column: 14233,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 14244,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "log",
            },
            fix: {
              range: [14253, 14286],
              text: "",
            },
            desc: "Remove the console.log().",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14287,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14323,
        fix: {
          range: [14307, 14310],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14350,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14401,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14350,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14401,
        fix: {
          range: [14370, 14373],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14496,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14533,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14496,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14533,
        fix: {
          range: [14516, 14519],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14533,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14542,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14533,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14542,
        fix: {
          range: [14553, 14556],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14546,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14554,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14546,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14554,
        fix: {
          range: [14566, 14569],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 14568,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 14572,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14578,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14601,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14578,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14601,
        fix: {
          range: [14598, 14601],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 14606,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 14609,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14638,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14649,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14638,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14649,
        fix: {
          range: [14658, 14661],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "func-names",
        severity: 1,
        message: "Unexpected unnamed method 'now'.",
        line: 2,
        column: 14663,
        nodeType: "FunctionExpression",
        messageId: "unnamed",
        endLine: 2,
        endColumn: 14675,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "object-shorthand",
        severity: 2,
        message: "Expected method shorthand.",
        line: 2,
        column: 14663,
        nodeType: "Property",
        messageId: "expectedMethodShorthand",
        endLine: 2,
        endColumn: 14697,
        fix: {
          range: [14683, 14717],
          text: "now(){return +(new Date)}",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14699,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14707,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14699,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14707,
        fix: {
          range: [14719, 14722],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14707,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14713,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14707,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14713,
        fix: {
          range: [14727, 14730],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14713,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14753,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14713,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14753,
        fix: {
          range: [14733, 14736],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14753,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14778,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14753,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14778,
        fix: {
          range: [14773, 14776],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-unused-vars",
        severity: 2,
        message: "'ae' is assigned a value but never used.",
        line: 2,
        column: 14757,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 2,
        endColumn: 14759,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14791,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14855,
        fix: {
          range: [14811, 14814],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 2,
        column: 14883,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 2,
        endColumn: 14886,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14888,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14900,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14888,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14900,
        fix: {
          range: [14908, 14911],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14900,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14920,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14900,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14920,
        fix: {
          range: [14920, 14923],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14953,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14973,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14953,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14973,
        fix: {
          range: [14973, 14976],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 14973,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 14980,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 14973,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 14980,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-cond-assign",
        severity: 2,
        message: "Unexpected assignment within an 'if' statement.",
        line: 2,
        column: 14989,
        nodeType: "AssignmentExpression",
        messageId: "unexpected",
        endLine: 2,
        endColumn: 14997,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "yoda",
        severity: 2,
        message: "Expected literal to be on the right side of ===.",
        line: 2,
        column: 15000,
        nodeType: "BinaryExpression",
        messageId: "expected",
        endLine: 2,
        endColumn: 15019,
        fix: {
          range: [15020, 15039],
          text: 'am.tagName==="CODE"',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-destructuring",
        severity: 2,
        message: "Use array destructuring.",
        line: 2,
        column: 15054,
        nodeType: "AssignmentExpression",
        messageId: "preferDestructuring",
        endLine: 2,
        endColumn: 15062,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 15063,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 15076,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 15063,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 15076,
        fix: {
          range: [15083, 15086],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 15080,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 15100,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 15080,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 15100,
        fix: {
          range: [15100, 15103],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "vars-on-top",
        severity: 2,
        message:
          "All 'var' declarations must be at the top of the function scope.",
        line: 2,
        column: 15265,
        nodeType: "VariableDeclaration",
        messageId: "top",
        endLine: 2,
        endColumn: 15318,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 15265,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 2,
        endColumn: 15318,
        fix: {
          range: [15285, 15288],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-lonely-if",
        severity: 2,
        message: "Unexpected if as the only statement in an else block.",
        line: 2,
        column: 15473,
        nodeType: "IfStatement",
        messageId: "unexpectedLonelyIf",
        endLine: 2,
        endColumn: 15485,
        fix: {
          range: [15492, 15506],
          text: " if(ad){ad()}",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 15786,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 15788,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 15809,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 15811,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 15835,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 15837,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 15875,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 15877,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\!.",
        line: 2,
        column: 15892,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 15893,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [15912, 15913],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [15912, 15912],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\-.",
        line: 2,
        column: 15908,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 15909,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [15928, 15929],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [15928, 15928],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 15918,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 15920,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 16362,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 16364,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 16410,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 16412,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 16453,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 16455,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 16498,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 16500,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 16551,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 16553,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 16574,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 16576,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 16597,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 16599,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 16646,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 16648,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 16661,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 16662,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [16681, 16682],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [16681, 16681],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 16676,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 16677,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [16696, 16697],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [16696, 16696],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 16708,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 16709,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [16728, 16729],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [16728, 16728],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 16719,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 16721,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 16734,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 16735,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [16754, 16755],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [16754, 16754],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 16749,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 16750,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [16769, 16770],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [16769, 16769],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 16781,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 16782,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [16801, 16802],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [16801, 16801],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\).",
        line: 2,
        column: 16817,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 16818,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [16837, 16838],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [16837, 16837],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 16819,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 16820,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [16839, 16840],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [16839, 16839],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 16821,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 16822,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [16841, 16842],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [16841, 16841],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 16833,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 16835,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\!.",
        line: 2,
        column: 16860,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 16861,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [16880, 16881],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [16880, 16880],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\-.",
        line: 2,
        column: 16991,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 16992,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [17011, 17012],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [17011, 17011],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 17026,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 17028,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\/.",
        line: 2,
        column: 17059,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 17060,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [17079, 17080],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [17079, 17079],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 17079,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 17081,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 17111,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 17113,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 17161,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 17163,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 17203,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 17205,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\-.",
        line: 2,
        column: 17256,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 17257,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [17276, 17277],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [17276, 17276],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 17285,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 17287,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 17311,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 17312,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [17331, 17332],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [17331, 17331],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 17313,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 17314,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [17333, 17334],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [17333, 17333],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 17331,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 17333,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 17354,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 17356,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 17380,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 17382,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\-.",
        line: 2,
        column: 17435,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 17436,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [17455, 17456],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [17455, 17455],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 17477,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 17479,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 17500,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 17502,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-undef",
        severity: 2,
        message: "'PR' is not defined.",
        line: 2,
        column: 17526,
        nodeType: "Identifier",
        messageId: "undef",
        endLine: 2,
        endColumn: 17528,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\).",
        line: 2,
        column: 17543,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 17544,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [17563, 17564],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [17563, 17563],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: 'Unnecessary escape character: \\".',
        line: 2,
        column: 17545,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 17546,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [17565, 17566],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [17565, 17565],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\'.",
        line: 2,
        column: 17547,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 2,
        endColumn: 17548,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [17567, 17568],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [17567, 17567],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/coverage/lcov-report/sorter.js",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 2,
        column: 1,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 194,
        endColumn: 6,
        fix: {
          range: [21, 24],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "func-names",
        severity: 1,
        message: "Unexpected unnamed function.",
        line: 2,
        column: 19,
        nodeType: "FunctionExpression",
        messageId: "unnamed",
        endLine: 2,
        endColumn: 27,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "strict",
        severity: 2,
        message: "'use strict' is unnecessary inside of modules.",
        line: 3,
        column: 5,
        nodeType: "ExpressionStatement",
        messageId: "module",
        endLine: 3,
        endColumn: 18,
        fix: {
          range: [56, 69],
          text: "",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "lines-around-directive",
        severity: 2,
        message: 'Expected newline after "use strict" directive.',
        line: 3,
        column: 5,
        nodeType: "ExpressionStatement",
        messageId: "expected",
        endLine: 3,
        endColumn: 18,
        fix: {
          range: [69, 69],
          text: "\n",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "one-var",
        severity: 2,
        message: "Split 'var' declarations into multiple statements.",
        line: 4,
        column: 5,
        nodeType: "VariableDeclaration",
        messageId: "split",
        endLine: 8,
        endColumn: 11,
        fix: {
          range: [82, 92],
          text: ";\n        var ",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 4,
        column: 5,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 8,
        endColumn: 11,
        fix: {
          range: [74, 77],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 30,
        column: 42,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 30,
        endColumn: 45,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 46,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 46,
        endColumn: 66,
        fix: {
          range: [1343, 1346],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 47,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 47,
        endColumn: 62,
        fix: {
          range: [1409, 1412],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "one-var",
        severity: 2,
        message: "Split 'var' declarations into multiple statements.",
        line: 54,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "split",
        endLine: 58,
        endColumn: 15,
        fix: {
          range: [1721, 1796],
          text: ";\n            var colNode;\n            var cols = [];\n            var col;\n            var ",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 54,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 58,
        endColumn: 15,
        fix: {
          range: [1667, 1670],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "operator-assignment",
        severity: 2,
        message:
          "Assignment (=) can be replaced with operator assignment (+=).",
        line: 70,
        column: 17,
        nodeType: "AssignmentExpression",
        messageId: "replaced",
        endLine: 71,
        endColumn: 71,
        fix: {
          range: [2245, 2335],
          text: "colNode.innerHTML += '<span class=\"sorter\"></span>'",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-template",
        severity: 2,
        message: "Unexpected string concatenation.",
        line: 71,
        column: 21,
        nodeType: "BinaryExpression",
        messageId: "unexpectedStringConcatenation",
        endLine: 71,
        endColumn: 71,
        fix: {
          range: [2285, 2335],
          text: '`${colNode.innerHTML  }<span class="sorter"></span>`',
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "one-var",
        severity: 2,
        message: "Split 'var' declarations into multiple statements.",
        line: 79,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "split",
        endLine: 84,
        endColumn: 17,
        fix: {
          range: [2591, 2681],
          text: ";\n            var colNode;\n            var col;\n            var data = {};\n            var i;\n            var ",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 79,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 84,
        endColumn: 17,
        fix: {
          range: [2544, 2547],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "one-var",
        severity: 2,
        message: "Split 'var' declarations into multiple statements.",
        line: 98,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "split",
        endLine: 99,
        endColumn: 15,
        fix: {
          range: [3123, 3137],
          text: ";\n            var ",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 98,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 99,
        endColumn: 15,
        fix: {
          range: [3075, 3078],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "one-var",
        severity: 2,
        message: "Split 'var' declarations into multiple statements.",
        line: 107,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "split",
        endLine: 117,
        endColumn: 15,
        fix: {
          range: [3383, 3756],
          text: ";\n            var sorter = function(a, b) {\n                a = a.data[key];\n                b = b.data[key];\n                return a < b ? -1 : a > b ? 1 : 0;\n            };\n            var finalSorter = sorter;\n            var tableBody = document.querySelector('.coverage-summary tbody');\n            var rowNodes = tableBody.querySelectorAll('tr');\n            var rows = [];\n            var ",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 107,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 117,
        endColumn: 15,
        fix: {
          range: [3358, 3361],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-destructuring",
        severity: 2,
        message: "Use object destructuring.",
        line: 107,
        column: 13,
        nodeType: "VariableDeclarator",
        messageId: "preferDestructuring",
        endLine: 107,
        endColumn: 34,
        fix: {
          range: [3362, 3383],
          text: "{key} = cols[index]",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "func-names",
        severity: 1,
        message: "Unexpected unnamed function.",
        line: 108,
        column: 22,
        nodeType: "FunctionExpression",
        messageId: "unnamed",
        endLine: 108,
        endColumn: 30,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to function parameter 'a'.",
        line: 109,
        column: 17,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParam",
        endLine: 109,
        endColumn: 18,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to function parameter 'b'.",
        line: 110,
        column: 17,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParam",
        endLine: 110,
        endColumn: 18,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "func-names",
        severity: 1,
        message: "Unexpected unnamed function.",
        line: 120,
        column: 27,
        nodeType: "FunctionExpression",
        messageId: "unnamed",
        endLine: 120,
        endColumn: 35,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "one-var",
        severity: 2,
        message: "Split 'var' declarations into multiple statements.",
        line: 138,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "split",
        endLine: 139,
        endColumn: 33,
        fix: {
          range: [4327, 4341],
          text: ";\n            var ",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 138,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 139,
        endColumn: 33,
        fix: {
          range: [4286, 4289],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "one-var",
        severity: 2,
        message: "Split 'var' declarations into multiple statements.",
        line: 152,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "split",
        endLine: 169,
        endColumn: 15,
        fix: {
          range: [4785, 4815],
          text: ";\n            var el;\n            var ",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 152,
        column: 9,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 169,
        endColumn: 15,
        fix: {
          range: [4780, 4783],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 155,
        column: 17,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 155,
        endColumn: 35,
        fix: {
          range: [4867, 4870],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "func-names",
        severity: 1,
        message: "Unexpected unnamed function.",
        line: 157,
        column: 24,
        nodeType: "FunctionExpression",
        messageId: "unnamed",
        endLine: 157,
        endColumn: 32,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-var",
        severity: 2,
        message: "Unexpected var, use let or const instead.",
        line: 158,
        column: 21,
        nodeType: "VariableDeclaration",
        messageId: "unexpectedVar",
        endLine: 158,
        endColumn: 52,
        fix: {
          range: [4943, 4946],
          text: "let",
        },
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "func-names",
        severity: 1,
        message: "Unexpected unnamed function.",
        line: 184,
        column: 12,
        nodeType: "FunctionExpression",
        messageId: "unnamed",
        endLine: 184,
        endColumn: 20,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/jest.config.js",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/accessToken/fetchAccessToken.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/accessToken/fetchCheckAccessToken.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/agreementsInfo/fetchAreementsInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/appLogin/fetchAppLogin.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/appLogin/fetchAppLogin.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 37,
        column: 21,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 37,
        endColumn: 57,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { AxiosRequestConfig } from 'axios';\n\nimport { API_URLS } from '../../constants/apiConstants';\nimport { TV_LOGIN_TYPE } from '../../constants/commonConstants';\nimport { GATEWAY_URL } from '../../utils/common/apiConfig';\nimport httpPost from '../../utils/http/httpPost';\nimport { AppLoginBody, NewTvingResponse } from '../types';\n\nexport interface AppLoginParameter {\n  userId: string;\n  password: string;\n  loginType: string;\n  deviceId: string;\n  deviceName: string;\n  deviceModel?: string;\n}\n\n/**\n * 로그인 개선으로 아이디/비밀번호를 통해 로그인을 시도합니다.\n */\nconst fetchAppLogin = (requestParameter: AppLoginParameter, requestConfig?: AxiosRequestConfig): Promise<NewTvingResponse<AppLoginBody>> => {\n  const { userId, password, loginType, deviceId, deviceName, deviceModel } = requestParameter;\n  // 모든 파라미터가 없는 경우 에러 발생\n  if (!userId && !password && !loginType && !deviceId && deviceName) {\n    throw new Error('fetchAppLogin: requestParameter is invalid');\n  }\n\n  const requestBodyParams = JSON.stringify({\n    userId,\n    password,\n    loginType,\n    deviceId,\n    deviceName,\n    deviceModel,\n  });\n\n  const loginPath = loginType === TV_LOGIN_TYPE.TVING_ID ? 'tving' : 'cjone';\n\n  const filledRequestConfig = {\n    ...requestConfig,\n    data: requestBodyParams,\n  };\n  return httpPost<NewTvingResponse<AppLoginBody>>(`${GATEWAY_URL}${API_URLS.APP_LOGIN}${loginPath}`, filledRequestConfig)\n    .then((response) => {\n      return response;\n    })\n    .catch((e) => {\n      throw e;\n    });\n};\n\nexport default fetchAppLogin;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/autoLogin/fetchAutoLogin.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/autoLogin/fetchAutoLogin.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/bffBandApi/fetchBffApi.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/bffGenreImageApi/fetchBffGenreImageApi.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/bootPopup/fetchBootPopup.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/buffer/fetchBuffer.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/buffer/fetchBuffer.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/contentInfo/fetchContentInfo.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/contentInfo/fetchContentInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/deviceRegistInfo/fetchDeviceRegistInfo.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/deviceRegistInfo/fetchDeviceRegistInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/deviceRemove/fetchDeviceRemove.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/deviceRemove/fetchDeviceRemove.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/devices/fetchDevices.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/devices/fetchDevices.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/downgrade/fetchDowngradeCheck.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/episode/fetchEpisode.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/episode/fetchEpisode.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/episodes/fetchEpisodes.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/episodes/fetchEpisodes.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/exposure/fetchExposure.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/exposure/fetchExposure.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/fanAction/fetchFanAction.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/fanAction/fetchFanAction.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/fanContents/fetchFanContents.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/fanContents/fetchFanContents.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/faq/fetchFaq.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/faq/fetchFaq.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/faqs/fetchFaqs.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/faqs/fetchFaqs.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/findPassword/fetchFindPasswordById.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/frequencyProgram/fetchFrequencyProgram.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/frequencyProgram/fetchFrequencyProgram.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/highlight/fetchHighlight.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/highlight/fetchHighlight.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/home/fetchHome.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/increasePrice/fetchIncreasePriceAgreementsCheck.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kbo/fetchKboStreamPlaylist.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kidsCharacter/fetchKidsCharacter.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kidsCharacter/fetchKidsCharacter.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kidsCharacters/fetchKidsCharacters.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kidsCharacters/fetchKidsCharacters.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kidsCreator/fetchKidsCreator.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kidsCreator/fetchKidsCreator.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kidsCreators/fetchKidsCreators.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kidsCreators/fetchKidsCreators.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kidsMovies/fetchKidsMovies.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kidsMovies/fetchKidsMovies.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kidsPopular/fetchKidsPopular.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/kidsPopular/fetchKidsPopular.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/lastDelete/fetchLastDelete.ts",
    messages: [
      {
        ruleId: "import/order",
        severity: 2,
        message: "There should be no empty line within import group",
        line: 1,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 1,
        endColumn: 44,
        fix: {
          range: [44, 45],
          text: "",
        },
      },
      {
        ruleId: "import/no-unresolved",
        severity: 2,
        message: "Unable to resolve path to module 'src/utils/http/httpPost'.",
        line: 3,
        column: 22,
        nodeType: "Literal",
        endLine: 3,
        endColumn: 47,
      },
    ],
    suppressedMessages: [],
    errorCount: 2,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 1,
    fixableWarningCount: 0,
    source:
      "import { AxiosRequestConfig } from 'axios';\n\nimport httpPost from 'src/utils/http/httpPost';\n\nimport { API_URLS } from '../../constants/apiConstants';\nimport { API_SERVER_URL } from '../../utils/common/apiConfig';\n\ntype LastDeleteParameter = {\n  tvingToken: string;\n  accessToken: string;\n  mediaCode: string; // 삭제할 mediaCode\n};\n\n/**\n * 이어보기 삭제 API\n *\n * @param requestParameter: post 요청 body\n * @param requestConfig: axios 요청 설정\n */\n\nconst fetchLastDelete = <T>(requestParameter: LastDeleteParameter, requestConfig: AxiosRequestConfig = {}): Promise<T> => {\n  const { tvingToken, accessToken, mediaCode } = requestParameter;\n  const headers = { Authorization: `Bearer ${tvingToken}`, 'Access-Token': accessToken };\n  const data = {\n    mediaCode,\n  };\n\n  const filledRequestConfig = {\n    ...requestConfig,\n    headers,\n    data,\n  };\n\n  return httpPost<T>(`${API_SERVER_URL}${API_URLS.LASTS_DELETE}`, filledRequestConfig)\n    .then((response) => {\n      return response;\n    })\n    .catch((e) => {\n      throw e;\n    });\n};\n\nexport default fetchLastDelete;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/live/fetchLive.test.ts",
    messages: [
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 20,
        column: 5,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 20,
        endColumn: 16,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "log",
            },
            fix: {
              range: [612, 646],
              text: "",
            },
            desc: "Remove the console.log().",
          },
        ],
      },
    ],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import axiosInstance from '../../utils/http';\nimport fetchLives from '../lives/fetchLives';\n\nimport fetchLive from './fetchLive';\n\ndescribe('fetchLive', () => {\n  it('라이브 목록을 중 첫 번째 항목을 정상요청하는지 확인합니다.', async () => {\n    // TV엔 LIVE가 없는 관계로 PC screenCode 사용\n    axiosInstance.defaults.params.screenCode = 'CSSD0100';\n\n    const livesBody = await fetchLives();\n    expect(livesBody.result).toBeDefined();\n    const liveCode = livesBody.result[0].live_code;\n    const liveBody = await fetchLive({\n      // 테스트 계정(t_importamt, 270016261)\n      apiUserToken: 'R7i16W+fVdfixg5fPQc//g==',\n      liveCode,\n    });\n\n    console.log('liveBody', liveBody);\n\n    // TODO: 올바른 테스트 케이스 추가 필요\n    // expect(liveBody.content_type).toEqual('live');\n  });\n});\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/live/fetchLive.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/lives/fetchLives.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/lives/fetchLives.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/logout/fetchAppLogout.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/logout/fetchAppLogout.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/membershipPlans/fetchMembershipPlans.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/membershipPlans/updatePriceIncreaseAgreementStatus.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/mobilePurchase/fetchMobilePurchase.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/mobilePurchase/fetchMobilePurchase.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/moreBand/fetchMoreBand.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/moreBand/fetchMoreBand.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/moreCuration/fetchMoreCuration.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/moreCuration/fetchMoreCuration.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/moreGenre/fetchMoreGenre.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/moreGenre/fetchMoreGenre.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/moreSpecial/fetchMoreSpecial.test.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'TvGenreSubBoard' is defined but never used.",
        line: 3,
        column: 10,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 3,
        endColumn: 25,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { TV_BAND_TYPES } from '../../types/common';\nimport { TV_ITEMS } from '../../types/items';\nimport { TvGenreSubBoard, TvSpecialSubBoard } from '../../types/subBoards';\nimport { NewTvingResponse } from '../types';\n\nimport fetchMoreSpecial from './fetchMoreSpecial';\n\ndescribe('fetchMoreSpecial', () => {\n  it('moreSpecial api 정상요청하는지 확인합니다.', async () => {\n    const moreBody = await fetchMoreSpecial<NewTvingResponse<TvSpecialSubBoard<TV_ITEMS, TV_BAND_TYPES>>>({ poc: 'tv', key: 'SP10101' });\n    expect(moreBody.data).toBeDefined();\n    expect(moreBody.data.title).toBeDefined();\n    // expect(moreBody.items).toHaveLength(0);\n  });\n});\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/moreSpecial/fetchMoreSpecial.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/movie/fetchMovie.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/movie/fetchMovie.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/movies/fetchMovies.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/movies/fetchMovies.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/myLasts/fetchMyLasts.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/myLasts/fetchMyLasts.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/myLastsTv/fetchMyLastsTv.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/myLastsTv/fetchMyLastsTv.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/myValidTicketList/fetchMyValidTicketList.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/myValidTicketList/fetchMyValidTicketList.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/notice/fetchNotice.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/notice/fetchNotice.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/notices/fetchNotices.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/notices/fetchNotices.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/onboard/fetchOnboard.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/onboard/fetchOnboard.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/originals/fetchOriginals.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/originals/fetchOriginals.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/originalsBand/fetchOriginalsBand.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/originalsBand/fetchOriginalsBand.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/otpResultUser/fetchOtpResultUser.test.ts",
    messages: [
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 32,
        column: 7,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 32,
        endColumn: 18,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "log",
            },
            fix: {
              range: [1039, 1062],
              text: "",
            },
            desc: "Remove the console.log().",
          },
        ],
      },
    ],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { ACCOUNT_REQUEST_TYPE } from '../../constants/userConstants';\nimport fetchOtpUrlAndOtpNum from '../otpUrlAndOtpNum/fetchOtpUrlAndOtpNum';\n\nimport fetchOtpResultUser from './fetchOtpResultUser';\n\ndescribe('fetchOtpResultUser', () => {\n  const uuid = '1ef6cb55-5e2d-42c3-b968-f12afae67792';\n  const pocType = 'APP_X_TVING_0.0.0';\n  const deviceName = 'TV_WEB';\n  const deviceModel = 'TV_WEB';\n\n  let otpNum = '862110';\n  describe('otpResult 테스트', () => {\n    it('otp 번호를 요청한 뒤 로그인 결과를 요청합니다. 로그인이 되지 않은 상태이므로 action.success 값을 \"N\" 으로 반환합니다. ', async () => {\n      const otpNumResponse = await fetchOtpUrlAndOtpNum({\n        uuid,\n        reqType: ACCOUNT_REQUEST_TYPE.LOGIN,\n      });\n\n      otpNum = otpNumResponse.otpNum;\n      expect(otpNumResponse.result).toBe('Y');\n    });\n\n    it('otp 번호를 요청한 뒤 로그인 결과를 요청합니다. 로그인이 되지 않은 상태에서는 action 을 null로 반환합니다. ', async () => {\n      const resultUserBody = await fetchOtpResultUser({\n        uuid,\n        deviceName,\n        deviceModel,\n        otpNum,\n        pocType,\n      });\n      console.log('opt~~~~');\n      expect(resultUserBody).toBeNull();\n    });\n  });\n});\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/otpResultUser/fetchOtpResultUser.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/otpUrlAndOtpNum/fetchOtpUrlAndOtpNum.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/otpUrlAndOtpNum/fetchOtpUrlAndOtpNum.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/paramountEpisodes/fetchParamountEpisodes.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/paramountEpisodes/fetchParamountEpisodes.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/paramountMovies/fetchParamountMovies.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/paramountMovies/fetchParamountMovies.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/playerOfferProduct/fetchPlayerOfferProduct.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/playerOfferProduct/fetchPlayerOfferProduct.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/popups/fetchPopups.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/popups/fetchPopups.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profile/fetchProfile.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profile/fetchProfile.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileCreate/fetchProfileCreate.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileCreate/fetchProfileCreate.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileDelete/fetchProfileDelete.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileDelete/fetchProfileDelete.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileFindPwd/fetchProfileFindPwd.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileFindPwd/fetchProfileFindPwd.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileImageList/fetchProfileImageList.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileImageList/fetchProfileImageList.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileList/fetchProfileList.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileList/fetchProfileList.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileResetPassword/fetchProfileResetPassword.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileResetPassword/fetchProfileResetPassword.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileUpdate/fetchProfileUpdate.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/profileUpdate/fetchProfileUpdate.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/program/fetchProgram.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/program/fetchProgram.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/programRecommendVod/fetchProgramRecommendVod.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/programRecommendVod/fetchProgramRecommendVod.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/provisioning/fetchProvisioning.test.ts",
    messages: [
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 7,
        column: 7,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 7,
        endColumn: 18,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "log",
            },
            fix: {
              range: [279, 313],
              text: "",
            },
            desc: "Remove the console.log().",
          },
        ],
      },
    ],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import fetchProvisioning from './fetchProvisioning';\n\ndescribe('fetchProvisioning', () => {\n  describe('fetchProvisioning 테스트', () => {\n    it('fetchProvisioning 반환합니다. ', async () => {\n      const provisioningResponse = await fetchProvisioning({ poc: 'tv', region: '' });\n      console.log(provisioningResponse);\n      expect(provisioningResponse.provisioning).toBe('Y');\n    });\n  });\n});\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/provisioning/fetchProvisioning.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/purchasedCheck/fetchPurchasedCheck.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/purchasedCheck/fetchPurchasedCheck.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/purchasedEpisode/fetchPurchasedEpisode.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/purchasedEpisode/fetchPurchasedEpisode.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/purchasedMovie/fetchPurchasedMovie.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/purchasedMovie/fetchPurchasedMovie.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommend/fetchRecommend.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommend/fetchRecommend.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendCategory/fetchRecommendCategory.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendCategory/fetchRecommendCategory.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendGenre/fetchRecommendGenre.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendGenre/fetchRecommendGenre.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'PageParameter' is defined but never used.",
        line: 6,
        column: 10,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 6,
        endColumn: 23,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { AxiosRequestConfig } from 'axios';\n\nimport { API_URLS } from '../../constants/apiConstants';\nimport { API_SERVER_URL } from '../../utils/common/apiConfig';\nimport httpGet from '../../utils/http/httpGet';\nimport { PageParameter, RecommendGenreBody, TvingResponse } from '../types';\n\nexport interface RecommendGenreParameter {\n  // path parameter\n  genreCode: string;\n\n  // params\n  programCode: string;\n  pageSize?: number;\n}\n\nconst defaultParameter = {\n  pageSize: 20,\n};\n\n/**\n * 동일 장르 추천 콘텐츠 목록 정보를 요청합니다.\n *\n * @param requestParameter: 요청 파라미터\n * @param requestConfig: axios 요청 설정\n */\nconst fetchRecommendGenre = (requestParameter: RecommendGenreParameter, requestConfig?: AxiosRequestConfig): Promise<RecommendGenreBody> => {\n  const { programCode, genreCode } = requestParameter;\n\n  const params = {\n    ...defaultParameter,\n    programCode,\n  };\n\n  const filledRequestConfig = {\n    ...requestConfig,\n    params,\n  };\n\n  return httpGet<TvingResponse<RecommendGenreBody>>(\n    `${API_SERVER_URL}${API_URLS.RECOMMEND_GENRE.replace('{genreCode}', genreCode)}`,\n    filledRequestConfig,\n  )\n    .then((response) => {\n      return response.body;\n    })\n    .catch((e) => {\n      throw e;\n    });\n};\n\nexport default fetchRecommendGenre;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendMovieAssociate/fetchRecommendMovieAssociate.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendMovieAssociate/fetchRecommendMovieAssociate.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendMovieLike/fetchRecommendMovieLike.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendMovieLike/fetchRecommendMovieLike.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendMovieSimilar/fetchRecommendMovieSimilar.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendMovieSimilar/fetchRecommendMovieSimilar.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendProgramAssociate/fetchRecommendProgramAssociate.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendProgramAssociate/fetchRecommendProgramAssociate.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendProgramLike/fetchRecommendProgramLike.test.ts",
    messages: [
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 14,
        column: 5,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 14,
        endColumn: 16,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "log",
            },
            fix: {
              range: [462, 500],
              text: "",
            },
            desc: "Remove the console.log().",
          },
        ],
      },
    ],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import fetchRecommendProgramLike from './fetchRecommendProgramLike';\n\ndescribe('fetchRecommendProgramLike', () => {\n  const apiUserToken = 'R7i16W+fVdfixg5fPQc//g==';\n  const userNo = '270016261';\n  const params = JSON.stringify({ type: 'VOD' });\n\n  it('fetchRecommendProgramLike 정상 호출 테스트. 추천 리스트 내 첫번째 컨텐츠의 메타 정보 유효성을 체크합니다.', async () => {\n    const responseBody = await fetchRecommendProgramLike({\n      userNo,\n      apiUserToken,\n      params,\n    });\n    console.log('response', responseBody);\n    expect(responseBody.recommend3[0].meta).toBeDefined();\n  });\n});\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recommendProgramLike/fetchRecommendProgramLike.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recurpayInfo/fetchRecurpayInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recurprod/fetchRecurprod.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/recurprod/fetchRecurprodList.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/registerDevice/fetchRegisterDevice.test.ts",
    messages: [
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 16,
        column: 5,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 16,
        endColumn: 16,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "log",
            },
            fix: {
              range: [472, 519],
              text: "",
            },
            desc: "Remove the console.log().",
          },
        ],
      },
    ],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import fetchDevices from '../devices/fetchDevices';\nimport { RegisteredDevice } from '../types';\n\nimport fetchRegisterDevice from './fetchRegisterDevice';\n\ndescribe('fetchRegisterDevice', () => {\n  it('실제 기기등록을 확인합니다.', async () => {\n    // 테스트 목적으로 계속 등록된 기기에 아래 내용이 남아있을 것 입니다...\n    const registerResult = await fetchRegisterDevice({\n      name: 'testName',\n      model: 'testModel',\n      uuid: 'testUuid',\n      apiUserToken: 'R7i16W+fVdfixg5fPQc//g==',\n    });\n\n    console.log('register result', registerResult);\n\n    const devicesBody = await fetchDevices({\n      // 테스트 계정(t_importamt, 270016261)\n      apiUserToken: 'R7i16W+fVdfixg5fPQc//g==',\n    });\n\n    expect(\n      devicesBody.find((registeredDevice: RegisteredDevice) => {\n        return registeredDevice.name === 'testName';\n      }),\n    ).toBeDefined();\n  });\n});\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/registerDevice/fetchRegisterDevice.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/search/fetchSearch.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/search/fetchSearch.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/searchAutoResult/fetchSearchAutoResult.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/searchAutoResult/fetchSearchAutoResult.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/searchFeedback/fetchSearchFeedback.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/searchFeedback/fetchSearchFeedback.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "camelcase",
        severity: 2,
        message: "Identifier 'content_id' is not in camel case.",
        line: 24,
        column: 11,
        nodeType: "Identifier",
        messageId: "notCamelCase",
        endLine: 24,
        endColumn: 21,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "camelcase",
        severity: 2,
        message: "Identifier 'content_title' is not in camel case.",
        line: 24,
        column: 23,
        nodeType: "Identifier",
        messageId: "notCamelCase",
        endLine: 24,
        endColumn: 36,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "camelcase",
        severity: 2,
        message: "Identifier 'content_type' is not in camel case.",
        line: 24,
        column: 38,
        nodeType: "Identifier",
        messageId: "notCamelCase",
        endLine: 24,
        endColumn: 50,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "camelcase",
        severity: 2,
        message: "Identifier 'content_id' is not in camel case.",
        line: 28,
        column: 33,
        nodeType: "Identifier",
        messageId: "notCamelCase",
        endLine: 28,
        endColumn: 43,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "camelcase",
        severity: 2,
        message: "Identifier 'content_title' is not in camel case.",
        line: 28,
        column: 45,
        nodeType: "Identifier",
        messageId: "notCamelCase",
        endLine: 28,
        endColumn: 58,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "camelcase",
        severity: 2,
        message: "Identifier 'content_type' is not in camel case.",
        line: 28,
        column: 60,
        nodeType: "Identifier",
        messageId: "notCamelCase",
        endLine: 28,
        endColumn: 72,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/searchRank/fetchSearchRank.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/searchRank/fetchSearchRank.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/seasonMovie/fetchSeasonMovie.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/seasonMovie/fetchSeasonMovie.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/seasonProgram/fetchSeasonProgram.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/seasonProgram/fetchSeasonProgram.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/sendSmsAdultAuthUrl/fetchSendSmsAdultAuthUrl.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/sendSmsAdultAuthUrl/fetchSendSmsAdultAuthUrl.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/sendSmsJoinTvingCjoneUrl/fetchSendSmsJoinTvingCjoneUrl.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/sendSmsJoinTvingCjoneUrl/fetchSendSmsJoinTvingCjoneUrl.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/sendSmsUserAuthUrl/fetchSendSmsUserAuthUrl.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/sendSmsUserAuthUrl/fetchSendSmsUserAuthUrl.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/streamInfo/fetchStreamInfo.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/streamInfo/fetchStreamInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/subtitle/fetchSubtitleProfile.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/subtitle/fetchSubtitleProfile.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "camelcase",
        severity: 2,
        message: "Identifier 'audio_code' is not in camel case.",
        line: 24,
        column: 37,
        nodeType: "Identifier",
        messageId: "notCamelCase",
        endLine: 24,
        endColumn: 47,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "camelcase",
        severity: 2,
        message: "Identifier 'audio_code' is not in camel case.",
        line: 27,
        column: 24,
        nodeType: "Identifier",
        messageId: "notCamelCase",
        endLine: 27,
        endColumn: 34,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/templateInfo/fetchTemplateInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/termsAgreement/fetchGetTermsAreement.ts",
    messages: [
      {
        ruleId: "import/order",
        severity: 2,
        message:
          "`../../utils/http/httpGet` import should occur before import of `../types`",
        line: 6,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 6,
        endColumn: 48,
        fix: {
          range: [162, 275],
          text: "import httpGet from '../../utils/http/httpGet';\nimport { NewTvingResponse, TermsAgreementData } from '../types';\n",
        },
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 1,
    fixableWarningCount: 0,
    source:
      "import { AxiosRequestConfig } from 'axios';\n\nimport { API_URLS } from '../../constants/apiConstants';\nimport { GATEWAY_URL } from '../../utils/common/apiConfig';\nimport { NewTvingResponse, TermsAgreementData } from '../types';\nimport httpGet from '../../utils/http/httpGet';\n\n// 약관 조회용\nconst fetchGetTermsAgreement = (requestConfig: AxiosRequestConfig = {}) => {\n  return httpGet<NewTvingResponse<TermsAgreementData>>(`${GATEWAY_URL}${API_URLS.TERMS_AGREEMENT}`, requestConfig)\n    .then((response) => {\n      return response;\n    })\n    .catch((e) => {\n      throw e;\n    });\n};\nexport default fetchGetTermsAgreement;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/termsAgreement/fetchTermsAreement.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'NewTvingResponse' is defined but never used.",
        line: 5,
        column: 10,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 5,
        endColumn: 26,
      },
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'TermsAgreementData' is defined but never used.",
        line: 5,
        column: 28,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 5,
        endColumn: 46,
      },
      {
        ruleId: "import/order",
        severity: 2,
        message:
          "`../../utils/http/httpPost` import should occur before import of `../types`",
        line: 6,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 6,
        endColumn: 50,
        fix: {
          range: [162, 277],
          text: "import httpPost from '../../utils/http/httpPost';\nimport { NewTvingResponse, TermsAgreementData } from '../types';\n",
        },
      },
    ],
    suppressedMessages: [],
    errorCount: 3,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 1,
    fixableWarningCount: 0,
    source:
      "import { AxiosRequestConfig } from 'axios';\n\nimport { API_URLS } from '../../constants/apiConstants';\nimport { GATEWAY_URL } from '../../utils/common/apiConfig';\nimport { NewTvingResponse, TermsAgreementData } from '../types';\nimport httpPost from '../../utils/http/httpPost';\n\nexport interface TermsAgreementParameter {\n  agreementList: {\n    type: string;\n    agreementYn: string;\n  }[];\n}\n\n/**\n * 약관 동의 하는 fetching 함수\n * @param requestParameter\n * @param requestConfig\n */\nconst fetchTermsAgreement = (requestParameter: TermsAgreementParameter, requestConfig: AxiosRequestConfig = {}) => {\n  const { agreementList } = requestParameter;\n\n  const data = {\n    agreementList,\n  };\n  const filledRequestConfig = {\n    ...requestConfig,\n    data,\n  };\n\n  return httpPost(`${GATEWAY_URL}${API_URLS.TERMS_AGREEMENT}`, filledRequestConfig)\n    .then((response) => {\n      return response;\n    })\n    .catch((e) => {\n      throw e;\n    });\n};\nexport default fetchTermsAgreement;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/ttv/fetchTtv.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/ttv/fetchTtv.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/ttvBuffer/fetchTtvBuffer.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/types.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/userInfo/fetchUserInfo.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/userInfo/fetchUserInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/version/fetchVersion.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/apis/vtt/fetchVtt.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/components/SwitchCase.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/apiConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/bandConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/billingConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/boardConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/commonConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/dateConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/detailConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/errorConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/focusKeyConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/gatewayConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/gnbConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/itemConstant.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/kboCodeConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/playerConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/profileConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/queryConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/queryKeys/membership.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/queryKeys/queryKeyConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/settingConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/subBoardConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/constants/userConstants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/declaration.d.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/apis/useFetchQuery.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/apis/useInfiniteFetchQuery.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/apis/useParameterFetchQuery.ts",
    messages: [
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 31,
        column: 98,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 31,
        endColumn: 111,
      },
    ],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { AxiosRequestConfig } from 'axios';\n\nimport { RequestError } from '../../utils/http';\n\n/**\n * 파라미터를 강제한 useFetchQuery 함수입니다.\n *\n * @param queryKey\n * @param fetchFunction\n * @param requestParameter\n * @param queryOptions\n * @param requestConfig\n * @see useFetchQuery\n * @param queryOptions: react-query 옵션\n */\nconst useParameterFetchQuery = <T, P>(\n  queryKey: QueryKey,\n  fetchFunction: (requestParameter: P, requestConfig?: AxiosRequestConfig) => Promise<T>,\n  requestParameter: P,\n  queryOptions?: UseQueryOptions<T, RequestError>,\n  requestConfig?: AxiosRequestConfig,\n) => {\n  return useQuery(\n    queryKey,\n    ({ signal }) =>\n      fetchFunction(requestParameter, {\n        ...requestConfig,\n        signal,\n      }),\n    { staleTime: 1000 * 60 * 60, cacheTime: 1000 * 60 * 60, ...queryOptions, onError: (error) => console.error(`error: ${error.message}`) },\n  );\n};\n\nexport default useParameterFetchQuery;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useCount/index.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useCount/useCount.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useDeviceOrientation.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'React' is defined but never used.",
        line: 1,
        column: 8,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 1,
        endColumn: 13,
      },
      {
        ruleId: "react-hooks/exhaustive-deps",
        severity: 1,
        message:
          "React Hook useEffect has a missing dependency: 'handleOrientationChange'. Either include it or remove the dependency array.",
        line: 34,
        column: 6,
        nodeType: "ArrayExpression",
        endLine: 34,
        endColumn: 8,
        suggestions: [
          {
            desc: "Update the dependencies array to be: [handleOrientationChange]",
            fix: {
              range: [811, 813],
              text: "[handleOrientationChange]",
            },
          },
        ],
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React, { useEffect, useState } from 'react';\n\nconst isMobile = () => {\n  return navigator.userAgent.match(/ipad|iphone|Android|Mobi/i);\n};\n\nconst useDeviceOrientation = () => {\n  const [orientation, setOrientation] = useState('portrait');\n\n  const getOrientation = () => {\n    const angle = window.orientation;\n    return angle === 90 || angle === -90 ? 'landscape' : 'portrait';\n  };\n\n  const handleOrientationChange = () => {\n    setOrientation(getOrientation());\n  };\n\n  useEffect(() => {\n    // 모바일 장치에서만 실행\n    if (!isMobile()) {\n      return;\n    }\n\n    window.addEventListener('orientationchange', handleOrientationChange);\n\n    // 초기 값 설정\n    handleOrientationChange();\n\n    // 클린업 함수\n    return () => {\n      window.removeEventListener('orientationchange', handleOrientationChange);\n    };\n  }, []);\n\n  const isPortrait = orientation === 'portrait';\n  const isLandscape = orientation === 'landscape';\n\n  return { orientation, isPortrait, isLandscape };\n};\n\nexport default useDeviceOrientation;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useDidUpdate.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "react-hooks/exhaustive-deps",
        severity: 1,
        message:
          "React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.",
        line: 15,
        column: 6,
        nodeType: "Identifier",
        endLine: 15,
        endColumn: 10,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "react-hooks/exhaustive-deps",
        severity: 1,
        message:
          "React Hook useEffect has missing dependencies: 'effectCb' and 'isMounted'. Either include them or remove the dependency array. If 'effectCb' changes too often, find the parent component that defines it and wrap that definition in useCallback.",
        line: 15,
        column: 6,
        nodeType: "Identifier",
        endLine: 15,
        endColumn: 10,
        suggestions: [
          {
            desc: "Update the dependencies array to be: [effectCb, isMounted]",
            fix: {
              range: [360, 364],
              text: "[effectCb, isMounted]",
            },
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useExecuted/useExecuted.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'useRef' is defined but never used.",
        line: 1,
        column: 21,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 1,
        endColumn: 27,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { useEffect, useRef, useState } from 'react';\n\nconst useExecuted = () => {\n  const [isExecuted, setIsExecuted] = useState(false);\n  useEffect(() => {\n    setIsExecuted(true);\n  }, []);\n  return isExecuted;\n};\n\nexport default useExecuted;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useFixedModalBackground.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useFreshCallback.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useIsMounted.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useIsomorphicLayoutEffect.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useLocalStorage.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useMergeRefs.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'ref'.",
        line: 15,
        column: 5,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 15,
        endColumn: 8,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "react-hooks/exhaustive-deps",
        severity: 1,
        message:
          "React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.",
        line: 31,
        column: 44,
        nodeType: "Identifier",
        endLine: 31,
        endColumn: 48,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "react-hooks/exhaustive-deps",
        severity: 1,
        message:
          "React Hook useMemo has a missing dependency: 'refs'. Either include it or remove the dependency array.",
        line: 31,
        column: 44,
        nodeType: "Identifier",
        endLine: 31,
        endColumn: 48,
        suggestions: [
          {
            desc: "Update the dependencies array to be: [refs]",
            fix: {
              range: [802, 806],
              text: "[refs]",
            },
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useMount.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "react-hooks/exhaustive-deps",
        severity: 1,
        message:
          "React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array.",
        line: 5,
        column: 3,
        nodeType: "Identifier",
        endLine: 5,
        endColumn: 12,
        suggestions: [
          {
            desc: "Update the dependencies array to be: [callback]",
            fix: {
              range: [230, 234],
              text: "[callback]",
            },
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useSessionStorage.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useStateRef.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useToggle.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/common/useViewportOrientation.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/mutations/config/useDisablePopupPerBrowser.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'React' is defined but never used.",
        line: 1,
        column: 8,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 1,
        endColumn: 13,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React from 'react';\n\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport dayjs from 'dayjs';\nimport { DurationUnitsObjectType } from 'dayjs/plugin/duration';\n\nimport { DAYS_IN_A_WEEK } from '../../../constants/dateConstants';\n\ninterface Options {\n  expiration?: DurationUnitsObjectType;\n  puid?: number | string | symbol;\n}\n\ninterface Params {\n  key: string;\n  options: Options;\n}\n\ninterface LocalStorageData {\n  expirationTime: dayjs.Dayjs;\n}\n\nconst LOCALSTORAGE_KEY_PREFIX = '_TVING_POPUP_KEY';\n\n// localStorage key를 만드는 함수\nconst makeLocalStorageKey = (key, puid) => [LOCALSTORAGE_KEY_PREFIX, key, puid].filter((key) => key).join('_');\n\n// localStorage에 팝업에 대한 설정 값을 저장하는 함수\nconst saveToLocalStorage = ({ key, options: { expiration, puid } }: Params) => {\n  return new Promise((resolve, reject) => {\n    if (!expiration) {\n      reject(new Error('잘못된 날짜 형식입니다.'));\n      return;\n    }\n\n    const data = {\n      expirationTime: dayjs().add(dayjs.duration(expiration)),\n    };\n\n    const localStorageKey = makeLocalStorageKey(key, puid);\n\n    localStorage.setItem(localStorageKey, JSON.stringify(data));\n    resolve('success');\n  });\n};\n\n// localStorage에서 팝업에 대한 설정 값을 불러오는 함수\nconst loadFromLocalStorage = ({ key, options: { puid } }: Params) => {\n  const localStorageKey = makeLocalStorageKey(key, puid);\n\n  const value = localStorage.getItem(localStorageKey);\n  return value ? JSON.parse(value) : null;\n};\n\nconst useDisablePopupPerBrowser = (key: string, { puid, expiration = { days: DAYS_IN_A_WEEK } }: Options = {}) => {\n  const options = {\n    expiration,\n    puid,\n  };\n\n  const { data, isLoading } = useQuery<LocalStorageData>(['popup', 'config', key, puid], () => loadFromLocalStorage({ key, options }), {\n    cacheTime: 0,\n    staleTime: 0,\n  });\n  const { mutateAsync } = useMutation(() => saveToLocalStorage({ key, options }), {});\n\n  let isShow = data?.expirationTime ? dayjs().isAfter(data?.expirationTime) : true;\n  if (key === '') {\n    isShow = false;\n  }\n\n  return { data, isShow, isLoading, mutateAsync };\n};\n\nexport default useDisablePopupPerBrowser;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/mutations/user/usePriceIncreaseAgreementStatusUpdater.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'React' is defined but never used.",
        line: 1,
        column: 8,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 1,
        endColumn: 13,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React from 'react';\n\nimport { MutationOptions, useMutation } from '@tanstack/react-query';\nimport { AxiosError } from 'axios';\n\nimport updatePriceIncreaseAgreementStatus, {\n  PriceIncreaseAgreementStatusParameter,\n} from '../../../apis/membershipPlans/updatePriceIncreaseAgreementStatus';\n\ninterface Response {\n  code: string;\n  message: string;\n  data: {\n    agreeDate: string;\n    priceUpPayDate: string;\n    agreeRound: number;\n  };\n}\n\nconst usePriceIncreaseAgreementStatusUpdater = (options: MutationOptions<Response, AxiosError, PriceIncreaseAgreementStatusParameter> = {}) => {\n  return useMutation<Response, AxiosError, PriceIncreaseAgreementStatusParameter>(\n    (params) =>\n      updatePriceIncreaseAgreementStatus({\n        ...params,\n      }),\n    { ...options },\n  );\n};\n\nexport default usePriceIncreaseAgreementStatusUpdater;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/queries/useAgreementsInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/queries/useBootPopup.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/queries/useIncreasePriceAgreementsCheck.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'React' is defined but never used.",
        line: 1,
        column: 8,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 1,
        endColumn: 13,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React from 'react';\n\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { AxiosError } from 'axios';\n\nimport fetchIncreasePriceAgreementsCheck from '../../apis/increasePrice/fetchIncreasePriceAgreementsCheck';\nimport { IncreasePriceAgreementsCheckResponse } from '../../apis/types';\nimport QUERY_KEY from '../../constants/queryKeys/queryKeyConstants';\n\nconst useIncreasePriceAgreementsCheck = (options: UseQueryOptions<IncreasePriceAgreementsCheckResponse, AxiosError> = {}) => {\n  return useQuery<IncreasePriceAgreementsCheckResponse, AxiosError>(\n    QUERY_KEY.INCREASE_PRICE.AGREEMENTS_CHECK.all,\n    fetchIncreasePriceAgreementsCheck,\n    {\n      ...options,\n    },\n  );\n};\n\nexport default useIncreasePriceAgreementsCheck;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/queries/useMembershipPlans.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'React' is defined but never used.",
        line: 1,
        column: 8,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 1,
        endColumn: 13,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React from 'react';\n\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport fetchMembershipPlans, { Poc } from '@tving/utils/src/apis/membershipPlans/fetchMembershipPlans';\nimport { MembershipPlansResponse } from '@tving/utils/src/apis/types';\nimport { membershipKeys } from '@tving/utils/src/constants/queryKeys/membership';\n\nconst useMembershipPlans = (poc: Poc, options: UseQueryOptions<MembershipPlansResponse> = {}) => {\n  return useQuery<MembershipPlansResponse>(membershipKeys.list(), () => fetchMembershipPlans({ poc }), {\n    ...options,\n  });\n};\n\nexport default useMembershipPlans;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/queries/useRecurpayAgreementsInfo.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'React' is defined but never used.",
        line: 1,
        column: 8,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 1,
        endColumn: 13,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React from 'react';\n\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { AxiosError } from 'axios';\n\nimport fetchAgreementsInfo from '../../apis/agreementsInfo/fetchAreementsInfo';\nimport fetchRecurpayInfo from '../../apis/recurpayInfo/fetchRecurpayInfo';\nimport QUERY_KEY from '../../constants/queryKeys/queryKeyConstants';\nimport proxyRecurpayAgreements from '../../proxies/recurpayAgreementsInfo/proxyRecurpayAgreements';\nimport { RecurpayAgreementsInfo } from '../../proxies/types';\n\nconst useRecurpayAgreementsInfo = (options: UseQueryOptions<RecurpayAgreementsInfo, AxiosError> = {}) => {\n  return useQuery<RecurpayAgreementsInfo, AxiosError>(\n    QUERY_KEY.INCREASE_PRICE.RECURPAY_AGREEMENTS_INFO.all,\n    async () => {\n      const recurpayInfo = await fetchRecurpayInfo();\n      const agreementsInfo = await fetchAgreementsInfo();\n      return proxyRecurpayAgreements(recurpayInfo, agreementsInfo);\n    },\n    { ...options },\n  );\n};\nexport default useRecurpayAgreementsInfo;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/queries/useRecurpayInfo.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'React' is defined but never used.",
        line: 1,
        column: 8,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 1,
        endColumn: 13,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React from 'react';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { AxiosError } from 'axios';\n\nimport fetchRecurpayInfo from '../../apis/recurpayInfo/fetchRecurpayInfo';\nimport { NewTvingResponse, RecurpayInfoData } from '../../apis/types';\nimport QUERY_KEY from '../../constants/queryKeys/queryKeyConstants';\n\nconst useRecurpayInfo = () => {\n  return useQuery<NewTvingResponse<RecurpayInfoData>, AxiosError>(QUERY_KEY.INCREASE_PRICE.RECURPAY_AGREEMENTS_INFO.recurpay(), fetchRecurpayInfo);\n};\nexport default useRecurpayInfo;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/queries/useTemplateInfo.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'React' is defined but never used.",
        line: 1,
        column: 8,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 1,
        endColumn: 13,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React from 'react';\n\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { AxiosError } from 'axios';\n\nimport fetchTemplateInfo from '../../apis/templateInfo/fetchTemplateInfo';\nimport { TemplateInfoResponse } from '../../apis/types';\nimport QUERY_KEY from '../../constants/queryKeys/queryKeyConstants';\n\nconst useTemplateInfo = (options: UseQueryOptions<TemplateInfoResponse, AxiosError> = {}) => {\n  return useQuery<TemplateInfoResponse, AxiosError>(QUERY_KEY.INCREASE_PRICE.TEMPLATE_INFO.all, fetchTemplateInfo, { ...options });\n};\nexport default useTemplateInfo;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/hooks/queries/useTermsAgreement.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'NewTvingResponse' is defined but never used.",
        line: 4,
        column: 10,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 4,
        endColumn: 26,
      },
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'TermsAgreementData' is defined but never used.",
        line: 4,
        column: 28,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 4,
        endColumn: 46,
      },
      {
        ruleId: "import/order",
        severity: 2,
        message:
          "`../../apis/termsAgreement/fetchGetTermsAreement` import should occur before import of `../../apis/types`",
        line: 6,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 6,
        endColumn: 86,
        fix: {
          range: [87, 315],
          text: "import fetchGetTermsAgreement from '../../apis/termsAgreement/fetchGetTermsAreement';\nimport { NewTvingResponse, TermsAgreementData } from '../../apis/types';\nimport QUERY_KEY from '../../constants/queryKeys/queryKeyConstants';\n",
        },
      },
    ],
    suppressedMessages: [],
    errorCount: 3,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 1,
    fixableWarningCount: 0,
    source:
      "import { useQuery } from '@tanstack/react-query';\nimport { AxiosError } from 'axios';\n\nimport { NewTvingResponse, TermsAgreementData } from '../../apis/types';\nimport QUERY_KEY from '../../constants/queryKeys/queryKeyConstants';\nimport fetchGetTermsAgreement from '../../apis/termsAgreement/fetchGetTermsAreement';\n\nconst generateTermsAgreement = async (): Promise<{ isAgreeTerms: boolean }> => {\n  const response = await fetchGetTermsAgreement();\n  const { data } = response;\n\n  const terms = data?.terms;\n\n  const optCollectInfoYn = terms?.optCollectInfoYn;\n  const receiveMarketingAgreeYn = terms?.receiveMarketingAgreeYn;\n  const receivePushYn = terms?.receivePushYn;\n  const receiveSmsYn = terms?.receiveSmsYn;\n  const receiveEmailYn = terms?.receiveEmailYn;\n\n  return {\n    isAgreeTerms:\n      optCollectInfoYn === 'Y' && receiveMarketingAgreeYn === 'Y' && receivePushYn === 'Y' && receiveSmsYn === 'Y' && receiveEmailYn === 'Y',\n  };\n};\nconst useTermsAgreement = () => {\n  return useQuery<{ isAgreeTerms: boolean }, AxiosError>(QUERY_KEY.TERMS_AGREEMENT.all, () => generateTermsAgreement());\n};\nexport default useTermsAgreement;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/index.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/appLogin/proxyAppLogin.test.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'USER_TYPE' is defined but never used.",
        line: 2,
        column: 10,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 2,
        endColumn: 19,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { AppLoginBody, NewTvingResponse } from '../../apis/types';\nimport { USER_TYPE } from '../../constants/userConstants';\n\nimport proxyAppLogin from './proxyAppLogin';\n\ndescribe('proxyAppLogin', () => {\n  const sampleAppLoginBody: NewTvingResponse<AppLoginBody> = {\n    code: '0000',\n    message: 'Success',\n    data: {\n      accessToken: 'de09a85e84a38f0430b97bdb6a17d2774d0a61fc2bf6a1c4ba8301751d89b80861e25129fc504ec8b87c3d1c66be25a8',\n      authToken: 'zlmnAXdUh1K6Ms1W/FzMByz8tHUPT3499zq5DXfMWK0=',\n      birthday: '19821229',\n      cjOneMembershipYn: 'N',\n      cjOneUserNo: null,\n      custId: 'test04',\n      custName: '나정민',\n      custNo: 260014071,\n      custType: '90',\n      email: 'test@gmail.com',\n      ga360Token: '8723fc2128b3b2e53b117c0a90da6d1dc64090ff86e602e6836880558c83f06e51c5e4228af5497970f54112049ad49ae2530c8dea1cef95f02a16ef9fe0a252',\n      lastPasswordUpdateDate: '20211103111658',\n      packageYn: 'Y',\n      profileTicketMaxCount: 4,\n      profiles: [\n        {\n          adultCertifyDate: '20211103111753',\n          custNo: '260014071',\n          deleteYn: 'N',\n          profileImagePath: 'http://imagedev.tving.com/upload/profile/default.png',\n          profileName: 'test04',\n          profileNo: '260014071',\n          profilePwdYn: 'N',\n          profileToken: 'g2aabtiSg3s5etflqTORXg==',\n          profileType: 'M',\n        },\n      ],\n      realNameConfirmYn: 'Y',\n      refreshToken: 'ae3f1a72c6a3da7032890a9fe942587170187e400bfe149b5b9b7183747f8b7b02b7296779b446169f36609466374953',\n      regionCode: null,\n      registerDate: '20211103',\n      sex: null,\n      specialStatus: 'N',\n      tvingToken: 'g2aabtiSg3s5etflqTORXg==',\n    },\n    detailMessage: '정상일때는 안내려옴',\n  };\n\n  it('사용자 정보 변환 정상 여부를 확인합니다.', () => {\n    const appLoginProxyResult = proxyAppLogin(sampleAppLoginBody);\n    expect(appLoginProxyResult?.code).toEqual('0000');\n    expect(appLoginProxyResult).toEqual({\n      accessToken: 'de09a85e84a38f0430b97bdb6a17d2774d0a61fc2bf6a1c4ba8301751d89b80861e25129fc504ec8b87c3d1c66be25a8',\n      refreshToken: 'ae3f1a72c6a3da7032890a9fe942587170187e400bfe149b5b9b7183747f8b7b02b7296779b446169f36609466374953',\n      authToken: 'zlmnAXdUh1K6Ms1W/FzMByz8tHUPT3499zq5DXfMWK0=',\n      code: '0000',\n      userNo: '260014071',\n      userId: 'test04',\n      isSns: false,\n      emailAddress: 'test',\n      emailVendor: 'gmail.com',\n      lastPasswordUpdateDate: '20211103111658',\n      isRealNameConfirmed: true,\n      userToken: 'g2aabtiSg3s5etflqTORXg==',\n      userType: 'TVING',\n      message: 'Success',\n    });\n  });\n});\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/appLogin/proxyAppLogin.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "@typescript-eslint/ban-ts-comment",
        severity: 2,
        message:
          'Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.',
        line: 38,
        column: 3,
        nodeType: "Line",
        messageId: "tsIgnoreInsteadOfExpectError",
        endLine: 38,
        endColumn: 16,
        suggestions: [
          {
            messageId: "replaceTsIgnoreWithTsExpectError",
            fix: {
              range: [1101, 1114],
              text: "// @ts-expect-error",
            },
            desc: 'Replace "@ts-ignore" with "@ts-expect-error".',
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/autoLogin/proxyAutoLogin.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/autoLogin/proxyAutoLogin.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/buffer/proxyBuffer.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/buffer/proxyBuffer.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/contentInfo/proxyContentInfo.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/contentInfo/proxyContentInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/deviceRegistInfo/proxyDeviceRegistInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/devices/proxyDevices.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/devices/proxyDevices.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/episode/proxyEpisode.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/episode/proxyEpisode.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/episodes/proxyEpisodes.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/episodes/proxyEpisodes.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/episodes/proxyEpisodesNear.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/exposure/proxyExposure.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/exposure/proxyExposure.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/fanContents/proxyFanContents.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/fanContents/proxyFanContents.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/faq/proxyFaq.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/faqs/proxyFaqs.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/frequencyProgram/proxyFrequencyProgram.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/frequencyProgram/proxyFrequencyProgram.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/highlight/proxyHighlight.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/highlight/proxyHighlight.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kboClip/proxyKboClipResultBand.ts",
    messages: [
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 8,
        column: 3,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 8,
        endColumn: 14,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "log",
            },
            fix: {
              range: [363, 399],
              text: "",
            },
            desc: "Remove the console.log().",
          },
        ],
      },
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 9,
        column: 3,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 9,
        endColumn: 14,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "log",
            },
            fix: {
              range: [402, 438],
              text: "",
            },
            desc: "Remove the console.log().",
          },
        ],
      },
    ],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { BAND_ITEM_SIZE, BAND_TYPE } from '../../constants/bandConstants';\nimport { ITEM_TYPE } from '../../constants/itemConstant';\nimport { TvBand, TvingBand, TvItem } from '../types';\n\nconst proxyKboClipResultItem = (clipItem: TvItem, bandType: BAND_TYPE, index: number) => {\n  const { width, height, posterWidth, posterHeight } = BAND_ITEM_SIZE[bandType];\n\n  console.log('bandType :', bandType);\n  console.log('bandType :', bandType);\n\n  return {\n    itemType: ITEM_TYPE.PLAYER_DETAIL_LIST,\n    bandType,\n    index,\n    itemId: clipItem.code,\n    vodCode: clipItem.code,\n    textTitle: clipItem.title,\n    metaTexts: [clipItem.title],\n    posterUrl: clipItem.imageUrl || '',\n    width,\n    height,\n    posterWidth,\n    posterHeight,\n    isFree: true,\n    isAdult: false,\n  };\n};\n\nconst proxyKboClipResultBand = (tvBand: TvBand, streamPlaylistBand: TvBand): TvingBand => {\n  const items = streamPlaylistBand.items || [];\n\n  return {\n    ...tvBand,\n    tvingItems: items.map((item, index) => proxyKboClipResultItem(item, tvBand.bandType, index)),\n    hasMore: false,\n    bandUrl: '',\n    bandParameter: {},\n  };\n};\n\nexport default proxyKboClipResultBand;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kidsCharacter/proxyKidsCharacter.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kidsCharacter/proxyKidsCharacter.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kidsCharacters/proxyKidsCharacters.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kidsCharacters/proxyKidsCharacters.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kidsCreator/proxyKidsCreator.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kidsCreator/proxyKidsCreator.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kidsCreators/proxyKidsCreators.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kidsCreators/proxyKidsCreators.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kidsMovies/proxyKidsMovies.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kidsMovies/proxyKidsMovies.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kidsPopular/proxyKidsPopular.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/kidsPopular/proxyKidsPopular.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/movie/proxyMovie.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/movie/proxyMovie.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/movies/proxyMovies.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/movies/proxyMovies.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/myLastsTv/proxyMyLastsTv.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/myLastsTv/proxyMyLastsTv.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/myValidTicketList/proxyMyValidTicketList.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/myValidTicketList/proxyMyValidTicketList.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/notice/proxyNotice.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/notices/proxyNotices.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/onboard/proxyOnboard.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/onboard/proxyOnboard.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/originals/proxyOriginals.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/originals/proxyOriginals.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/originalsBand/proxyOriginalsBand.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/originalsBand/proxyOriginalsBand.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/otpResultUser/proxyOtpResultUser.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/otpResultUser/proxyOtpResultUser.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/otpUrlAndOtpNum/proxyOtpUrlAndOtpNum.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/otpUrlAndOtpNum/proxyOtpUrlAndOtpNum.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/playerOfferProduct/proxyPlayerOfferProduct.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/playerOfferProduct/proxyPlayerOfferProduct.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/profile/proxyProfile.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/profile/proxyProfile.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/profileImageList/proxyProfileImageList.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/profileImageList/proxyProfileImageList.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/profileList/proxyProfileList.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/profileList/proxyProfileList.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/program/proxyProgram.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/program/proxyProgram.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/provisioning/proxyProvisioning.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/purchasedEpisode/proxyPurchasedEpisode.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/purchasedEpisode/proxyPurchasedEpisode.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/purchasedMovie/proxyPurchasedMovie.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/purchasedMovie/proxyPurchasedMovie.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommend/proxyRecommend.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommend/proxyRecommend.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendCategoryGenre/proxyRecommendCategoryGenre.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendCategoryGenre/proxyRecommendCategoryGenre.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendMovieAssociate/proxyRecommendMovieAssociate.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendMovieAssociate/proxyRecommendMovieAssociate.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendMovieLike/proxyRecommendMovieLike.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendMovieLike/proxyRecommendMovieLike.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendMovieSimilar/proxyRecommendMovieSimilar.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendMovieSimilar/proxyRecommendMovieSimilar.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendProgramAssociate/proxyRecommendProgramAssociate.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendProgramAssociate/proxyRecommendProgramAssociate.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendProgramLike/proxyRecommendProgramLike.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendVod/proxyRecommendVod.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recommendVod/proxyRecommendVod.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recurpayAgreementsInfo/proxyRecurpayAgreements.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recurprodList/proxyRecurprodList.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/recurprodList/proxyRecurprodList.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/search/proxySearch.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/search/proxySearch.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/searchAutoResult/proxySearchAutoResult.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/searchAutoResult/proxySearchAutoResultBand.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/searchRank/proxySearchRank.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/searchRank/proxySearchRank.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/seasonMovie/proxySeasonMovie.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/seasonMovie/proxySeasonMovie.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/seasonProgram/proxySeasonProgram.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/seasonProgram/proxySeasonProgram.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/streamInfo/proxyStreamInfo.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/streamInfo/proxyStreamInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/ttv/proxyTtv.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/ttv/proxyTtv.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'testJsonRes' is assigned a value but never used.",
        line: 9,
        column: 9,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 9,
        endColumn: 20,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { TtvStatusJsonResponse } from '../../apis/types';\nimport { TvingTtv } from '../types';\n\n/**\n * TTV 응답 결과를 tv에 맞게 변환합니다.\n * @param ttvStatusJsonResponse\n */\nconst proxyTtv = (ttvStatusJsonResponse: TtvStatusJsonResponse): TvingTtv => {\n  const testJsonRes = {\n    upd_id: 'yool',\n    noti_msg: '점검 일시 : 2022년 8월 24일(수) 03:00~03:10 [10분간]',\n    upd_date: '20220824031111',\n    ttv_url: 'http://image.tving.com/ttvapp/index.html?from=app&ver=14',\n    login_check: 'off',\n    ttv_mode: 'on',\n    emergency: {\n      smarttv_check_date: '',\n      smarttv_title: '티빙 긴급점검 안내',\n      noti_msg:\n        '이용에 불편을 드려 대단히 죄송합니다.\\n이용자 급증으로 인하여 잠시 서비스 긴급 점검 중입니다.\\n점검 완료 시까지 실시간 LIVE 채널은 정상 시청 가능합니다.\\n콘서트, 스포츠 등 특별 생중계와 방송/영화 VOD는 잠시 시청이 어려우신 점 양해 부탁드립니다.\\n빠른 시간 내 점검을 완료하여 원활한 서비스를 제공할 수 있도록 노력하겠습니다.',\n      check_date: '',\n      title: '티빙 긴급점검 안내',\n      smarttv_noti_msg:\n        '이용자가 급증하여 접속 연결이 지연되고 있어\\n서비스를 잠시 점검 모드로 전환하고 확인 중입니다.\\n\\n서비스 이용에 불편을 드리는 점 양해 부탁드리며\\n빠른 시간 내 이용하실 수 있도록 점검 완료하겠습니다.\\n\\n기다리시는 동안 TVING 모바일 앱 또는 PC(www.tving.com)에서\\n로그인 없이 LIVE 채널을 시청해 주세요.',\n    },\n    check_type: 'emergency',\n    regular: {\n      smarttv_check_date:\n        '* 점검 일시 : 2022.8.24(수) 03:00~03:10 [10분간]\\n* 점검 대상 : PC, App, SmartTV 등 전체 디바이스\\n* 점검 내용 : 티빙 서비스 점검\\n* 점검 영향 : 티빙 서비스 일시 중단',\n      smarttv_title: '서비스 점검 안내',\n      noti_msg: '원활한 서비스 제공을 위해 정기점검을 진행중입니다.\\n기다리시는 동안 LIVE채널 시청 가능하오니 참고해주십시오.',\n      check_date: '점검 일시 : 2022년 8월 24일(수) 03:00~03:10 [10분간]',\n      title: '티빙 정기점검 안내',\n      smarttv_noti_msg:\n        '보다 나은 서비스를 제공해 드리고자 아래와 같이 서비스 정기점검 진행 중입니다.\\n서비스 점검으로 인해 시청에 불편을 드리는 점 양해 부탁드립니다.\\n\\n점검 시간 중에는 TVING 모바일 앱 또는 PC(www.tving.com)에서 \\n로그인 없이 LIVE 채널을 시청 가능하오니, 참고해주십시오.',\n    },\n  };\n\n  if (ttvStatusJsonResponse) {\n    const { ttv_mode: ttvMode, check_type: checkType, emergency, regular } = ttvStatusJsonResponse;\n\n    const isRegular = checkType === 'regular';\n    return {\n      isOn: ttvMode === 'on',\n      isRegular,\n      title: isRegular ? regular?.smarttv_title : emergency?.smarttv_title,\n      message: isRegular ? regular?.smarttv_noti_msg : emergency?.smarttv_noti_msg,\n      description: isRegular ? regular?.smarttv_check_date : emergency?.smarttv_check_date,\n    };\n  }\n  return {\n    isOn: false,\n    title: '',\n    isRegular: true,\n    message: '',\n    description: '',\n  };\n};\n\nexport default proxyTtv;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/ttvBuffer/proxyTtvBuffer.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/types.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-explicit-any",
        severity: 2,
        message: "Unexpected any. Specify a different type.",
        line: 145,
        column: 36,
        nodeType: "TSAnyKeyword",
        messageId: "unexpectedAny",
        endLine: 145,
        endColumn: 39,
        suggestions: [
          {
            messageId: "suggestUnknown",
            fix: {
              range: [3546, 3549],
              text: "unknown",
            },
            desc: "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
          },
          {
            messageId: "suggestNever",
            fix: {
              range: [3546, 3549],
              text: "never",
            },
            desc: "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
          },
        ],
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { MouseEventHandler } from 'react';\n\nimport {\n  ContentInfoContent,\n  FanContentResult,\n  HighlightResult,\n  I18nName,\n  IncreasePriceAgreementsCheckData,\n  KidsContent,\n  KidsResult,\n  MembershipPlanItem,\n  MyLastsResult,\n  NullableString,\n  NullableValue,\n  OriginalsContent,\n  ProgramContent,\n  ProvisioningImgUrl,\n  ProvisioningMenu,\n  PurchaseResult,\n  RecommendMetaContentInfo,\n  RecommendMovieAssociateResult,\n  RecommendMovieResult,\n  RecommendProgramAssociateResult,\n  RecommendProgramResult,\n  SearchAutoResultContent,\n  SearchMovieContent,\n  SearchProgramContent,\n  SeasonMovieContent,\n  TemplateInfoData,\n  VodContent,\n} from '../apis/types';\nimport { BAND_TYPE } from '../constants/bandConstants';\nimport { CONTENT_LABEL_TYPE, CONTENT_TYPE, LABEL_TYPE, RATING_TYPE } from '../constants/commonConstants';\nimport { SALE_STATUS } from '../constants/detailConstants';\nimport { ITEM_TYPE } from '../constants/itemConstant';\nimport { DURATION_UNIT, TICKET_TYPE, USER_TYPE } from '../constants/userConstants';\nimport { TV_BANDS } from '../types/bands';\nimport { GradeCodes, Label, ORDER_TYPES } from '../types/common';\nimport { AmplitudeEventDefaultPropertiesProps } from '../utils/tving-log-module/TvingLogModule';\n\n// Tving Custom interfaces\n\nexport enum TvingErrorType {\n  // 아무것도 하지 않음\n  NORMAL = 'NORMAL',\n  // 토스트 팝업 노출\n  WARNING = 'TOAST',\n  // 페이지 이동 후 팝업 노출\n  ERROR = 'ERROR',\n  // 프로필 화면 이동 및 로그아웃\n  NOT_AUTHORIZED = 'NOT_AUTHORIZED',\n  // 앱 종료\n  FATAL = 'FATAL',\n}\n\nexport class TvingError extends Error {\n  code: string;\n\n  message: string;\n\n  type: TvingErrorType;\n\n  amplitudeEventDefaultProperties: AmplitudeEventDefaultPropertiesProps;\n\n  constructor(message: string, type: TvingErrorType, amplitudeEventDefaultProperties?, code = message) {\n    super(message);\n    this.code = code;\n    this.message = message;\n    this.type = type;\n    this.amplitudeEventDefaultProperties = amplitudeEventDefaultProperties;\n  }\n}\n\nexport interface TvingBoard {\n  MAIN: TvingBand[];\n  VOD: TvingBand[];\n  MOVIE: TvingBand[];\n  PARAMOUNT: TvingBand[];\n  HISTORY: TvingBand[];\n}\n\nexport interface TvBoard {\n  MAIN: TV_BANDS[];\n  VOD: TV_BANDS[];\n  MOVIE: TV_BANDS[];\n  PARAMOUNT: TV_BANDS[];\n  HISTORY: TV_BANDS[];\n}\n\nexport interface TvSubBoard {\n  backgroundImage?: { type: 'SHORT' | 'LONG'; url: string };\n  title: string[];\n  titleImageUrl?: string;\n  description?: string[];\n  order?: ORDER_TYPES;\n  isOnly?: boolean;\n  isOriginal?: boolean;\n  bands?: TvBand[];\n  tvingBands?: TvingBand[];\n}\n\nexport interface TvBand {\n  bandType: BAND_TYPE;\n  bandName?: string;\n  moreUrl?: string;\n  hasMore?: boolean;\n  apiUrl?: string;\n  linkUrl?: string;\n  nextApiUrl?: string;\n  bandOrder?: number;\n  bandId: string;\n  bandParameter?: Record<string, NullableValue>;\n  items?: TvItem[];\n\n  // 아이템 인덱스 기억이 필요없는 밴드의 경우(ex.검색) 사용\n  blockSaveBandItemIndex?: boolean;\n  isRefresh?: boolean;\n}\n\nexport interface TvingBand {\n  bandType: BAND_TYPE;\n  tvBandType?: BAND_TYPE;\n  bandOrder?: number;\n  bandUrl: string;\n  bandId: string;\n  bandParameter: Record<string, NullableValue>;\n  bandTitle?: string;\n  bandMoreName?: NullableString;\n  bandMoreUrl?: NullableString;\n  hasMore?: boolean;\n  tvingItems: TvingItem[];\n  genreCode?: string;\n  categoryCode?: string;\n  nextApiUrl?: string;\n\n  totalItemCount?: number; // 검색결과 등 띠 전체에 대한 데이터 갯수를 확인하는 경우 사용\n\n  // 아이템 인덱스 기억이 필요없는 밴드의 경우(ex.검색) 사용\n  blockSaveBandItemIndex?: boolean;\n\n  tvBand?: TvBand;\n  isRefresh?: boolean;\n\n  // UI와 무관하게 추가 정보가 필요한 경우 사용 (fba 등..)\n  extraParameters?: Record<string, any>;\n}\n\nexport type ItemResponse =\n  | HighlightResult\n  | VodContent\n  | ContentInfoContent\n  | ProgramContent\n  | MyLastsResult\n  | PurchaseResult\n  | FanContentResult\n  | KidsResult\n  | KidsContent\n  | RecommendMetaContentInfo\n  | SearchProgramContent\n  | SearchMovieContent\n  | RecommendProgramResult\n  | RecommendMovieResult\n  | RecommendMovieAssociateResult\n  | RecommendProgramAssociateResult\n  | OriginalsContent\n  | SearchAutoResultContent\n  | SeasonMovieContent;\n\nexport interface TvItem {\n  itemType: ITEM_TYPE;\n  code?: string;\n  title: string;\n  imageUrl?: string;\n  label?: Label;\n  audioCode?: string;\n  hdrCode?: string;\n  synopsis?: string;\n  gradeCode?: GradeCodes;\n  genreName?: string;\n  thumbnailImageUrl?: string;\n  imageApiUrl?: string;\n  titleImageUrl?: string;\n  description?: string[];\n  linkUrl?: string;\n  broadcastStartTime?: number;\n  broadcastEndTime?: number;\n  liveTitle?: string;\n  stillShotUrl?: string;\n  totalPlayTime?: number;\n  lastPlayTime?: number;\n  seasonNumber?: number;\n  title1?: string;\n  title2?: string;\n  indicatorImageUrl?: string;\n  frequency?: number;\n  expiredDateTime?: number;\n  channelName?: string;\n  releaseDate?: string;\n  broadcastWeek?: string;\n  broadcastHour?: string;\n  broadcastMinute?: string;\n  seasonCount?: number;\n  episodeInfo?: string;\n\n  // UI\n  index?: number;\n  width?: number;\n  height: number;\n\n  handleMouseOver?: MouseEventHandler<HTMLElement>;\n  handleClick?: MouseEventHandler<HTMLElement>;\n  isFocused?: boolean;\n  offsetLeft?: number;\n  offsetTop?: number;\n\n  // banner main, line\n  bannerCode?: string;\n\n  stillshotUrl?: string;\n  displayTitle?: string;\n  subTitle?: string;\n}\nexport interface TvingItem {\n  bandType: BAND_TYPE;\n  itemType: ITEM_TYPE;\n  textTitle: string;\n  textTitle1?: string;\n  textTitle2?: string;\n  itemId?: string;\n  index: number;\n  isAdult?: boolean;\n\n  vodCode?: string;\n  thumbnailUrl?: string;\n  imageTitleUrl?: string;\n  imageApiUrl?: string;\n  metaTexts?: string[];\n  synopsis?: string[];\n  actor?: string;\n  director?: string;\n  labelType?: LABEL_TYPE;\n  contentLabels?: CONTENT_LABEL_TYPE[];\n\n  width?: number;\n  height: number;\n\n  handleMouseOver?: MouseEventHandler<HTMLElement>;\n  handleClick?: MouseEventHandler<HTMLElement>;\n  isFocused?: boolean;\n  offsetLeft?: number;\n  offsetTop?: number;\n\n  tvItem?: TvItem;\n}\n\nexport interface TvingPosterItem extends TvingItem {\n  ratingType?: RATING_TYPE;\n  posterUrl: string;\n  posterWidth?: number;\n  ranking?: number;\n  rankingWidth?: number;\n  isRanking: boolean;\n  keywordAuto?: string;\n  contentLabelType?: CONTENT_LABEL_TYPE;\n  isFree?: boolean;\n  isParamount?: boolean;\n}\n\nexport interface TvingPosterLastsItem extends TvingPosterItem {\n  episodeInfo: string;\n  viewDate: string;\n  progressbarPercent: number;\n}\n\nexport interface TvingPosterPurchasedItem extends TvingPosterItem {\n  episodeInfo: string;\n  expireDate: string;\n  progressbarPercent: number;\n}\n\nexport interface TvingBannerItem extends TvingItem {\n  posterUrl: string;\n  linkUrl: string;\n}\n\nexport interface TvingCategoryItem extends TvingItem {\n  categoryTitle: string;\n  linkUrl: string;\n}\n\nexport interface TvingImageCategoryItem extends TvingItem {\n  backgroundColor: string;\n  posterUrl: string;\n  posterWidth: number;\n  posterHeight: number;\n  linkUrl: string;\n  categoryDescription: string;\n}\n\nexport interface TvingDetailListItem extends TvingItem {\n  ratingType?: RATING_TYPE;\n  progressbarPercent: number;\n  posterUrl: string;\n  posterWidth: number;\n  posterHeight: number;\n  isPurchased?: boolean;\n  episodeFrequency: number;\n  isFree?: boolean;\n  isParamount?: boolean;\n}\n\nexport interface TvingSeasonDetailListItem extends TvingDetailListItem {\n  seasonTitle: string;\n  seasonCode: string;\n  seasonEtcYn: string;\n  seasonNo: string;\n}\n\nexport interface TvingFrequencyItem extends TvingDetailListItem {\n  programTitle: string;\n  episodeCode: string;\n  seasonNo?: number;\n}\n\nexport interface TvingMoreItem extends TvingItem {\n  moreName: string;\n  linkUrl: string;\n  isRanking: boolean;\n}\n\nexport interface TvingStreamPaidInfo {\n  // TODO: isPaid로 수정\n  packageId: string;\n  productType: string;\n  expireDate: string;\n  paid: string;\n}\n\n/**\n * @deprecated Use TvingContentInfoItem instead\n */\nexport interface TvingStreamInfoItem extends TvingItem {\n  streamPaidInfo?: TvingStreamPaidInfo;\n  resultCode: string;\n  progressbarPercent: number;\n  episodeNo: number;\n  seasonProgramNo?: string;\n  seasonProgramCode?: string;\n  seasonMovieCode?: string;\n  seasonMovieNo?: number;\n  saleStatus: SALE_STATUS;\n  programCode?: string;\n  isSubtitle: boolean;\n}\n\nexport interface TvingContentInfoItem extends TvingItem {\n  streamPaidInfo?: TvingStreamPaidInfo;\n  resultCode: string;\n  linkTarget?: string;\n  progressbarPercent: number;\n  lastViewTime?: number;\n  programCode?: string;\n  episodeCode: string;\n  episodeNo: number;\n  seasonNo?: string;\n  seasonCode?: string;\n  saleStatus: SALE_STATUS;\n  isFan: boolean;\n  isSubtitle: boolean;\n  isFree: boolean;\n  channelCode: string;\n  channelName: string;\n  categoryCode: string;\n  categoryName: string;\n  displayTitle?: string;\n}\n\nexport interface TvingPpvAvailableInfo {\n  errMsg: string;\n  resultCode: string;\n}\n\nexport interface TvingEpisodesNearContentItem {\n  code?: string;\n  duration?: number;\n  frequency?: number;\n  grade_code?: string;\n  name?: I18nName;\n  pip_cliptype?: string;\n  synopsis?: I18nName;\n}\n\nexport interface TvingEpisodesNearItem {\n  currentEpisode?: TvingEpisodesNearContentItem;\n  nextEpisodesItem?: TvingEpisodesNearContentItem[];\n  prevEpisodesItem?: TvingEpisodesNearContentItem[];\n  prevSeasonEpisodes?: TvingEpisodesNearContentItem[];\n  nextSeasonEpisodes?: TvingEpisodesNearContentItem[];\n  hasMorePrevEpisode?: boolean;\n  hasMoreNextEpisode?: boolean;\n}\n\nexport interface TvingDetailInfo {\n  tvingItem: TvingContentInfoItem;\n  contentType: CONTENT_TYPE;\n  mediaCode: string;\n  programCode: string;\n  episodeCode: string;\n  seasonCode: string;\n  seasonList: TvingSeasonContentItem[];\n  detailListItemsBand: TvingBand;\n  cmsItemId: string;\n  thumbnailUrl: string;\n}\n\n/**\n * @deprecated DetailListItem 그대로 전달하는것으로 대체\n */\nexport interface TvingRecommendCategoryGenreMovieItem {\n  tvingBand: TvingBand;\n  title: string;\n  mediaCode: string;\n  categoryCode?: string;\n  genreCode?: string;\n}\n\nexport interface TvingSeasonContentItem {\n  seasonTitle: string;\n  seasonCode: string;\n  seasonEtcYn: string;\n  seasonNo: string;\n}\n\nexport interface TvingPlayerInfo {\n  tvingItem: TvingContentInfoItem;\n  contentType: CONTENT_TYPE;\n  mediaCode: string;\n  episodeCode: string;\n  programCode: string;\n  isSubtitle: boolean;\n  isPreviewAvailable: boolean;\n  nextEpisodesItem?: TvingEpisodesNearContentItem;\n  prevEpisodesItem?: TvingEpisodesNearContentItem;\n  prevSeasonEpisodes?: TvingEpisodesNearContentItem;\n  nextSeasonEpisodes?: TvingEpisodesNearContentItem;\n  content: ContentInfoContent;\n}\n\nexport interface TvingUser {\n  userToken: string;\n  authToken: string;\n  accessToken: string;\n  refreshToken: string;\n  userNo: string;\n  userId: string;\n  userType: USER_TYPE;\n  isSns: boolean;\n  emailAddress: string;\n  emailVendor: string;\n  lastPasswordUpdateDate: string;\n  isRealNameConfirmed: boolean;\n  reqType?: string;\n  regionCode?: NullableString;\n  message?: string;\n  code?: string;\n}\n\nexport interface TvingProfileList {\n  profileList: TvingProfile[];\n  profileMaxCount: number;\n}\n\nexport interface TvingProfile {\n  isMainProfile: boolean;\n  adultCertificationDate: string;\n  profileImageUrl: string;\n  profileName: string;\n  profileNo: string;\n  hasPassword: boolean;\n  profileToken: string;\n  userNo: NullableString;\n}\n\nexport interface TvingProfileEdit {\n  tvingProfile?: TvingProfile;\n  profileImageUrls?: string[];\n}\n\nexport interface TvingProfileImageItem {\n  imageUrl: string;\n  imageOrder: number;\n}\n\nexport interface TvingProfileImageGroup {\n  groupCode: string;\n  groupName: string;\n  groupOrder: number;\n  tvingProfileImageItems: TvingProfileImageItem[];\n}\n\n// 티빙의 이용권 정보\nexport interface TvingTicketBody {\n  isFreeYn: string;\n  validTicketList: TvingTicket[];\n  passGroupInfo: TvingPassGroup;\n  isAvailableOnQvod: boolean;\n  isAvailableOn4K: boolean;\n}\n\nexport interface TvingPassGroup {\n  qvodYn: string; // Qvod 시청 권한 여부\n  streamingResolution: number; // 최대 지원 화질 정보\n}\n\n// 티빙의 이용권 정보\nexport interface TvingTicket {\n  productId: number;\n  packageAttr: number;\n  ticketName: string;\n  ticketExpireDate: string;\n  ticketType: TICKET_TYPE;\n  durationUnit: DURATION_UNIT;\n  ticketTier?: number;\n  ticketLabel?: string;\n  ticketConsumeDate?: string;\n  isBook?: boolean;\n  isFreeYn?: string;\n}\n\nexport interface TvingAccount {\n  userToken: string;\n  authToken: string;\n  accessToken: string;\n  refreshToken: string;\n  userId: string;\n  userNo: string;\n  adultCertificationDate: string;\n  lastPasswordUpdateDate: string;\n  isRealNameConfirmed: boolean;\n  userType: USER_TYPE;\n  isSns: boolean;\n  isAffiliate: boolean;\n  email?: string;\n  profileAdultCertifiedDate: string;\n  profileToken: string;\n  profileNo: string;\n  profileName: string;\n  profileImageUrl: string;\n  isMainProfile: boolean;\n  hasPassword: boolean;\n  ticketTier: number;\n  ticketPackageAttr: number;\n  ticketType: TICKET_TYPE;\n  ticketProductId: number;\n  ticketName: string;\n  tvingTickets: TvingTicket[];\n  regionCode?: NullableString;\n  tierAvailableOnTV: boolean;\n  tierMaxResolution: number;\n  tierBasicUpsellingTarget: boolean;\n  tierFreeUpsellingTarget: boolean;\n  tierAvodUpsellingTarget: boolean;\n  tierRegisterCoupon: boolean;\n  upsellingType?: string;\n  isFreeUser: boolean;\n  passGroup: TvingPassGroup;\n  isAvailableOnQvod: boolean;\n  isAvailableOn4K: boolean;\n}\n\nexport interface TvingTtv {\n  isOn: boolean;\n  isRegular: boolean;\n  title: string;\n  message: string;\n  description: string;\n}\n\nexport interface TvingBuffer {\n  isOn: boolean;\n  url: string;\n}\n\nexport interface TvingTtvBuffer {\n  isTtvOn: boolean;\n  ttvUrl: string;\n  isRegular?: boolean;\n  ttvTitle?: string;\n  ttvMessage?: string;\n  ttvCheckDate?: string;\n  isBufferOn: boolean;\n  bufferUrl: string;\n}\n\nexport interface TvingVersion {\n  version: string;\n  isUpdated: boolean;\n  lastUpdateDate: string;\n}\n\nexport interface TvingEntry {\n  isHref?: boolean;\n  isSkipSplash?: boolean;\n  isLogout?: boolean;\n  redirectUrl?: string;\n  isUpdated?: boolean;\n  lastUpdateDate?: string;\n  isFromBuffer?: boolean;\n}\n\nexport interface TvingPopup {\n  title: string;\n  image: string;\n  stopViewPeriod: number;\n  popupId: string;\n}\n\nexport interface TvingPpvProduct {\n  descriptions?: string[];\n  cardButtonText?: string;\n\n  rentalDays?: number;\n  downloadDays?: number;\n  rentalPrice?: number;\n  downloadPrice?: number;\n\n  offerType: number;\n}\n\nexport interface TvingBillingInfo {\n  tvingProductCards: MembershipPlanItem[];\n  productId: number;\n  ticketTier: number;\n  durationUnit: DURATION_UNIT;\n  ticketCount: number;\n  ticketName: string;\n  ticketExpireDate: string;\n  posterUrl?: string;\n  title?: string;\n  tvingPpvProduct?: TvingPpvProduct;\n  offerType?: number;\n}\n\nexport interface TvingArticle {\n  title: string;\n  registerDate: string;\n  content: string;\n  articleId: number;\n}\n\nexport interface TvingArticles {\n  list: TvingArticle[];\n  hasMore: boolean;\n}\n\nexport interface TvingDevice {\n  count: number;\n  deleteMonth: NullableString;\n  limitedCount: number;\n  model: string;\n  name: string;\n  registerDate: string;\n  sequence: string;\n  userNumber: string;\n  uuid: string;\n}\n\nexport interface TvingKeyword {\n  keyword: string;\n  keywordAuto?: string;\n  ranking?: string;\n  updateDate?: string;\n}\n\nexport interface TvingKeywordLists {\n  searchRecentlyList: TvingKeyword[];\n  searchAutoResultList: TvingKeyword[];\n}\n\nexport interface TvingProgramRecommendVod {\n  code: string;\n  available: string;\n}\n\nexport interface TvingProvisioning {\n  region: string;\n  baseUrl: string;\n  isSeasonLogo: boolean;\n  logoImgUrl: string;\n  logoImgOnUrlList: ProvisioningImgUrl[];\n  logoImgOffUrlList: ProvisioningImgUrl[];\n  rightTopMenu?: ProvisioningMenu[];\n  topMenu: ProvisioningMenu[];\n  middleMenu?: ProvisioningMenu[];\n  bottomMenu?: ProvisioningMenu[];\n}\n\nexport interface TvingAccessToken {\n  accessToken: string;\n}\n\n/**\n * recurpay/info 와 agreements/info 응답에 대한 proxy interface\n * 두 api 호출은 개별이나 함께 사용되므로 아래 interface 를 활용한다.\n */\nexport interface RecurpayAgreementsInfo {\n  code: string;\n  recurpayCode: string;\n  message: string;\n  data: {\n    // recurpayInfo\n    productId: number;\n    productName: string;\n    baseDate: string;\n    agreementStartDate: string;\n    agreementEndDate: string;\n    priceKeepDate: string;\n    existingPaymentDate: string;\n    priceUpPaymentDate: string;\n    remainedDays: number;\n    nowPrice: number;\n    newPrice: number;\n\n    // agreementsInfo\n    custNo: number;\n    targetType: DURATION_UNIT;\n    agreeDate: string;\n    agreeRound: number;\n    profileName: string;\n    show: boolean;\n    appContentsImageList: string[];\n    appLineupImage: string;\n    pcContentsImage: string;\n    pcLineupImage: string;\n    tvContentsImage: string;\n  };\n}\n\nexport interface MainPopupInfo {\n  agreementCheckData?: IncreasePriceAgreementsCheckData;\n  agreementPopupData?: TemplateInfoData;\n}\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/userInfo/proxyUserInfo.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/userInfo/proxyUserInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/proxies/version/proxyVersion.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/types/bands.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/types/boards.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/types/common.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/types/items.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/types/stream.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/types/subBoards.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/types/utility.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/amplitude/amplitudeEvent.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/amplitude/getAmplitudeEventInfo.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/amplitude/getAmplitudeEventMediaType.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/amplitude/initAmplitude.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/amplitude/seGroupAmplitude.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/amplitude/setUserIdAmplitude.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/array/binarySearchIndex.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/array/binarySearchIndex.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/apiConfig.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The case statement does not have a shared enum type with the switch predicate.",
        line: 62,
        column: 3,
        nodeType: "SwitchCase",
        messageId: "mismatchedCase",
        endLine: 78,
        endColumn: 11,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The case statement does not have a shared enum type with the switch predicate.",
        line: 79,
        column: 3,
        nodeType: "SwitchCase",
        messageId: "mismatchedCase",
        endLine: 95,
        endColumn: 11,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The case statement does not have a shared enum type with the switch predicate.",
        line: 96,
        column: 3,
        nodeType: "SwitchCase",
        messageId: "mismatchedCase",
        endLine: 112,
        endColumn: 11,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The case statement does not have a shared enum type with the switch predicate.",
        line: 113,
        column: 3,
        nodeType: "SwitchCase",
        messageId: "mismatchedCase",
        endLine: 129,
        endColumn: 11,
      },
    ],
    suppressedMessages: [],
    errorCount: 4,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { NullableString } from '../../apis/types';\nimport { CACHE_KEY, DEVICE_TYPE } from '../../constants/commonConstants';\n\nimport getDeviceType from './getDeviceType/getDeviceType';\n\nlet pageUrl = 'https://www.tving.com';\nlet apiUrl = 'https://api.tving.com';\nlet userUrl = 'https://user.tving.com';\nlet searchUrl = 'https://search.tving.com';\nlet imageServerUrl = 'https://image.tving.com';\nlet ttvUrl = 'https://image.tving.com/upload/ttv/status.json';\nlet bufferUrl = 'https://image.tving.com/upload/buffer/status.json';\nlet gatewayUrl = 'https://gw.tving.com';\nlet regionGatewayUrl = 'https://ooo-gw.tving.com';\nlet sendbirdUrl = `https://gw.tving.com/chat/v1`;\nlet kboUrl = 'https://gw-dev-cf.aws.tving.com/bff/kbo/v2';\nlet kboBaseUrl = 'https://gw-dev-cf.aws.tving.com/bff/kbo'; // v2, v3 버전 없는 기본 URL\n\nlet billUrl = 'https://bill.tving.com';\nlet pcOriginUrl = 'https://www.tving.com';\nlet amplitudeKey = 'c2b31201837521f7cfb798a47bd43043';\nconst versionUrl = typeof window !== 'undefined' ? `${window?.location.protocol}//${window?.location.host}/version.json` : '';\n\nexport const API_VERSION = {\n  V2: 'v2',\n  V3: 'v3',\n};\n\nexport enum ENVIRONMENT_TYPES {\n  PRODUCTION = 'PRODUCTION',\n  QC = 'QC',\n  QA = 'QA',\n  DEV = 'DEV',\n}\n\nconst getEnvironmentTypes = (environmentType: NullableString) => {\n  switch (environmentType) {\n    case 'PRODUCTION':\n    case 'real':\n      return ENVIRONMENT_TYPES.PRODUCTION;\n    case 'QC':\n    case 'qc':\n      return ENVIRONMENT_TYPES.QC;\n    case 'QA':\n    case 'qa':\n      return ENVIRONMENT_TYPES.QA;\n    case 'DEV':\n    case 'dev':\n      return ENVIRONMENT_TYPES.DEV;\n    default:\n      return ENVIRONMENT_TYPES.PRODUCTION;\n  }\n};\n\nconst environment: string = process.env.REACT_APP_RELEASE ?? 'PRODUCTION';\n\n// Api type A.K.A at\nconst storedEnvironmentType = typeof window !== 'undefined' ? window.localStorage.getItem(CACHE_KEY.ENVIRONMENT_TYPE) : null;\nexport const environmentType = storedEnvironmentType ?? getEnvironmentTypes(environment);\n\nswitch (environmentType) {\n  case ENVIRONMENT_TYPES.PRODUCTION:\n    pageUrl = 'https://www.tving.com';\n    apiUrl = 'https://api.tving.com';\n    userUrl = 'https://user.tving.com';\n    searchUrl = 'https://search.tving.com';\n    imageServerUrl = 'https://image.tving.com';\n    ttvUrl = 'https://image.tving.com/upload/ttv/status.json';\n    bufferUrl = 'https://image.tving.com/upload/buffer/status.json';\n    gatewayUrl = 'https://gw.tving.com';\n    regionGatewayUrl = 'https://ooo-gw.tving.com';\n    sendbirdUrl = 'https://gw.tving.com/chat/v1';\n    kboUrl = 'https://gw.tving.com/bff/kbo/v2';\n    kboBaseUrl = 'https://gw.tving.com/bff/kbo';\n    billUrl = 'https://bill.tving.com';\n    pcOriginUrl = 'https://www.tving.com';\n    amplitudeKey = 'c2b31201837521f7cfb798a47bd43043';\n    break;\n  case ENVIRONMENT_TYPES.QC:\n    pageUrl = 'https://qc.tving.com';\n    apiUrl = 'https://apiqc.tving.com';\n    userUrl = 'https://userqc.tving.com';\n    searchUrl = 'https://qc-search.tving.com';\n    imageServerUrl = 'https://image.tving.com';\n    ttvUrl = 'https://image.tving.com/upload/ttv/status.json';\n    bufferUrl = 'https://image.tving.com/upload/buffer/status.json';\n    gatewayUrl = 'https://gw-qc-cf.aws.tving.com';\n    regionGatewayUrl = 'https://ooo-gw-qc.aws.tving.com';\n    sendbirdUrl = 'https://gw-qc-cf.aws.tving.com/chat/v1';\n    kboUrl = 'https://gw-qc-cf.aws.tving.com/bff/kbo/v2';\n    kboBaseUrl = 'https://gw-qc-cf.aws.tving.com/bff/kbo';\n    billUrl = 'https://billqc.tving.com';\n    pcOriginUrl = 'https://qc.tving.com';\n    amplitudeKey = '22ae6386ed7c9bcb4d25c135d61e293f';\n    break;\n  case ENVIRONMENT_TYPES.QA:\n    pageUrl = 'https://qa.tving.com';\n    apiUrl = 'https://apiqa.tving.com';\n    userUrl = 'https://userqa.tving.com';\n    searchUrl = 'https://qa-search.tving.com';\n    imageServerUrl = 'https://image-qa.tving.com';\n    ttvUrl = 'https://image-qa.tving.com/upload/ttvstg/status.json';\n    bufferUrl = 'https://image-qa.tving.com/upload/bufferstg/status.json';\n    gatewayUrl = 'https://gw-qa-cf.aws.tving.com';\n    regionGatewayUrl = 'https://ooo-gw-qa.aws.tving.com';\n    sendbirdUrl = 'https://gw-qa-cf.aws.tving.com/chat/v1';\n    kboUrl = 'https://gw-qa-cf.aws.tving.com/bff/kbo/v2';\n    kboBaseUrl = 'https://gw-qa-cf.aws.tving.com/bff/kbo';\n    billUrl = 'https://billqa.tving.com';\n    pcOriginUrl = 'https://qa.tving.com';\n    amplitudeKey = '22ae6386ed7c9bcb4d25c135d61e293f';\n    break;\n  case ENVIRONMENT_TYPES.DEV:\n    pageUrl = 'https://dev.tving.com';\n    apiUrl = 'https://apidev.tving.com';\n    userUrl = 'https://userdev.tving.com';\n    searchUrl = 'https://dev-search.tving.com';\n    imageServerUrl = 'https://imagedev.tving.com';\n    ttvUrl = 'https://imagedev.tving.com/upload/ttvdev/status.json';\n    bufferUrl = 'https://imagedev.tving.com/upload/bufferdev/status.json';\n    gatewayUrl = 'https://gw-dev-cf.aws.tving.com';\n    regionGatewayUrl = 'https://ooo-gw-dev.aws.tving.com';\n    sendbirdUrl = 'https://gw-dev-cf.aws.tving.com/chat/v1';\n    kboUrl = 'https://gw-dev-cf.aws.tving.com/bff/kbo/v2';\n    kboBaseUrl = 'https://gw-dev-cf.aws.tving.com/bff/kbo';\n    billUrl = 'https://billdev.tving.com';\n    pcOriginUrl = 'https://dev.tving.com';\n    amplitudeKey = 'b6c94c8cc95de692d32ff315f4f9057c';\n    break;\n  default:\n}\n\nconst deviceType = getDeviceType();\n\n// eslint-disable-next-line no-nested-ternary\nexport const POC_CODE = deviceType === DEVICE_TYPE.WEBOS ? 'POCD0800' : deviceType === DEVICE_TYPE.TIZEN ? 'POCD0801' : 'POCD0802';\n\n// eslint-disable-next-line no-nested-ternary\nexport const SCREEN_CODE = deviceType === DEVICE_TYPE.WEBOS ? 'CSSD1100' : deviceType === DEVICE_TYPE.TIZEN ? 'CSSD1200' : 'CSSD1300';\n\nexport const API_KEY =\n  // eslint-disable-next-line no-nested-ternary\n  deviceType === DEVICE_TYPE.WEBOS\n    ? '95a64ebcd8e154aeb96928bf34848826'\n    : deviceType === DEVICE_TYPE.TIZEN\n    ? 'aeef9047f92b9dc4ebabc71fe4b124bf'\n    : '1e7952d0917d6aab1f0293a063697610';\n\nexport const PAGE_URL = `${pageUrl}`;\nexport const API_SERVER_URL = `${apiUrl}`;\nexport const USER_SERVER_URL = `${userUrl}`;\nexport const SEARCH_SERVER_URL = `${searchUrl}`;\nexport const IMAGE_SERVER_URL = `${imageServerUrl}`;\nexport const TTV_URL = `${ttvUrl}`;\nexport const BUFFER_URL = `${bufferUrl}`;\nexport const VERSION_URL = `${versionUrl}`;\nexport const GATEWAY_URL = `${gatewayUrl}`;\nexport const KBO_URL = `${kboUrl}`;\nexport const KBO_BASE_URL = `${kboBaseUrl}`;\nexport const SENDBIRD_URL = `${sendbirdUrl}`;\nexport const PC_ORIGIN_URL = `${pcOriginUrl}`;\nexport const REGION_GATEWAY_URL = `${regionGatewayUrl}`;\nexport const BILL_URL = `${billUrl}`;\nexport const AMPLITUDE_KEY = `${amplitudeKey}`;\n\nexport const getKboDefaultApiUrl = ({ version = API_VERSION.V2 }) => `${KBO_BASE_URL}/${version}`;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/clearTimeoutSimply/clearTimeoutSimply.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/compareVersion/compareVersion.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/compareVersion/compareVersion.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/convertCategoryItem/convertCategoryItem.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/convertItemsWithTotal/convertItemsWithTotal.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/convertItemsWithTotal/convertTvItemsWithTotal.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/convertPlayerDisplayTime/convertPlayerDisplayTime.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/convertRandomStillshot/convertRandomStillshot.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "prefer-regex-literals",
        severity: 2,
        message:
          "Use regular expression literal with flags instead of the 'RegExp' constructor.",
        line: 12,
        column: 20,
        nodeType: "NewExpression",
        messageId: "unexpectedRedundantRegExpWithFlags",
        endLine: 12,
        endColumn: 49,
        suggestions: [
          {
            messageId: "replaceWithLiteralAndFlags",
            data: {
              flags: "g",
            },
            fix: {
              range: [318, 347],
              text: "/\\{[0-9]+\\}/g",
            },
            desc: "Replace with an equivalent regular expression literal with flags 'g'.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-regex-literals",
        severity: 2,
        message:
          "Use regular expression literal with flags instead of the 'RegExp' constructor.",
        line: 13,
        column: 46,
        nodeType: "NewExpression",
        messageId: "unexpectedRedundantRegExpWithFlags",
        endLine: 13,
        endColumn: 75,
        suggestions: [
          {
            messageId: "replaceWithLiteralAndFlags",
            data: {
              flags: "g",
            },
            fix: {
              range: [409, 438],
              text: "/\\{[0-9]+\\}/g",
            },
            desc: "Replace with an equivalent regular expression literal with flags 'g'.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\{.",
        line: 19,
        column: 28,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 19,
        endColumn: 29,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [538, 539],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [538, 538],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-useless-escape",
        severity: 2,
        message: "Unnecessary escape character: \\}.",
        line: 19,
        column: 30,
        nodeType: "Literal",
        messageId: "unnecessaryEscape",
        endLine: 19,
        endColumn: 31,
        suggestions: [
          {
            messageId: "removeEscape",
            fix: {
              range: [540, 541],
              text: "",
            },
            desc: "Remove the `\\`. This maintains the current functionality.",
          },
          {
            messageId: "escapeBackslash",
            fix: {
              range: [540, 540],
              text: "\\",
            },
            desc: "Replace the `\\` with `\\\\` to include the actual backslash character.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/convertRandomStillshot/index.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/convertRemToPixels/convertRemToPixels.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/convertToWebpResize/convertToWebpResize.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/convertToWebpResize/index.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/convertXssString/convertXssString.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/formatNumberWithComma.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/getAgeLabelByGradeCode/getAgeLabelByGradeCode.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 5,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 5,
        endColumn: 33,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 6,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 6,
        endColumn: 33,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 7,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 7,
        endColumn: 33,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 8,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 8,
        endColumn: 33,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 9,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 9,
        endColumn: 33,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 10,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 10,
        endColumn: 33,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 11,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 11,
        endColumn: 33,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 12,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 12,
        endColumn: 33,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 13,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 13,
        endColumn: 33,
      },
    ],
    suppressedMessages: [],
    errorCount: 9,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { GRADE_CODE } from '../../../constants/commonConstants';\n\nconst isGradeCode = (code: string) => {\n  return (\n    code === GRADE_CODE.CPTG0100 ||\n    code === GRADE_CODE.CMMG0100 ||\n    code === GRADE_CODE.CPTG0200 ||\n    code === GRADE_CODE.CPTG0300 ||\n    code === GRADE_CODE.CMMG0200 ||\n    code === GRADE_CODE.CPTG0400 ||\n    code === GRADE_CODE.CMMG0300 ||\n    code === GRADE_CODE.CMMG0400 ||\n    code === GRADE_CODE.CPTG0500\n  );\n};\nexport default isGradeCode;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/getChangDurationToTime.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/getDeviceType/getDeviceType.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/getLivePlayingTime/getLivePlayingTime.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/getRenderingItemCount/getRenderingItemCount.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/getTvRenderingItemCount/getTvRenderingItemCount.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/getUrlAndParameter/getUrlAndParameter.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/getUrlAndParameter/getUrlAndParameter.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message:
          "Assignment to property of function parameter 'previousParameter'.",
        line: 13,
        column: 9,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 13,
        endColumn: 26,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/hexToRgb/hexToRgb.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isAdultCertified/isAdultCertified.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isAdultCertified/isAdultCertified.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isBanner/isBanner.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isBoard/isBoard.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 5,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 5,
        endColumn: 48,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 6,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 6,
        endColumn: 47,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 7,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 7,
        endColumn: 49,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 8,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 8,
        endColumn: 53,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 9,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 9,
        endColumn: 51,
      },
    ],
    suppressedMessages: [],
    errorCount: 5,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { BOARD_TYPE } from '../../../constants/boardConstants';\n\nconst isBoard = (boardType: string): boolean => {\n  return (\n    boardType.toUpperCase() === BOARD_TYPE.MAIN ||\n    boardType.toUpperCase() === BOARD_TYPE.VOD ||\n    boardType.toUpperCase() === BOARD_TYPE.MOVIE ||\n    boardType.toUpperCase() === BOARD_TYPE.PARAMOUNT ||\n    boardType.toUpperCase() === BOARD_TYPE.HISTORY\n  );\n};\n\nexport default isBoard;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isBrowser/isBrowser.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isDetailList/isDetailList.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isLoop/isLoop.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isRequiredAccessTokenApi/isRequiredAccessTokenApi.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isRequiredLoginPath/isRequiredLoginPath.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isServer/isServer.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isTvBandLoop/isTvBandLoop.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isTvSubBoard/isTvSubBoard.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 5,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 5,
        endColumn: 56,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 6,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 6,
        endColumn: 59,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 7,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 7,
        endColumn: 55,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 8,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 8,
        endColumn: 58,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 9,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 9,
        endColumn: 55,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 10,
        column: 5,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 10,
        endColumn: 55,
      },
    ],
    suppressedMessages: [],
    errorCount: 6,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { SUB_BOARD_TYPE } from '../../../constants/subBoardConstants';\n\nconst isTvSubBoard = (subBoardType: string): boolean => {\n  return (\n    subBoardType.toUpperCase() === SUB_BOARD_TYPE.GENRE ||\n    subBoardType.toUpperCase() === SUB_BOARD_TYPE.CURATION ||\n    subBoardType.toUpperCase() === SUB_BOARD_TYPE.BAND ||\n    subBoardType.toUpperCase() === SUB_BOARD_TYPE.SPECIAL ||\n    subBoardType.toUpperCase() === SUB_BOARD_TYPE.MORE ||\n    subBoardType.toUpperCase() === SUB_BOARD_TYPE.CLIP\n  );\n};\n\nexport default isTvSubBoard;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/isValidContent/isValidContent.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/lazyRetry/lazyRetry.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'DeviceManagerInstance' is defined but never used.",
        line: 4,
        column: 8,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 4,
        endColumn: 29,
      },
      {
        ruleId: "@typescript-eslint/no-explicit-any",
        severity: 2,
        message: "Unexpected any. Specify a different type.",
        line: 37,
        column: 139,
        nodeType: "TSAnyKeyword",
        messageId: "unexpectedAny",
        endLine: 37,
        endColumn: 142,
        suggestions: [
          {
            messageId: "suggestUnknown",
            fix: {
              range: [1583, 1586],
              text: "unknown",
            },
            desc: "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
          },
          {
            messageId: "suggestNever",
            fix: {
              range: [1583, 1586],
              text: "never",
            },
            desc: "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
          },
        ],
      },
    ],
    suppressedMessages: [
      {
        ruleId: "@typescript-eslint/no-explicit-any",
        severity: 2,
        message: "Unexpected any. Specify a different type.",
        line: 8,
        column: 27,
        nodeType: "TSAnyKeyword",
        messageId: "unexpectedAny",
        endLine: 8,
        endColumn: 30,
        suggestions: [
          {
            messageId: "suggestUnknown",
            fix: {
              range: [283, 286],
              text: "unknown",
            },
            desc: "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
          },
          {
            messageId: "suggestNever",
            fix: {
              range: [283, 286],
              text: "never",
            },
            desc: "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 2,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { ComponentType, lazy } from 'react';\n\nimport { CACHE_KEY } from '../../../constants/commonConstants';\nimport DeviceManagerInstance from '../../device';\nimport TvingLogModule from '../../tving-log-module/TvingLogModule';\n\n// eslint-disable-next-line\ntype ComponentPromise<T = any> = Promise<{ default: ComponentType<T> }>;\n\nconst retry = (fn: () => ComponentPromise, retriesLeft = 5, interval = 1000): ComponentPromise =>\n  new Promise((resolve, reject) => {\n    fn()\n      .then(resolve)\n      .catch((error) => {\n        TvingLogModule.warn(`[lazyRetry] retriesLeft: ${retriesLeft}, error: ${error}`);\n        setTimeout(() => {\n          if (retriesLeft <= 1) {\n            TvingLogModule.warnSentry(`[lazyRetry] refresh retriesLeft: ${retriesLeft}, page: ${error}`);\n\n            const chunkRetryCount = localStorage.getItem(CACHE_KEY.CHUNK_RETRY_COUNT);\n            if (chunkRetryCount && Number(chunkRetryCount) >= 3) {\n              localStorage.removeItem(CACHE_KEY.CHUNK_RETRY_COUNT);\n              // eslint-disable-next-line no-alert\n              window.location.href = '/exit/exit.html';\n              return;\n            }\n            localStorage.setItem(CACHE_KEY.CHUNK_RETRY_COUNT, chunkRetryCount ? `${Number(chunkRetryCount) + 1}` : '1');\n\n            window.location.reload();\n            return;\n          }\n          retry(fn, retriesLeft - 1, interval).then(resolve, reject);\n        }, interval);\n      });\n  });\n\nconst lazyRetry = (component: () => ComponentPromise, retries?: number, interval?: number): React.LazyExoticComponent<React.ComponentType<any>> => {\n  return lazy(() => retry(component, retries, interval));\n};\n\nexport default lazyRetry;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/mergeInfiniteBandData/mergeInfiniteBandData.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/noop/noop.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/parseVttThumbnail/parseVttThumbnail.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/resizeImage/index.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/resizeImage/resizeImage.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/sendSms/sendSms.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/useDebounce.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/common/useThrottle.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-explicit-any",
        severity: 2,
        message: "Unexpected any. Specify a different type.",
        line: 3,
        column: 32,
        nodeType: "TSAnyKeyword",
        messageId: "unexpectedAny",
        endLine: 3,
        endColumn: 35,
        suggestions: [
          {
            messageId: "suggestUnknown",
            fix: {
              range: [64, 67],
              text: "unknown",
            },
            desc: "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
          },
          {
            messageId: "suggestNever",
            fix: {
              range: [64, 67],
              text: "never",
            },
            desc: "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
          },
        ],
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { useRef } from 'react';\n\nfunction useThrottle<T extends any[]>(callback: (...params: T) => void, time: number) {\n  const timer = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  return (...params: T) => {\n    if (!timer.current) {\n      timer.current = setTimeout(() => {\n        callback(...params);\n        timer.current = null;\n      }, time);\n    }\n  };\n}\n\nexport default useThrottle;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/cookie/cookies.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/components/hooks/useDeviceData.js",
    messages: [
      {
        ruleId: "no-unneeded-ternary",
        severity: 2,
        message:
          "Unnecessary use of conditional expression for default assignment.",
        line: 4,
        column: 25,
        nodeType: "ConditionalExpression",
        messageId: "unnecessaryConditionalAssignment",
        endLine: 4,
        endColumn: 75,
        fix: {
          range: [118, 168],
          text: "userAgent || window.navigator.userAgent",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `;`",
        line: 4,
        column: 75,
        nodeType: null,
        messageId: "insert",
        endLine: 4,
        endColumn: 75,
        fix: {
          range: [168, 168],
          text: ";",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `;`",
        line: 5,
        column: 39,
        nodeType: null,
        messageId: "insert",
        endLine: 5,
        endColumn: 39,
        fix: {
          range: [207, 207],
          text: ";",
        },
      },
    ],
    suppressedMessages: [],
    errorCount: 3,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 3,
    fixableWarningCount: 0,
    source:
      "import { parseUserAgent } from '../../lib/parse';\n\nexport function useDeviceData(userAgent) {\n  const hookUserAgent = userAgent ? userAgent : window.navigator.userAgent\n  return parseUserAgent(hookUserAgent)\n}\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/components/hooks/useDeviceSelectors.js",
    messages: [
      {
        ruleId: "import/order",
        severity: 2,
        message:
          "There should be at least one empty line between import groups",
        line: 1,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 1,
        endColumn: 49,
        fix: {
          range: [48, 48],
          text: "\n",
        },
      },
      {
        ruleId: "import/order",
        severity: 2,
        message:
          "`../../lib/buildSelectors` import should occur before import of `./useDeviceData`",
        line: 2,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 2,
        endColumn: 65,
        fix: {
          range: [0, 114],
          text: "import { buildSelectorsObject } from '../../lib/buildSelectors';\nimport { useDeviceData } from './useDeviceData';\n",
        },
      },
      {
        ruleId: "no-unneeded-ternary",
        severity: 2,
        message:
          "Unnecessary use of conditional expression for default assignment.",
        line: 5,
        column: 25,
        nodeType: "ConditionalExpression",
        messageId: "unnecessaryConditionalAssignment",
        endLine: 5,
        endColumn: 75,
        fix: {
          range: [187, 237],
          text: "userAgent || window.navigator.userAgent",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `;`",
        line: 5,
        column: 75,
        nodeType: null,
        messageId: "insert",
        endLine: 5,
        endColumn: 75,
        fix: {
          range: [237, 237],
          text: ";",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `;`",
        line: 6,
        column: 50,
        nodeType: null,
        messageId: "insert",
        endLine: 6,
        endColumn: 50,
        fix: {
          range: [287, 287],
          text: ";",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `;`",
        line: 7,
        column: 53,
        nodeType: null,
        messageId: "insert",
        endLine: 7,
        endColumn: 53,
        fix: {
          range: [340, 340],
          text: ";",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `;`",
        line: 9,
        column: 33,
        nodeType: null,
        messageId: "insert",
        endLine: 9,
        endColumn: 33,
        fix: {
          range: [374, 374],
          text: ";",
        },
      },
    ],
    suppressedMessages: [],
    errorCount: 7,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 7,
    fixableWarningCount: 0,
    source:
      "import { useDeviceData } from './useDeviceData';\nimport { buildSelectorsObject } from '../../lib/buildSelectors';\n\nexport function useDeviceSelectors(userAgent) {\n  const hookUserAgent = userAgent ? userAgent : window.navigator.userAgent\n  const deviceData = useDeviceData(hookUserAgent)\n  const selectors = buildSelectorsObject(deviceData)\n\n  return [selectors, deviceData]\n}\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/components/hooks/useOrientationChange.js",
    messages: [
      {
        ruleId: "import/order",
        severity: 2,
        message:
          "There should be at least one empty line between import groups",
        line: 1,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 1,
        endColumn: 65,
        fix: {
          range: [64, 64],
          text: "\n",
        },
      },
      {
        ruleId: "no-unused-vars",
        severity: 2,
        message: "'React' is defined but never used.",
        line: 1,
        column: 8,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 1,
        endColumn: 13,
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `\"react\"` with `'react'`",
        line: 1,
        column: 57,
        nodeType: null,
        messageId: "replace",
        endLine: 1,
        endColumn: 64,
        fix: {
          range: [56, 63],
          text: "'react'",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `\"../../lib/selectors\"` with `'../../lib/selectors'`",
        line: 2,
        column: 26,
        nodeType: null,
        messageId: "replace",
        endLine: 2,
        endColumn: 47,
        fix: {
          range: [90, 111],
          text: "'../../lib/selectors'",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `,`",
        line: 10,
        column: 64,
        nodeType: null,
        messageId: "insert",
        endLine: 10,
        endColumn: 64,
        fix: {
          range: [425, 425],
          text: ",",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `;`",
        line: 11,
        column: 6,
        nodeType: null,
        messageId: "insert",
        endLine: 11,
        endColumn: 6,
        fix: {
          range: [431, 431],
          text: ";",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `,`",
        line: 18,
        column: 64,
        nodeType: null,
        messageId: "insert",
        endLine: 18,
        endColumn: 64,
        fix: {
          range: [723, 723],
          text: ",",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `;`",
        line: 19,
        column: 6,
        nodeType: null,
        messageId: "insert",
        endLine: 19,
        endColumn: 6,
        fix: {
          range: [729, 729],
          text: ";",
        },
      },
      {
        ruleId: "no-unused-expressions",
        severity: 2,
        message:
          "Expected an assignment or function call and instead saw an expression.",
        line: 20,
        column: 5,
        nodeType: "ExpressionStatement",
        messageId: "unusedExpression",
        endLine: 20,
        endColumn: 62,
      },
      {
        ruleId: "valid-typeof",
        severity: 2,
        message: "Typeof comparisons should be to string literals.",
        line: 23,
        column: 27,
        nodeType: "Identifier",
        messageId: "notString",
        endLine: 23,
        endColumn: 36,
        suggestions: [
          {
            messageId: "suggestString",
            data: {
              type: "undefined",
            },
            fix: {
              range: [865, 874],
              text: '"undefined"',
            },
            desc: 'Use `"undefined"` instead of `undefined`.',
          },
        ],
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `\"load\"` with `'load'`",
        line: 25,
        column: 31,
        nodeType: null,
        messageId: "replace",
        endLine: 25,
        endColumn: 37,
        fix: {
          range: [953, 959],
          text: "'load'",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `\"resize\"` with `'resize'`",
        line: 26,
        column: 31,
        nodeType: null,
        messageId: "replace",
        endLine: 26,
        endColumn: 39,
        fix: {
          range: [1024, 1032],
          text: "'resize'",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `\"resize\"` with `'resize'`",
        line: 29,
        column: 34,
        nodeType: null,
        messageId: "replace",
        endLine: 29,
        endColumn: 42,
        fix: {
          range: [1125, 1133],
          text: "'resize'",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `\"load\"` with `'load'`",
        line: 30,
        column: 34,
        nodeType: null,
        messageId: "replace",
        endLine: 30,
        endColumn: 40,
        fix: {
          range: [1201, 1207],
          text: "'load'",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `;`",
        line: 31,
        column: 6,
        nodeType: null,
        messageId: "insert",
        endLine: 31,
        endColumn: 6,
        fix: {
          range: [1247, 1247],
          text: ";",
        },
      },
    ],
    suppressedMessages: [],
    errorCount: 15,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 12,
    fixableWarningCount: 0,
    source:
      'import React, { useCallback, useEffect, useState } from "react";\nimport { isMobile } from "../../lib/selectors";\n\nexport function useMobileOrientation() {\n  const [state, setState] = useState(() => {\n    const orientation = window.innerWidth > window.innerHeight ? 90 : 0;\n    return {\n      isPortrait: orientation === 0,\n      isLandscape: orientation === 90,\n      orientation: orientation === 0 ? \'portrait\' : \'landscape\'\n    }\n  });\n  const handleOrientationChange = useCallback(() => {\n    const orientation = window.innerWidth > window.innerHeight ? 90 : 0;\n    const next = {\n      isPortrait: orientation === 0,\n      isLandscape: orientation === 90,\n      orientation: orientation === 0 ? \'portrait\' : \'landscape\'\n    }\n    state.orientation !== next.orientation && setState(next);\n  }, [state.orientation]);\n  useEffect(() => {\n    if (typeof window !== undefined && isMobile) {\n      handleOrientationChange();\n      window.addEventListener("load", handleOrientationChange, false);\n      window.addEventListener("resize", handleOrientationChange, false);\n    }\n    return () => {\n      window.removeEventListener("resize", handleOrientationChange, false);\n      window.removeEventListener("load", handleOrientationChange, false);\n    }\n  }, [handleOrientationChange]);\n  return state;\n}\n',
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/components/views.js",
    messages: [
      {
        ruleId: "import/order",
        severity: 2,
        message:
          "There should be at least one empty line between import groups",
        line: 1,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 1,
        endColumn: 41,
        fix: {
          range: [40, 40],
          text: "\n",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `⏎··isAndroid,⏎··isBrowser,⏎··isIOS,⏎··isMobile,⏎··isIE,⏎··isWinPhone,⏎··isSmartTV,⏎··isMobileOnly,⏎··isWearable,⏎··isConsole,⏎··isTablet,⏎` with `·isAndroid,·isBrowser,·isIOS,·isMobile,·isIE,·isWinPhone,·isSmartTV,·isMobileOnly,·isWearable,·isConsole,·isTablet·`",
        line: 2,
        column: 9,
        nodeType: null,
        messageId: "replace",
        endLine: 14,
        endColumn: 1,
        fix: {
          range: [49, 187],
          text: " isAndroid, isBrowser, isIOS, isMobile, isIE, isWinPhone, isSmartTV, isMobileOnly, isWearable, isConsole, isTablet ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····renderWithFragment·?·(⏎······<Fragment>{children}</Fragment>⏎····)·:·(⏎······<div·{...props}>{children}</div>⏎····)⏎··)` with `renderWithFragment·?·<Fragment>{children}</Fragment>·:·<div·{...props}>{children}</div>`",
        line: 17,
        column: 22,
        nodeType: null,
        messageId: "replace",
        endLine: 23,
        endColumn: 4,
        fix: {
          range: [313, 438],
          text: "renderWithFragment ? <Fragment>{children}</Fragment> : <div {...props}>{children}</div>",
        },
      },
      {
        ruleId: "react/jsx-no-useless-fragment",
        severity: 2,
        message:
          "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
        line: 19,
        column: 7,
        nodeType: "JSXElement",
        messageId: "NeedsMoreChildren",
        endLine: 19,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-filename-extension",
        severity: 2,
        message: "JSX not allowed in files with extension '.js'",
        line: 19,
        column: 7,
        nodeType: "JSXElement",
        messageId: "noJSXWithExtension",
        endLine: 19,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-fragments",
        severity: 2,
        message: "Prefer fragment shorthand over React.Fragment",
        line: 19,
        column: 7,
        nodeType: "JSXElement",
        messageId: "preferFragment",
        endLine: 19,
        endColumn: 38,
        fix: {
          range: [348, 379],
          text: "<>{children}</>",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····renderWithFragment·?·(⏎······<Fragment>{children}</Fragment>⏎····)·:·(⏎······<div·{...props}>{children}</div>⏎····)⏎··)` with `renderWithFragment·?·<Fragment>{children}</Fragment>·:·<div·{...props}>{children}</div>`",
        line: 27,
        column: 22,
        nodeType: null,
        messageId: "replace",
        endLine: 33,
        endColumn: 4,
        fix: {
          range: [549, 674],
          text: "renderWithFragment ? <Fragment>{children}</Fragment> : <div {...props}>{children}</div>",
        },
      },
      {
        ruleId: "react/jsx-no-useless-fragment",
        severity: 2,
        message:
          "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
        line: 29,
        column: 7,
        nodeType: "JSXElement",
        messageId: "NeedsMoreChildren",
        endLine: 29,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-fragments",
        severity: 2,
        message: "Prefer fragment shorthand over React.Fragment",
        line: 29,
        column: 7,
        nodeType: "JSXElement",
        messageId: "preferFragment",
        endLine: 29,
        endColumn: 38,
        fix: {
          range: [584, 615],
          text: "<>{children}</>",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····renderWithFragment·?·(⏎······<Fragment>{children}</Fragment>⏎····)·:·(⏎······<div·{...props}>{children}</div>⏎····)⏎··)` with `renderWithFragment·?·<Fragment>{children}</Fragment>·:·<div·{...props}>{children}</div>`",
        line: 37,
        column: 17,
        nodeType: null,
        messageId: "replace",
        endLine: 43,
        endColumn: 4,
        fix: {
          range: [775, 900],
          text: "renderWithFragment ? <Fragment>{children}</Fragment> : <div {...props}>{children}</div>",
        },
      },
      {
        ruleId: "react/jsx-no-useless-fragment",
        severity: 2,
        message:
          "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
        line: 39,
        column: 7,
        nodeType: "JSXElement",
        messageId: "NeedsMoreChildren",
        endLine: 39,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-fragments",
        severity: 2,
        message: "Prefer fragment shorthand over React.Fragment",
        line: 39,
        column: 7,
        nodeType: "JSXElement",
        messageId: "preferFragment",
        endLine: 39,
        endColumn: 38,
        fix: {
          range: [810, 841],
          text: "<>{children}</>",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····renderWithFragment·?·(⏎······<Fragment>{children}</Fragment>⏎····)·:·(⏎······<div·{...props}>{children}</div>⏎····)⏎··)` with `renderWithFragment·?·<Fragment>{children}</Fragment>·:·<div·{...props}>{children}</div>`",
        line: 47,
        column: 18,
        nodeType: null,
        messageId: "replace",
        endLine: 53,
        endColumn: 4,
        fix: {
          range: [1003, 1128],
          text: "renderWithFragment ? <Fragment>{children}</Fragment> : <div {...props}>{children}</div>",
        },
      },
      {
        ruleId: "react/jsx-no-useless-fragment",
        severity: 2,
        message:
          "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
        line: 49,
        column: 7,
        nodeType: "JSXElement",
        messageId: "NeedsMoreChildren",
        endLine: 49,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-fragments",
        severity: 2,
        message: "Prefer fragment shorthand over React.Fragment",
        line: 49,
        column: 7,
        nodeType: "JSXElement",
        messageId: "preferFragment",
        endLine: 49,
        endColumn: 38,
        fix: {
          range: [1038, 1069],
          text: "<>{children}</>",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····renderWithFragment·?·(⏎······<Fragment>{children}</Fragment>⏎····)·:·(⏎······<div·{...props}>{children}</div>⏎····)⏎··)` with `renderWithFragment·?·<Fragment>{children}</Fragment>·:·<div·{...props}>{children}</div>`",
        line: 57,
        column: 21,
        nodeType: null,
        messageId: "replace",
        endLine: 63,
        endColumn: 4,
        fix: {
          range: [1237, 1362],
          text: "renderWithFragment ? <Fragment>{children}</Fragment> : <div {...props}>{children}</div>",
        },
      },
      {
        ruleId: "react/jsx-no-useless-fragment",
        severity: 2,
        message:
          "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
        line: 59,
        column: 7,
        nodeType: "JSXElement",
        messageId: "NeedsMoreChildren",
        endLine: 59,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-fragments",
        severity: 2,
        message: "Prefer fragment shorthand over React.Fragment",
        line: 59,
        column: 7,
        nodeType: "JSXElement",
        messageId: "preferFragment",
        endLine: 59,
        endColumn: 38,
        fix: {
          range: [1272, 1303],
          text: "<>{children}</>",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····renderWithFragment·?·(⏎······<Fragment>{children}</Fragment>⏎····)·:·(⏎······<div·{...props}>{children}</div>⏎····)⏎··)` with `renderWithFragment·?·<Fragment>{children}</Fragment>·:·<div·{...props}>{children}</div>`",
        line: 67,
        column: 21,
        nodeType: null,
        messageId: "replace",
        endLine: 73,
        endColumn: 4,
        fix: {
          range: [1471, 1596],
          text: "renderWithFragment ? <Fragment>{children}</Fragment> : <div {...props}>{children}</div>",
        },
      },
      {
        ruleId: "react/jsx-no-useless-fragment",
        severity: 2,
        message:
          "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
        line: 69,
        column: 7,
        nodeType: "JSXElement",
        messageId: "NeedsMoreChildren",
        endLine: 69,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-fragments",
        severity: 2,
        message: "Prefer fragment shorthand over React.Fragment",
        line: 69,
        column: 7,
        nodeType: "JSXElement",
        messageId: "preferFragment",
        endLine: 69,
        endColumn: 38,
        fix: {
          range: [1506, 1537],
          text: "<>{children}</>",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····renderWithFragment·?·(⏎······<Fragment>{children}</Fragment>⏎····)·:·(⏎······<div·{...props}>{children}</div>⏎····)⏎··)` with `renderWithFragment·?·<Fragment>{children}</Fragment>·:·<div·{...props}>{children}</div>`",
        line: 77,
        column: 23,
        nodeType: null,
        messageId: "replace",
        endLine: 83,
        endColumn: 4,
        fix: {
          range: [1709, 1834],
          text: "renderWithFragment ? <Fragment>{children}</Fragment> : <div {...props}>{children}</div>",
        },
      },
      {
        ruleId: "react/jsx-no-useless-fragment",
        severity: 2,
        message:
          "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
        line: 79,
        column: 7,
        nodeType: "JSXElement",
        messageId: "NeedsMoreChildren",
        endLine: 79,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-fragments",
        severity: 2,
        message: "Prefer fragment shorthand over React.Fragment",
        line: 79,
        column: 7,
        nodeType: "JSXElement",
        messageId: "preferFragment",
        endLine: 79,
        endColumn: 38,
        fix: {
          range: [1744, 1775],
          text: "<>{children}</>",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `⏎··renderWithFragment,⏎··children,⏎··viewClassName,⏎··style,⏎··...props⏎` with `·renderWithFragment,·children,·viewClassName,·style,·...props·`",
        line: 86,
        column: 33,
        nodeType: null,
        messageId: "replace",
        endLine: 92,
        endColumn: 1,
        fix: {
          range: [1879, 1951],
          text: " renderWithFragment, children, viewClassName, style, ...props ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····renderWithFragment·?·(⏎······<Fragment>{children}</Fragment>⏎····)·:·(⏎······<div·{...props}>{children}</div>⏎····)⏎··)` with `renderWithFragment·?·<Fragment>{children}</Fragment>·:·<div·{...props}>{children}</div>`",
        line: 93,
        column: 25,
        nodeType: null,
        messageId: "replace",
        endLine: 99,
        endColumn: 4,
        fix: {
          range: [1983, 2108],
          text: "renderWithFragment ? <Fragment>{children}</Fragment> : <div {...props}>{children}</div>",
        },
      },
      {
        ruleId: "react/jsx-no-useless-fragment",
        severity: 2,
        message:
          "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
        line: 95,
        column: 7,
        nodeType: "JSXElement",
        messageId: "NeedsMoreChildren",
        endLine: 95,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-fragments",
        severity: 2,
        message: "Prefer fragment shorthand over React.Fragment",
        line: 95,
        column: 7,
        nodeType: "JSXElement",
        messageId: "preferFragment",
        endLine: 95,
        endColumn: 38,
        fix: {
          range: [2018, 2049],
          text: "<>{children}</>",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····renderWithFragment·?·(⏎······<Fragment>{children}</Fragment>⏎····)·:·(⏎······<div·{...props}>{children}</div>⏎····)⏎··)` with `renderWithFragment·?·<Fragment>{children}</Fragment>·:·<div·{...props}>{children}</div>`",
        line: 103,
        column: 22,
        nodeType: null,
        messageId: "replace",
        endLine: 109,
        endColumn: 4,
        fix: {
          range: [2219, 2344],
          text: "renderWithFragment ? <Fragment>{children}</Fragment> : <div {...props}>{children}</div>",
        },
      },
      {
        ruleId: "react/jsx-no-useless-fragment",
        severity: 2,
        message:
          "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
        line: 105,
        column: 7,
        nodeType: "JSXElement",
        messageId: "NeedsMoreChildren",
        endLine: 105,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-fragments",
        severity: 2,
        message: "Prefer fragment shorthand over React.Fragment",
        line: 105,
        column: 7,
        nodeType: "JSXElement",
        messageId: "preferFragment",
        endLine: 105,
        endColumn: 38,
        fix: {
          range: [2254, 2285],
          text: "<>{children}</>",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····renderWithFragment·?·(⏎······<Fragment>{children}</Fragment>⏎····)·:·(⏎······<div·{...props}>{children}</div>⏎····)⏎··)` with `renderWithFragment·?·<Fragment>{children}</Fragment>·:·<div·{...props}>{children}</div>`",
        line: 113,
        column: 22,
        nodeType: null,
        messageId: "replace",
        endLine: 119,
        endColumn: 4,
        fix: {
          range: [2455, 2580],
          text: "renderWithFragment ? <Fragment>{children}</Fragment> : <div {...props}>{children}</div>",
        },
      },
      {
        ruleId: "react/jsx-no-useless-fragment",
        severity: 2,
        message:
          "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
        line: 115,
        column: 7,
        nodeType: "JSXElement",
        messageId: "NeedsMoreChildren",
        endLine: 115,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-fragments",
        severity: 2,
        message: "Prefer fragment shorthand over React.Fragment",
        line: 115,
        column: 7,
        nodeType: "JSXElement",
        messageId: "preferFragment",
        endLine: 115,
        endColumn: 38,
        fix: {
          range: [2490, 2521],
          text: "<>{children}</>",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····renderWithFragment·?·(⏎······<Fragment>{children}</Fragment>⏎····)·:·(⏎······<div·{...props}>{children}</div>⏎····)⏎··)` with `renderWithFragment·?·<Fragment>{children}</Fragment>·:·<div·{...props}>{children}</div>`",
        line: 123,
        column: 23,
        nodeType: null,
        messageId: "replace",
        endLine: 129,
        endColumn: 4,
        fix: {
          range: [2693, 2818],
          text: "renderWithFragment ? <Fragment>{children}</Fragment> : <div {...props}>{children}</div>",
        },
      },
      {
        ruleId: "react/jsx-no-useless-fragment",
        severity: 2,
        message:
          "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
        line: 125,
        column: 7,
        nodeType: "JSXElement",
        messageId: "NeedsMoreChildren",
        endLine: 125,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-fragments",
        severity: 2,
        message: "Prefer fragment shorthand over React.Fragment",
        line: 125,
        column: 7,
        nodeType: "JSXElement",
        messageId: "preferFragment",
        endLine: 125,
        endColumn: 38,
        fix: {
          range: [2728, 2759],
          text: "<>{children}</>",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `⏎··renderWithFragment,⏎··children,⏎··viewClassName,⏎··style,⏎··condition,⏎··...props⏎` with `·renderWithFragment,·children,·viewClassName,·style,·condition,·...props·`",
        line: 132,
        column: 29,
        nodeType: null,
        messageId: "replace",
        endLine: 139,
        endColumn: 1,
        fix: {
          range: [2859, 2944],
          text: " renderWithFragment, children, viewClassName, style, condition, ...props ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····renderWithFragment·?·(⏎······<Fragment>{children}</Fragment>⏎····)·:·(⏎······<div·{...props}>{children}</div>⏎····)⏎··)` with `renderWithFragment·?·<Fragment>{children}</Fragment>·:·<div·{...props}>{children}</div>`",
        line: 140,
        column: 22,
        nodeType: null,
        messageId: "replace",
        endLine: 146,
        endColumn: 4,
        fix: {
          range: [2973, 3098],
          text: "renderWithFragment ? <Fragment>{children}</Fragment> : <div {...props}>{children}</div>",
        },
      },
      {
        ruleId: "react/jsx-no-useless-fragment",
        severity: 2,
        message:
          "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
        line: 142,
        column: 7,
        nodeType: "JSXElement",
        messageId: "NeedsMoreChildren",
        endLine: 142,
        endColumn: 38,
      },
      {
        ruleId: "react/jsx-fragments",
        severity: 2,
        message: "Prefer fragment shorthand over React.Fragment",
        line: 142,
        column: 7,
        nodeType: "JSXElement",
        messageId: "preferFragment",
        endLine: 142,
        endColumn: 38,
        fix: {
          range: [3008, 3039],
          text: "<>{children}</>",
        },
      },
    ],
    suppressedMessages: [],
    errorCount: 41,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 28,
    fixableWarningCount: 0,
    source:
      "import React, { Fragment } from 'react';\nimport {\n  isAndroid,\n  isBrowser,\n  isIOS,\n  isMobile,\n  isIE,\n  isWinPhone,\n  isSmartTV,\n  isMobileOnly,\n  isWearable,\n  isConsole,\n  isTablet,\n} from '../lib/selectors';\n\nexport const AndroidView = ({ renderWithFragment, children, ...props }) => {\n  return isAndroid ? (\n    renderWithFragment ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <div {...props}>{children}</div>\n    )\n  ) : null;\n};\n\nexport const BrowserView = ({ renderWithFragment, children, ...props }) => {\n  return isBrowser ? (\n    renderWithFragment ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <div {...props}>{children}</div>\n    )\n  ) : null;\n};\n\nexport const IEView = ({ renderWithFragment, children, ...props }) => {\n  return isIE ? (\n    renderWithFragment ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <div {...props}>{children}</div>\n    )\n  ) : null;\n};\n\nexport const IOSView = ({ renderWithFragment, children, ...props }) => {\n  return isIOS ? (\n    renderWithFragment ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <div {...props}>{children}</div>\n    )\n  ) : null;\n};\n\nexport const MobileView = ({ renderWithFragment, children, ...props }) => {\n  return isMobile ? (\n    renderWithFragment ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <div {...props}>{children}</div>\n    )\n  ) : null;\n};\n\nexport const TabletView = ({ renderWithFragment, children, ...props }) => {\n  return isTablet ? (\n    renderWithFragment ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <div {...props}>{children}</div>\n    )\n  ) : null;\n};\n\nexport const WinPhoneView = ({ renderWithFragment, children, ...props }) => {\n  return isWinPhone ? (\n    renderWithFragment ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <div {...props}>{children}</div>\n    )\n  ) : null;\n};\n\nexport const MobileOnlyView = ({\n  renderWithFragment,\n  children,\n  viewClassName,\n  style,\n  ...props\n}) => {\n  return isMobileOnly ? (\n    renderWithFragment ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <div {...props}>{children}</div>\n    )\n  ) : null;\n};\n\nexport const SmartTVView = ({ renderWithFragment, children, ...props }) => {\n  return isSmartTV ? (\n    renderWithFragment ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <div {...props}>{children}</div>\n    )\n  ) : null;\n};\n\nexport const ConsoleView = ({ renderWithFragment, children, ...props }) => {\n  return isConsole ? (\n    renderWithFragment ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <div {...props}>{children}</div>\n    )\n  ) : null;\n};\n\nexport const WearableView = ({ renderWithFragment, children, ...props }) => {\n  return isWearable ? (\n    renderWithFragment ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <div {...props}>{children}</div>\n    )\n  ) : null;\n};\n\nexport const CustomView = ({\n  renderWithFragment,\n  children,\n  viewClassName,\n  style,\n  condition,\n  ...props\n}) => {\n  return condition ? (\n    renderWithFragment ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <div {...props}>{children}</div>\n    )\n  ) : null;\n};\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/components/withOrientationChange.js",
    messages: [
      {
        ruleId: "import/order",
        severity: 2,
        message:
          "There should be at least one empty line between import groups",
        line: 1,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 1,
        endColumn: 27,
        fix: {
          range: [26, 26],
          text: "\n",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `\"react\"` with `'react'`",
        line: 1,
        column: 19,
        nodeType: null,
        messageId: "replace",
        endLine: 1,
        endColumn: 26,
        fix: {
          range: [18, 25],
          text: "'react'",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `\"../lib/selectors\"` with `'../lib/selectors'`",
        line: 2,
        column: 26,
        nodeType: null,
        messageId: "replace",
        endLine: 2,
        endColumn: 44,
        fix: {
          range: [52, 70],
          text: "'../lib/selectors'",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `,`",
        line: 17,
        column: 26,
        nodeType: null,
        messageId: "insert",
        endLine: 17,
        endColumn: 26,
        fix: {
          range: [535, 535],
          text: ",",
        },
      },
      {
        ruleId: "prefer-const",
        severity: 2,
        message: "'orientation' is never reassigned. Use 'const' instead.",
        line: 26,
        column: 11,
        nodeType: "Identifier",
        messageId: "useConst",
        endLine: 26,
        endColumn: 22,
        fix: {
          range: [681, 747],
          text: "const orientation = window.innerWidth > window.innerHeight ? 90 : 0;",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `,`",
        line: 30,
        column: 40,
        nodeType: null,
        messageId: "insert",
        endLine: 30,
        endColumn: 40,
        fix: {
          range: [849, 849],
          text: ",",
        },
      },
      {
        ruleId: "react/sort-comp",
        severity: 2,
        message:
          "onOrientationChange should be placed after componentWillUnmount",
        line: 34,
        column: 5,
        nodeType: "MethodDefinition",
        messageId: "unsortedProps",
        endLine: 36,
        endColumn: 6,
      },
      {
        ruleId: "react/sort-comp",
        severity: 2,
        message:
          "componentDidMount should be placed before handleOrientationChange",
        line: 42,
        column: 5,
        nodeType: "MethodDefinition",
        messageId: "unsortedProps",
        endLine: 53,
        endColumn: 6,
      },
      {
        ruleId: "valid-typeof",
        severity: 2,
        message: "Typeof comparisons should be to string literals.",
        line: 43,
        column: 29,
        nodeType: "Identifier",
        messageId: "notString",
        endLine: 43,
        endColumn: 38,
        suggestions: [
          {
            messageId: "suggestString",
            data: {
              type: "undefined",
            },
            fix: {
              range: [1058, 1067],
              text: '"undefined"',
            },
            desc: 'Use `"undefined"` instead of `undefined`.',
          },
        ],
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `\"load\"` with `'load'`",
        line: 46,
        column: 35,
        nodeType: null,
        messageId: "replace",
        endLine: 46,
        endColumn: 41,
        fix: {
          range: [1201, 1207],
          text: "'load'",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `\"load\"` with `'load'`",
        line: 48,
        column: 38,
        nodeType: null,
        messageId: "replace",
        endLine: 48,
        endColumn: 44,
        fix: {
          range: [1288, 1294],
          text: "'load'",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `\"resize\"` with `'resize'`",
        line: 51,
        column: 33,
        nodeType: null,
        messageId: "replace",
        endLine: 51,
        endColumn: 41,
        fix: {
          range: [1364, 1372],
          text: "'resize'",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `\"resize\"` with `'resize'`",
        line: 56,
        column: 34,
        nodeType: null,
        messageId: "replace",
        endLine: 56,
        endColumn: 42,
        fix: {
          range: [1485, 1493],
          text: "'resize'",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎········<WrappedComponent⏎··········{...this.props}⏎··········isLandscape={this.state.isLandscape}⏎··········isPortrait={this.state.isPortrait}⏎········/>⏎······)` with `<WrappedComponent·{...this.props}·isLandscape={this.state.isLandscape}·isPortrait={this.state.isPortrait}·/>`",
        line: 60,
        column: 14,
        nodeType: null,
        messageId: "replace",
        endLine: 66,
        endColumn: 8,
        fix: {
          range: [1564, 1728],
          text: "<WrappedComponent {...this.props} isLandscape={this.state.isLandscape} isPortrait={this.state.isPortrait} />",
        },
      },
      {
        ruleId: "react/jsx-filename-extension",
        severity: 2,
        message: "JSX not allowed in files with extension '.js'",
        line: 61,
        column: 9,
        nodeType: "JSXElement",
        messageId: "noJSXWithExtension",
        endLine: 65,
        endColumn: 11,
      },
      {
        ruleId: "react/destructuring-assignment",
        severity: 2,
        message: "Must use destructuring state assignment",
        line: 63,
        column: 24,
        nodeType: "MemberExpression",
        messageId: "useDestructAssignment",
        endLine: 63,
        endColumn: 46,
      },
      {
        ruleId: "react/destructuring-assignment",
        severity: 2,
        message: "Must use destructuring state assignment",
        line: 64,
        column: 23,
        nodeType: "MemberExpression",
        messageId: "useDestructAssignment",
        endLine: 64,
        endColumn: 44,
      },
    ],
    suppressedMessages: [],
    errorCount: 17,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 11,
    fixableWarningCount: 0,
    source:
      'import React from "react";\nimport { isMobile } from "../lib/selectors";\n\nexport function withOrientationChange(WrappedComponent) {\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.isEventListenerAdded = false;\n\n      this.handleOrientationChange = this.handleOrientationChange.bind(this);\n      this.onOrientationChange = this.onOrientationChange.bind(this);\n      this.onPageLoad = this.onPageLoad.bind(this);\n\n      this.state = {\n        isLandscape: false,\n        isPortrait: false\n      };\n    }\n\n    handleOrientationChange() {\n      if (!this.isEventListenerAdded) {\n        this.isEventListenerAdded = true;\n      }\n\n      let orientation = window.innerWidth > window.innerHeight ? 90 : 0;\n\n      this.setState({\n        isPortrait: orientation === 0,\n        isLandscape: orientation === 90\n      });\n    }\n\n    onOrientationChange() {\n      this.handleOrientationChange();\n    }\n\n    onPageLoad() {\n      this.handleOrientationChange();\n    }\n\n    componentDidMount() {\n      if (typeof window !== undefined && isMobile) {\n        if (!this.isEventListenerAdded) {\n          this.handleOrientationChange();\n          window.addEventListener("load", this.onPageLoad, false);\n        } else {\n          window.removeEventListener("load", this.onPageLoad, false);\n        }\n\n        window.addEventListener("resize", this.onOrientationChange, false);\n      }\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener("resize", this.onOrientationChange, false);\n    }\n\n    render() {\n      return (\n        <WrappedComponent\n          {...this.props}\n          isLandscape={this.state.isLandscape}\n          isPortrait={this.state.isPortrait}\n        />\n      );\n    }\n  };\n}\n',
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/constants/constants.js",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/constants/typesMaps.js",
    messages: [
      {
        ruleId: "no-unused-vars",
        severity: 2,
        message: "'BrowserNamesMap' is assigned a value but never used.",
        line: 1,
        column: 7,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 1,
        endColumn: 22,
      },
      {
        ruleId: "no-unused-vars",
        severity: 2,
        message: "'VendorNamesMap' is assigned a value but never used.",
        line: 116,
        column: 7,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 116,
        endColumn: 21,
      },
      {
        ruleId: "no-unused-vars",
        severity: 2,
        message: "'EngineNamesMap' is assigned a value but never used.",
        line: 168,
        column: 7,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 168,
        endColumn: 21,
      },
      {
        ruleId: "no-unused-vars",
        severity: 2,
        message: "'CpuArchMap' is assigned a value but never used.",
        line: 187,
        column: 7,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 187,
        endColumn: 17,
      },
      {
        ruleId: "no-unused-vars",
        severity: 2,
        message: "'OsNamesMap' is assigned a value but never used.",
        line: 200,
        column: 7,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 200,
        endColumn: 17,
      },
    ],
    suppressedMessages: [],
    errorCount: 5,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "const BrowserNamesMap = {\n  '2345Explorer': '2345Explorer',\n  '360 Browser': '360 Browser',\n  Amaya: 'Amaya',\n  'Android Browser': 'Android Browser',\n  Arora: 'Arora',\n  Avant: 'Avant',\n  Avast: 'Avast',\n  AVG: 'AVG',\n  BIDUBrowser: 'BIDUBrowser',\n  Baidu: 'Baidu',\n  Basilisk: 'Basilisk',\n  Blazer: 'Blazer',\n  Bolt: 'Bolt',\n  Brave: 'Brave',\n  Bowser: 'Bowser',\n  Camino: 'Camino',\n  Chimera: 'Chimera',\n  'Chrome Headless': 'Chrome Headless',\n  'Chrome WebView': 'Chrome WebView',\n  Chrome: 'Chrome',\n  Chromium: 'Chromium',\n  'Comodo Dragon': 'Comodo Dragon',\n  Dillo: 'Dillo',\n  Dolphin: 'Dolphin',\n  Doris: 'Doris',\n  Edge: 'Edge',\n  Electron: 'Electron',\n  Epiphany: 'Epiphany',\n  Facebook: 'Facebook',\n  Falkon: 'Falkon',\n  Fennec: 'Fennec',\n  Firebird: 'Firebird',\n  'Firefox Reality': 'Firefox Reality',\n  Flock: 'Flock',\n  Flow: 'Flow',\n  GSA: 'GSA',\n  GoBrowser: 'GoBrowser',\n  'ICE Browser': 'ICE Browser',\n  IE: 'IE',\n  IEMobile: 'IEMobile',\n  IceApe: 'IceApe',\n  IceCat: 'IceCat',\n  IceDragon: 'IceDragon',\n  Iceweasel: 'Iceweasel',\n  Instagram: 'Instagram',\n  Iridium: 'Iridium',\n  Iron: 'Iron',\n  Jasmine: 'Jasmine',\n  'K-Meleon': 'K-Meleon',\n  Kindle: 'Kindle',\n  Klar: 'Klar',\n  Konqueror: 'Konqueror',\n  LBBROWSER: 'LBBROWSER',\n  Line: 'Line',\n  Links: 'Links',\n  Lunascape: 'Lunascape',\n  Lynx: 'Lynx',\n  'MIUI Browser': 'MIUI Browser',\n  'Maemo Browser': 'Maemo Browser',\n  Maemo: 'Maemo',\n  Maxthon: 'Maxthon',\n  'MetaSr Midori': 'MetaSr Midori',\n  Minimo: 'Minimo',\n  'Mobile Safari': 'Mobile Safari',\n  Mosaic: 'Mosaic',\n  Mozilla: 'Mozilla',\n  NetFront: 'NetFront',\n  NetSurf: 'NetSurf',\n  Netfront: 'Netfront',\n  Netscape: 'Netscape',\n  NokiaBrowser: 'NokiaBrowser',\n  Obigo: 'Obigo',\n  'Oculus Browser': 'Oculus Browser',\n  OmniWeb: 'OmniWeb',\n  'Opera Coast': 'Opera Coast',\n  'Opera Mini': 'Opera Mini',\n  'Opera Mobi': 'Opera Mobi',\n  'Opera Tablet': 'Opera Tablet',\n  PaleMoon: 'PaleMoon',\n  PhantomJS: 'PhantomJS',\n  Phoenix: 'Phoenix',\n  Polaris: 'Polaris',\n  Puffin: 'Puffin',\n  QQ: 'QQ',\n  QQBrowser: 'QQBrowser',\n  QQBrowserLite: 'QQBrowserLite',\n  Quark: 'Quark',\n  QupZilla: 'QupZilla',\n  RockMelt: 'RockMelt',\n  Safari: 'Safari',\n  'Sailfish Browser': 'Sailfish Browser',\n  'Samsung Browser': 'Samsung Browser',\n  SeaMonkey: 'SeaMonkey',\n  Silk: 'Silk',\n  Skyfire: 'Skyfire',\n  Sleipnir: 'Sleipnir',\n  Slim: 'Slim',\n  SlimBrowser: 'SlimBrowser',\n  Swiftfox: 'Swiftfox',\n  Tesla: 'Tesla',\n  'Tizen Browser': 'Tizen Browser',\n  UCBrowser: 'UCBrowser',\n  'UP.Browser': 'UP.Browser',\n  Vivaldi: 'Vivaldi',\n  Waterfox: 'Waterfox',\n  WeChat: 'WeChat',\n  Weibo: 'Weibo',\n  Yandex: 'Yandex',\n  baidu: 'baidu',\n  iCab: 'iCab',\n  w3m: 'w3m',\n  'Whale Browser': 'Whale Browser',\n};\n\nconst VendorNamesMap = {\n  Acer: 'Acer',\n  Alcatel: 'Alcatel',\n  Amazon: 'Amazon',\n  Apple: 'Apple',\n  Archos: 'Archos',\n  ASUS: 'ASUS',\n  'AT&T': 'AT&T',\n  BenQ: 'BenQ',\n  BlackBerry: 'BlackBerry',\n  Dell: 'Dell',\n  Essential: 'Essential',\n  Fairphone: 'Fairphone',\n  GeeksPhone: 'GeeksPhone',\n  Google: 'Google',\n  HP: 'HP',\n  HTC: 'HTC',\n  Huawei: 'Huawei',\n  Jolla: 'Jolla',\n  Lenovo: 'Lenovo',\n  LG: 'LG',\n  Meizu: 'Meizu',\n  Microsoft: 'Microsoft',\n  Motorola: 'Motorola',\n  Nexian: 'Nexian',\n  Nintendo: 'Nintendo',\n  Nokia: 'Nokia',\n  Nvidia: 'Nvidia',\n  OnePlus: 'OnePlus',\n  OPPO: 'OPPO',\n  Ouya: 'Ouya',\n  Palm: 'Palm',\n  Panasonic: 'Panasonic',\n  Pebble: 'Pebble',\n  Polytron: 'Polytron',\n  Realme: 'Realme',\n  RIM: 'RIM',\n  Roku: 'Roku',\n  Samsung: 'Samsung',\n  Sharp: 'Sharp',\n  Siemens: 'Siemens',\n  'Sony Ericsson': 'Sony Ericsson',\n  Sprint: 'Sprint',\n  Tesla: 'Tesla',\n  Vivo: 'Vivo',\n  Vodafone: 'Vodafone',\n  Xbox: 'Xbox',\n  Xiaomi: 'Xiaomi',\n  Zebra: 'Zebra',\n  ZTE: 'ZTE',\n};\n\nconst EngineNamesMap = {\n  Amaya: 'Amaya',\n  Blink: 'Blink',\n  EdgeHTML: 'EdgeHTML',\n  Flow: 'Flow',\n  Gecko: 'Gecko',\n  Goanna: 'Goanna',\n  iCab: 'iCab',\n  KHTML: 'KHTML',\n  Links: 'Links',\n  Lynx: 'Lynx',\n  NetFront: 'NetFront',\n  NetSurf: 'NetSurf',\n  Presto: 'Presto',\n  Tasman: 'Tasman',\n  Trident: 'Trident',\n  w3m: 'w3m',\n  WebKit: 'WebKit',\n};\nconst CpuArchMap = {\n  '68k': '68k',\n  amd64: 'amd64',\n  'arm[64/hf]': 'arm[64/hf]',\n  avr: 'avr',\n  'ia[32/64]': 'ia[32/64]',\n  'irix[64]': 'irix[64]',\n  'mips[64]': 'mips[64]',\n  'pa-risc': 'pa-risc',\n  ppc: 'ppc',\n  'sparc[64]': 'sparc[64]',\n};\n\nconst OsNamesMap = {\n  AIX: 'AIX',\n  'Amiga OS': 'Amiga OS',\n  'Android[-x86]': 'Android[-x86]',\n  Arch: 'Arch',\n  Bada: 'Bada',\n  BeOS: 'BeOS',\n  BlackBerry: 'BlackBerry',\n  CentOS: 'CentOS',\n  'Chromium OS': 'Chromium OS',\n  Contiki: 'Contiki',\n  Fedora: 'Fedora',\n  'Firefox OS': 'Firefox OS',\n  FreeBSD: 'FreeBSD',\n  Debian: 'Debian',\n  Deepin: 'Deepin',\n  DragonFly: 'DragonFly',\n  'elementary OS': 'elementary OS',\n  Fuchsia: 'Fuchsia',\n  Gentoo: 'Gentoo',\n  GhostBSD: 'GhostBSD',\n  GNU: 'GNU',\n  Haiku: 'Haiku',\n  'HP-UX': 'HP-UX',\n  Hurd: 'Hurd',\n  iOS: 'iOS',\n  Joli: 'Joli',\n  KaiOS: 'KaiOS',\n  Linpus: 'Linpus',\n  Linspire: 'Linspire',\n  Linux: 'Linux',\n  'Mac OS': 'Mac OS',\n  Maemo: 'Maemo',\n  Mageia: 'Mageia',\n  Mandriva: 'Mandriva',\n  Manjaro: 'Manjaro',\n  MeeGo: 'MeeGo',\n  Minix: 'Minix',\n  Mint: 'Mint',\n  'Morph OS': 'Morph OS',\n  NetBSD: 'NetBSD',\n  Nintendo: 'Nintendo',\n  OpenBSD: 'OpenBSD',\n  OpenVMS: 'OpenVMS',\n  'OS/2': 'OS/2',\n  Palm: 'Palm',\n  'PC-BSD': 'PC-BSD',\n  PCLinuxOS: 'PCLinuxOS',\n  Plan9: 'Plan9',\n  PlayStation: 'PlayStation',\n  QNX: 'QNX',\n  Raspbian: 'Raspbian',\n  RedHat: 'RedHat',\n  'RIM Tablet OS': 'RIM Tablet OS',\n  'RISC OS': 'RISC OS',\n  Sabayon: 'Sabayon',\n  Sailfish: 'Sailfish',\n  Series40: 'Series40',\n  Slackware: 'Slackware',\n  Solaris: 'Solaris',\n  SUSE: 'SUSE',\n  Symbian: 'Symbian',\n  Tizen: 'Tizen',\n  Ubuntu: 'Ubuntu',\n  Unix: 'Unix',\n  VectorLinux: 'VectorLinux',\n  WebOS: 'WebOS',\n  'Windows Mobile': 'Windows Mobile',\n  'Windows Phone': 'Windows Phone',\n  Zenwalk: 'Zenwalk',\n};\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/index.js",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/lib/buildSelectors.js",
    messages: [
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 5,
        column: 3,
        nodeType: null,
        messageId: "delete",
        endLine: 5,
        endColumn: 5,
        fix: {
          range: [122, 124],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 7,
        column: 3,
        nodeType: null,
        messageId: "delete",
        endLine: 7,
        endColumn: 5,
        fix: {
          range: [192, 194],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 8,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 8,
        endColumn: 5,
        fix: {
          range: [203, 207],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 9,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 9,
        endColumn: 5,
        fix: {
          range: [251, 255],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 10,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 10,
        endColumn: 9,
        fix: {
          range: [303, 307],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 11,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 11,
        endColumn: 9,
        fix: {
          range: [349, 357],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 12,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 12,
        endColumn: 5,
        fix: {
          range: [399, 403],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 13,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 13,
        endColumn: 9,
        fix: {
          range: [483, 487],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 14,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 14,
        endColumn: 9,
        fix: {
          range: [530, 538],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 15,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 15,
        endColumn: 5,
        fix: {
          range: [585, 589],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 16,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 16,
        endColumn: 9,
        fix: {
          range: [639, 643],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 17,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 17,
        endColumn: 9,
        fix: {
          range: [706, 710],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 18,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 18,
        endColumn: 9,
        fix: {
          range: [750, 758],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 19,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 19,
        endColumn: 9,
        fix: {
          range: [802, 806],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 20,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 20,
        endColumn: 9,
        fix: {
          range: [842, 850],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 21,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 21,
        endColumn: 9,
        fix: {
          range: [888, 896],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 22,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 22,
        endColumn: 9,
        fix: {
          range: [949, 953],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 23,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 23,
        endColumn: 9,
        fix: {
          range: [992, 1000],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 24,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 24,
        endColumn: 9,
        fix: {
          range: [1041, 1049],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 25,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 25,
        endColumn: 5,
        fix: {
          range: [1088, 1092],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 26,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 26,
        endColumn: 9,
        fix: {
          range: [1137, 1141],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 27,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 27,
        endColumn: 9,
        fix: {
          range: [1172, 1180],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 28,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 28,
        endColumn: 5,
        fix: {
          range: [1215, 1219],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 29,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 29,
        endColumn: 9,
        fix: {
          range: [1256, 1260],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 30,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 30,
        endColumn: 9,
        fix: {
          range: [1318, 1326],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 31,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 31,
        endColumn: 9,
        fix: {
          range: [1376, 1384],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 32,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 32,
        endColumn: 9,
        fix: {
          range: [1428, 1436],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 33,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 33,
        endColumn: 9,
        fix: {
          range: [1481, 1489],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 34,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 34,
        endColumn: 9,
        fix: {
          range: [1532, 1540],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 35,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 35,
        endColumn: 5,
        fix: {
          range: [1581, 1585],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 36,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 36,
        endColumn: 9,
        fix: {
          range: [1636, 1644],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 37,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 37,
        endColumn: 9,
        fix: {
          range: [1675, 1683],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 38,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 38,
        endColumn: 9,
        fix: {
          range: [1754, 1758],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 39,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 39,
        endColumn: 9,
        fix: {
          range: [1797, 1805],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 40,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 40,
        endColumn: 9,
        fix: {
          range: [1850, 1854],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 41,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 41,
        endColumn: 5,
        fix: {
          range: [1881, 1885],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 42,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 42,
        endColumn: 9,
        fix: {
          range: [1922, 1926],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 43,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 43,
        endColumn: 9,
        fix: {
          range: [1959, 1967],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 44,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 44,
        endColumn: 5,
        fix: {
          range: [1996, 2000],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 45,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 45,
        endColumn: 9,
        fix: {
          range: [2044, 2048],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 46,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 46,
        endColumn: 5,
        fix: {
          range: [2094, 2098],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 47,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 47,
        endColumn: 9,
        fix: {
          range: [2176, 2184],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 48,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 48,
        endColumn: 9,
        fix: {
          range: [2224, 2228],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 49,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 49,
        endColumn: 9,
        fix: {
          range: [2260, 2268],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 50,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 50,
        endColumn: 9,
        fix: {
          range: [2303, 2311],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 51,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 51,
        endColumn: 9,
        fix: {
          range: [2370, 2374],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 52,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 52,
        endColumn: 9,
        fix: {
          range: [2410, 2418],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 53,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 53,
        endColumn: 3,
        fix: {
          range: [2477, 2479],
          text: "",
        },
      },
    ],
    suppressedMessages: [],
    errorCount: 48,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 48,
    fixableWarningCount: 0,
    source:
      "import * as UAHelper from './parse';\nimport * as types from './types';\n\nexport function buildSelectorsObject(options) {\n    const { device, browser, os, engine, ua } = options || UAHelper;\n\n    return {\n        isSmartTV: types.isSmartTVType(device),\n        isConsole: types.isConsoleType(device),\n        isWearable: types.isWearableType(device),\n        isEmbedded: types.isEmbeddedType(device),\n        isMobileSafari: types.isMobileSafariType(browser) || types.getIPad13(),\n        isChromium: types.isChromiumType(browser),\n        isMobile: types.isMobileAndTabletType(device),\n        isMobileOnly: types.isMobileType(device),\n        isTablet: types.isTabletType(device) || types.getIPad13(),\n        isBrowser: types.isBrowserType(device),\n        isDesktop: types.isBrowserType(device),\n        isAndroid: types.isAndroidType(os),\n        isWinPhone: types.isWinPhoneType(os),\n        isIOS: types.isIOSType(os) || types.getIPad13(),\n        isChrome: types.isChromeType(browser),\n        isFirefox: types.isFirefoxType(browser),\n        isSafari: types.isSafariType(browser),\n        isOpera: types.isOperaType(browser),\n        isIE: types.isIEType(browser),\n        osVersion: types.getOsVersion(os),\n        osName: types.getOsName(os),\n        fullBrowserVersion: types.getBrowserFullVersion(browser),\n        browserVersion: types.getBrowserVersion(browser),\n        browserName: types.getBrowserName(browser),\n        mobileVendor: types.getMobileVendor(device),\n        mobileModel: types.getMobileModel(device),\n        engineName: types.getEngineName(engine),\n        engineVersion: types.getEngineVersion(engine),\n        getUA: types.getUseragent(ua),\n        isEdge: types.isEdgeType(browser) || types.isEdgeChromiumType(ua),\n        isYandex: types.isYandexType(browser),\n        deviceType: types.getDeviceType(device),\n        isIOS13: types.getIOS13(),\n        isIPad13: types.getIPad13(),\n        isIPhone13: types.getIphone13(),\n        isIPod13: types.getIPod13(),\n        isElectron: types.isElectronType(),\n        isEdgeChromium: types.isEdgeChromiumType(ua),\n        isLegacyEdge: types.isEdgeType(browser) && !types.isEdgeChromiumType(ua),\n        isWindows: types.isWindowsType(os),\n        isMacOs: types.isMacOsType(os),\n        isMIUI: types.isMIUIType(browser),\n        isSamsungBrowser: types.isSamsungBrowserType(browser),\n        isWebview: types.isWebviewType(ua),\n        webviewAppVersion: types.getWebviewAppVersion({ ua, os }),\n    };\n}\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/lib/detect.js",
    messages: [
      {
        ruleId: "import/order",
        severity: 2,
        message:
          "There should be at least one empty line between import groups",
        line: 1,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 1,
        endColumn: 37,
        fix: {
          range: [36, 36],
          text: "\n",
        },
      },
      {
        ruleId: "import/order",
        severity: 2,
        message:
          "`./parse` import should occur after import of `../utils/utils`",
        line: 1,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 1,
        endColumn: 37,
        fix: {
          range: [0, 132],
          text: "import * as create from '../utils/payloads';\nimport { checkDeviceType } from '../utils/utils';\nimport * as UAHelper from './parse';\n",
        },
      },
      {
        ruleId: "consistent-return",
        severity: 2,
        message:
          "Expected to return a value at the end of function 'deviceDetect'.",
        line: 5,
        column: 17,
        nodeType: "FunctionDeclaration",
        messageId: "missingReturn",
        endLine: 5,
        endColumn: 29,
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `⏎····?·UAHelper.parseUserAgent(userAgent)⏎···` with `·?·UAHelper.parseUserAgent(userAgent)`",
        line: 6,
        column: 56,
        nodeType: null,
        messageId: "replace",
        endLine: 8,
        endColumn: 4,
        fix: {
          range: [230, 275],
          text: " ? UAHelper.parseUserAgent(userAgent)",
        },
      },
    ],
    suppressedMessages: [],
    errorCount: 4,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 3,
    fixableWarningCount: 0,
    source:
      "import * as UAHelper from './parse';\nimport * as create from '../utils/payloads';\nimport { checkDeviceType } from '../utils/utils';\n\nexport function deviceDetect(userAgent) {\n  const { device, browser, engine, os, ua } = userAgent\n    ? UAHelper.parseUserAgent(userAgent)\n    : UAHelper;\n\n  const type = checkDeviceType(device.type);\n  const { isBrowser, isMobile, isTablet, isSmartTV, isConsole, isWearable, isEmbedded } = type;\n\n  if (isBrowser) {\n    return create.browserPayload(isBrowser, browser, engine, os, ua);\n  }\n\n  if (isSmartTV) {\n    return create.smartTvPayload(isSmartTV, engine, os, ua);\n  }\n\n  if (isConsole) {\n    return create.consolePayload(isConsole, engine, os, ua);\n  }\n\n  if (isMobile) {\n    return create.mobilePayload(type, device, os, ua);\n  }\n\n  if (isTablet) {\n    return create.mobilePayload(type, device, os, ua);\n  }\n\n  if (isWearable) {\n    return create.wearablePayload(isWearable, engine, os, ua);\n  }\n\n  if (isEmbedded) {\n    return create.embeddedPayload(isEmbedded, device, engine, os, ua);\n  }\n}\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/lib/parse.js",
    messages: [
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 15,
        column: 5,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 15,
        endColumn: 18,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "error",
            },
            fix: {
              range: [558, 608],
              text: "",
            },
            desc: "Remove the console.error().",
          },
        ],
      },
      {
        ruleId: "consistent-return",
        severity: 2,
        message: "Arrow function expected no return value.",
        line: 21,
        column: 3,
        nodeType: "ReturnStatement",
        messageId: "unexpectedReturnValue",
        endLine: 30,
        endColumn: 5,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "const UAParser = require('ua-parser-js/dist/ua-parser.min');\n\nexport const ClientUAInstance = new UAParser();\n\nexport const browser = ClientUAInstance.getBrowser();\nexport const cpu = ClientUAInstance.getCPU();\nexport const device = ClientUAInstance.getDevice();\nexport const engine = ClientUAInstance.getEngine();\nexport const os = ClientUAInstance.getOS();\nexport const ua = ClientUAInstance.getUA();\nexport const setUa = (userAgentString) => ClientUAInstance.setUA(userAgentString);\n\nexport const parseUserAgent = (userAgent) => {\n  if (!userAgent) {\n    console.error('No userAgent string was provided');\n    return;\n  }\n\n  const UserAgentInstance = new UAParser(userAgent);\n\n  return {\n    UA: UserAgentInstance,\n    browser: UserAgentInstance.getBrowser(),\n    cpu: UserAgentInstance.getCPU(),\n    device: UserAgentInstance.getDevice(),\n    engine: UserAgentInstance.getEngine(),\n    os: UserAgentInstance.getOS(),\n    ua: UserAgentInstance.getUA(),\n    setUserAgent: (userAgentString) => UserAgentInstance.setUA(userAgentString),\n  };\n};\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/lib/selectors.js",
    messages: [
      {
        ruleId: null,
        fatal: true,
        severity: 2,
        message: "Parsing error: Unexpected token .",
        line: 13,
        column: 51,
        nodeType: null,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 1,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import * as UAHelper from './parse';\nimport * as types from './types';\nimport { buildSelectorsObject } from './buildSelectors';\n\nconst ua = () => {\n    if (typeof window !== 'undefined') {\n        if (window.navigator || navigator) {\n            return window.navigator || navigator;\n        }\n    }\n    return '';\n};\nexport const isWebview = types.isWebviewType(ua()?.userAgent);\n\nexport const isSmartTV = types.isSmartTVType(UAHelper.device);\nexport const isConsole = types.isConsoleType(UAHelper.device);\nexport const isWearable = types.isWearableType(UAHelper.device);\nexport const isEmbedded = types.isEmbeddedType(UAHelper.device);\nexport const isMobileSafari = types.isMobileSafariType(UAHelper.browser);\nexport const isChromium = types.isChromiumType(UAHelper.browser);\n// export const isMobile = types.isMobileAndTabletType(UAHelper.device) || types.getIPad13();\nexport const isMobile = types.isMobileAndTabletType(UAHelper.device) || isWebview;\nexport const isMobileOnly = types.isMobileType(UAHelper.device);\nexport const isTablet = types.isTabletType(UAHelper.device);\nexport const isBrowser = types.isBrowserType(UAHelper.device);\nexport const isDesktop = types.isBrowserType(UAHelper.device);\nexport const isAndroid = types.isAndroidType(UAHelper.os);\nexport const isWinPhone = types.isWinPhoneType(UAHelper.os);\nexport const isIOS = types.isIOSType(UAHelper.os);\nexport const isChrome = types.isChromeType(UAHelper.browser);\nexport const isFirefox = types.isFirefoxType(UAHelper.browser);\nexport const isSafari = types.isSafariType(UAHelper.browser);\nexport const isOpera = types.isOperaType(UAHelper.browser);\nexport const isIE = types.isIEType(UAHelper.browser);\nexport const osVersion = types.getOsVersion(UAHelper.os);\nexport const osName = types.getOsName(UAHelper.os);\nexport const fullBrowserVersion = types.getBrowserFullVersion(UAHelper.browser);\nexport const browserVersion = types.getBrowserVersion(UAHelper.browser);\nexport const browserName = types.getBrowserName(UAHelper.browser);\nexport const mobileVendor = types.getMobileVendor(UAHelper.device);\nexport const mobileModel = types.getMobileModel(UAHelper.device);\nexport const engineName = types.getEngineName(UAHelper.engine);\nexport const engineVersion = types.getEngineVersion(UAHelper.engine);\nexport const getUA = types.getUseragent(UAHelper.ua);\nexport const isEdge = types.isEdgeType(UAHelper.browser) || types.isEdgeChromiumType(UAHelper.ua);\nexport const isYandex = types.isYandexType(UAHelper.browser);\nexport const deviceType = types.getDeviceType(UAHelper.device);\nexport const isIOS13 = types.getIOS13();\nexport const isIPad13 = types.getIPad13();\nexport const isIPhone13 = types.getIphone13();\nexport const isIPod13 = types.getIPod13();\nexport const isElectron = types.isElectronType();\nexport const isEdgeChromium = types.isEdgeChromiumType(UAHelper.ua);\nexport const isLegacyEdge = types.isEdgeType(UAHelper.browser) && !types.isEdgeChromiumType(UAHelper.ua);\nexport const isWindows = types.isWindowsType(UAHelper.os);\nexport const isMacOs = types.isMacOsType(UAHelper.os);\nexport const isMIUI = types.isMIUIType(UAHelper.browser);\nexport const isSamsungBrowser = types.isSamsungBrowserType(UAHelper.browser);\nexport const webviewAppVersion = types.getWebviewAppVersion({ ua: UAHelper.ua, os: UAHelper.os });\n\nexport const getSelectorsByUserAgent = (userAgent) => {\n    if (!userAgent || typeof userAgent !== 'string') {\n        console.error('No valid user agent string was provided');\n        return;\n    }\n\n    const { device, browser, os, engine, ua } = UAHelper.parseUserAgent(userAgent);\n    return buildSelectorsObject({ device, browser, os, engine, ua });\n};\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/lib/types.js",
    messages: [
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 48,
        column: 3,
        nodeType: null,
        messageId: "delete",
        endLine: 48,
        endColumn: 5,
        fix: {
          range: [2915, 2917],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 49,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 49,
        endColumn: 3,
        fix: {
          range: [2953, 2955],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 51,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 51,
        endColumn: 3,
        fix: {
          range: [3022, 3024],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 56,
        column: 3,
        nodeType: null,
        messageId: "delete",
        endLine: 56,
        endColumn: 5,
        fix: {
          range: [3220, 3222],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 57,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 57,
        endColumn: 3,
        fix: {
          range: [3258, 3260],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `····` with `··`",
        line: 65,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 65,
        endColumn: 5,
        fix: {
          range: [3678, 3682],
          text: "  ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 66,
        column: 5,
        nodeType: null,
        messageId: "delete",
        endLine: 66,
        endColumn: 9,
        fix: {
          range: [3712, 3716],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `····` with `··`",
        line: 67,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 67,
        endColumn: 5,
        fix: {
          range: [3729, 3733],
          text: "  ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 69,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 69,
        endColumn: 3,
        fix: {
          range: [3736, 3738],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 70,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 70,
        endColumn: 9,
        fix: {
          range: [3780, 3788],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 71,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 71,
        endColumn: 5,
        fix: {
          range: [3843, 3847],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `············` with `······`",
        line: 72,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 72,
        endColumn: 13,
        fix: {
          range: [3939, 3951],
          text: "      ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `············` with `······`",
        line: 73,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 73,
        endColumn: 13,
        fix: {
          range: [3959, 3971],
          text: "      ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `············` with `······`",
        line: 74,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 74,
        endColumn: 13,
        fix: {
          range: [3983, 3995],
          text: "      ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 76,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 76,
        endColumn: 5,
        fix: {
          range: [4035, 4039],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 77,
        column: 3,
        nodeType: null,
        messageId: "delete",
        endLine: 77,
        endColumn: 5,
        fix: {
          range: [4178, 4180],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 79,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 79,
        endColumn: 3,
        fix: {
          range: [4183, 4185],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `········` with `····`",
        line: 80,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 80,
        endColumn: 9,
        fix: {
          range: [4223, 4231],
          text: "    ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 81,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 81,
        endColumn: 5,
        fix: {
          range: [4290, 4294],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `············` with `······`",
        line: 82,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 82,
        endColumn: 13,
        fix: {
          range: [4386, 4398],
          text: "      ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Replace `············` with `······`",
        line: 83,
        column: 1,
        nodeType: null,
        messageId: "replace",
        endLine: 83,
        endColumn: 13,
        fix: {
          range: [4406, 4418],
          text: "      ",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `······`",
        line: 84,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 84,
        endColumn: 7,
        fix: {
          range: [4430, 4436],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `····`",
        line: 86,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 86,
        endColumn: 5,
        fix: {
          range: [4482, 4486],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 87,
        column: 3,
        nodeType: null,
        messageId: "delete",
        endLine: 87,
        endColumn: 5,
        fix: {
          range: [4625, 4627],
          text: "",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Delete `··`",
        line: 89,
        column: 1,
        nodeType: null,
        messageId: "delete",
        endLine: 89,
        endColumn: 3,
        fix: {
          range: [4630, 4632],
          text: "",
        },
      },
    ],
    suppressedMessages: [],
    errorCount: 25,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 25,
    fixableWarningCount: 0,
    source:
      "import { BrowserTypes, DeviceTypes, OsTypes } from '../constants/constants';\nimport { getNavigatorInstance, isIOS13Check, setDefaults } from '../utils/utils';\n\n// device types\nexport const isMobileType = ({ type }) => type === DeviceTypes.Mobile;\nexport const isTabletType = ({ type }) => type === DeviceTypes.Tablet;\nexport const isMobileAndTabletType = ({ type }) => type === DeviceTypes.Mobile || type === DeviceTypes.Tablet;\nexport const isSmartTVType = ({ type }) => type === DeviceTypes.SmartTv;\nexport const isBrowserType = ({ type }) => type === DeviceTypes.Browser;\nexport const isWearableType = ({ type }) => type === DeviceTypes.Wearable;\nexport const isConsoleType = ({ type }) => type === DeviceTypes.Console;\nexport const isEmbeddedType = ({ type }) => type === DeviceTypes.Embedded;\nexport const getMobileVendor = ({ vendor }) => setDefaults(vendor);\nexport const getMobileModel = ({ model }) => setDefaults(model);\nexport const getDeviceType = ({ type }) => setDefaults(type, 'browser');\nexport const isWebviewType = (userAgent) => (typeof userAgent === 'string' ? userAgent.toLowerCase().includes('tving') : false);\n\n// os types\nexport const isAndroidType = ({ name }) => name === OsTypes.Android;\nexport const isWindowsType = ({ name }) => name === OsTypes.Windows;\nexport const isMacOsType = ({ name }) => name === OsTypes.MAC_OS;\nexport const isWinPhoneType = ({ name }) => name === OsTypes.WindowsPhone;\nexport const isIOSType = ({ name }) => name === OsTypes.IOS;\nexport const getOsVersion = ({ version }) => setDefaults(version);\nexport const getOsName = ({ name }) => setDefaults(name);\n\n// browser types\nexport const isChromeType = ({ name }) => name === BrowserTypes.Chrome;\nexport const isFirefoxType = ({ name }) => name === BrowserTypes.Firefox;\nexport const isChromiumType = ({ name }) => name === BrowserTypes.Chromium;\nexport const isEdgeType = ({ name }) => name === BrowserTypes.Edge;\nexport const isYandexType = ({ name }) => name === BrowserTypes.Yandex;\nexport const isSafariType = ({ name }) => name === BrowserTypes.Safari || name === BrowserTypes.MobileSafari;\nexport const isMobileSafariType = ({ name }) => name === BrowserTypes.MobileSafari;\nexport const isOperaType = ({ name }) => name === BrowserTypes.Opera;\nexport const isIEType = ({ name }) => name === BrowserTypes.InternetExplorer || name === BrowserTypes.Ie;\nexport const isMIUIType = ({ name }) => name === BrowserTypes.MIUI;\nexport const isSamsungBrowserType = ({ name }) => name === BrowserTypes.SamsungBrowser;\nexport const getBrowserFullVersion = ({ version }) => setDefaults(version);\nexport const getBrowserVersion = ({ major }) => setDefaults(major);\nexport const getBrowserName = ({ name }) => setDefaults(name);\n\n// engine types\nexport const getEngineName = ({ name }) => setDefaults(name);\nexport const getEngineVersion = ({ version }) => setDefaults(version);\n\nexport const isElectronType = () => {\n    const nav = getNavigatorInstance();\n    const ua = nav && nav.userAgent && nav.userAgent.toLowerCase();\n\n    return typeof ua === 'string' ? /electron/.test(ua) : false;\n};\nexport const isEdgeChromiumType = (ua) => typeof ua === 'string' && ua.indexOf('Edg/') !== -1;\n\nexport const getIOS13 = () => {\n    const nav = getNavigatorInstance();\n    return nav && (/iPad|iPhone|iPod/.test(nav.platform) || (nav.platform === 'MacIntel' && nav.maxTouchPoints > 1)) && !window.MSStream;\n};\nexport const getIPad13 = () => isIOS13Check('iPad');\nexport const getIphone13 = () => isIOS13Check('iPhone');\nexport const getIPod13 = () => isIOS13Check('iPod');\nexport const getUseragent = (userAg) => setDefaults(userAg);\n\nexport const getWebviewAppVersion = ({ ua, os }) => {\n    if (!isWebviewType(ua)) {\n        return null;\n    }\n\n    if (isAndroidType({ name: os.name })) {\n        const splittedTexts = ua.toUpperCase().split('TVING');\n        const [majorOrYear, minorOrWeekNumber, patch] = splittedTexts[splittedTexts.length - 1]\n            .trim()\n            .split('.')\n            .map((n) => n.replace(/[^0-9]/g, ''));\n\n        return `${(majorOrYear || '0').padStart(2, '0')}.${(minorOrWeekNumber || '0').padStart(2, '0')}.${(patch || '0').padStart(2, '0')}`;\n    }\n\n    if (isIOSType({ name: os.name })) {\n        const splittedTexts = ua.toUpperCase().split('TVINGAPP/');\n        const [majorOrYear, minorOrWeekNumber, patch] = splittedTexts[splittedTexts.length - 1]\n            .trim()\n            .split('.')\n            .map((n) => n.replace(/[^0-9]/g, ''));\n\n        return `${(majorOrYear || '0').padStart(2, '0')}.${(minorOrWeekNumber || '0').padStart(2, '0')}.${(patch || '0').padStart(2, '0')}`;\n    }\n\n    return null;\n};\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/utils/payloads.js",
    messages: [
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `;`",
        line: 60,
        column: 3,
        nodeType: null,
        messageId: "insert",
        endLine: 60,
        endColumn: 3,
        fix: {
          range: [1856, 1856],
          text: ";",
        },
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 1,
    fixableWarningCount: 0,
    source:
      "import { setDefaults } from './utils';\n\nexport const browserPayload = (isBrowser, browser, engine, os, ua) => ({\n  isBrowser,\n  browserMajorVersion: setDefaults(browser.major),\n  browserFullVersion: setDefaults(browser.version),\n  browserName: setDefaults(browser.name),\n  engineName: setDefaults(engine.name),\n  engineVersion: setDefaults(engine.version),\n  osName: setDefaults(os.name),\n  osVersion: setDefaults(os.version),\n  userAgent: setDefaults(ua),\n});\n\nexport const mobilePayload = (type, device, os, ua) => ({\n  ...type,\n  vendor: setDefaults(device.vendor),\n  model: setDefaults(device.model),\n  os: setDefaults(os.name),\n  osVersion: setDefaults(os.version),\n  ua: setDefaults(ua),\n});\n\nexport const smartTvPayload = (isSmartTV, engine, os, ua) => ({\n  isSmartTV,\n  engineName: setDefaults(engine.name),\n  engineVersion: setDefaults(engine.version),\n  osName: setDefaults(os.name),\n  osVersion: setDefaults(os.version),\n  userAgent: setDefaults(ua),\n});\n\nexport const consolePayload = (isConsole, engine, os, ua) => ({\n  isConsole,\n  engineName: setDefaults(engine.name),\n  engineVersion: setDefaults(engine.version),\n  osName: setDefaults(os.name),\n  osVersion: setDefaults(os.version),\n  userAgent: setDefaults(ua),\n});\n\nexport const wearablePayload = (isWearable, engine, os, ua) => ({\n  isWearable,\n  engineName: setDefaults(engine.name),\n  engineVersion: setDefaults(engine.version),\n  osName: setDefaults(os.name),\n  osVersion: setDefaults(os.version),\n  userAgent: setDefaults(ua),\n});\n\nexport const embeddedPayload = (isEmbedded, device, engine, os, ua) => ({\n  isEmbedded,\n  vendor: setDefaults(device.vendor),\n  model: setDefaults(device.model),\n  engineName: setDefaults(engine.name),\n  engineVersion: setDefaults(engine.version),\n  osName: setDefaults(os.name),\n  osVersion: setDefaults(os.version),\n  userAgent: setDefaults(ua),\n})\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device-detect/utils/utils.js",
    messages: [
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `;`",
        line: 19,
        column: 34,
        nodeType: null,
        messageId: "insert",
        endLine: 19,
        endColumn: 34,
        fix: {
          range: [634, 634],
          text: ";",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message: "Insert `;`",
        line: 41,
        column: 60,
        nodeType: null,
        messageId: "insert",
        endLine: 41,
        endColumn: 60,
        fix: {
          range: [1107, 1107],
          text: ";",
        },
      },
      {
        ruleId: "no-underscore-dangle",
        severity: 2,
        message: "Unexpected dangling '_' in '__defineGetter__'.",
        line: 44,
        column: 3,
        nodeType: "MemberExpression",
        messageId: "unexpectedUnderscore",
        endLine: 44,
        endColumn: 36,
      },
      {
        ruleId: "no-restricted-properties",
        severity: 2,
        message:
          "'__defineGetter__' is restricted from being used. Please use Object.defineProperty instead.",
        line: 44,
        column: 3,
        nodeType: "MemberExpression",
        messageId: "restrictedProperty",
        endLine: 44,
        endColumn: 36,
      },
      {
        ruleId: "no-unneeded-ternary",
        severity: 2,
        message:
          "Unnecessary use of conditional expression for default assignment.",
        line: 47,
        column: 48,
        nodeType: "ConditionalExpression",
        messageId: "unnecessaryConditionalAssignment",
        endLine: 47,
        endColumn: 57,
        fix: {
          range: [1273, 1282],
          text: "p || d",
        },
      },
      {
        ruleId: "prettier/prettier",
        severity: 2,
        message:
          "Replace `(⏎····nav·&&⏎····nav.platform·&&⏎····(nav.platform.indexOf(type)·!==·-1·||⏎······(nav.platform·===·'MacIntel'·&&·nav.maxTouchPoints·>·1·&&·!window.MSStream))⏎··` with `nav·&&·nav.platform·&&·(nav.platform.indexOf(type)·!==·-1·||·(nav.platform·===·'MacIntel'·&&·nav.maxTouchPoints·>·1·&&·!window.MSStream)`",
        line: 61,
        column: 10,
        nodeType: null,
        messageId: "replace",
        endLine: 66,
        endColumn: 3,
        fix: {
          range: [1572, 1732],
          text: "nav && nav.platform && (nav.platform.indexOf(type) !== -1 || (nav.platform === 'MacIntel' && nav.maxTouchPoints > 1 && !window.MSStream)",
        },
      },
    ],
    suppressedMessages: [],
    errorCount: 6,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 4,
    fixableWarningCount: 0,
    source:
      "import { DeviceTypes, InitialDeviceTypes, BrowserTypes } from '../constants/constants';\nimport { setUa } from '../lib/parse';\n\nexport const checkDeviceType = (type) => {\n  switch (type) {\n    case DeviceTypes.Mobile:\n      return { isMobile: true };\n    case DeviceTypes.Tablet:\n      return { isTablet: true };\n    case DeviceTypes.SmartTv:\n      return { isSmartTV: true };\n    case DeviceTypes.Console:\n      return { isConsole: true };\n    case DeviceTypes.Wearable:\n      return { isWearable: true };\n    case DeviceTypes.Browser:\n      return { isBrowser: true };\n    case DeviceTypes.Embedded:\n      return { isEmbedded: true }\n    default:\n      return InitialDeviceTypes;\n  }\n};\n\nexport const getCurrentBrowser = (name) => {\n  switch (name) {\n    case BrowserTypes.Chrome:\n    case BrowserTypes.Opera:\n    case BrowserTypes.Firefox:\n    case BrowserTypes.Yandex:\n    case BrowserTypes.Safari:\n    case BrowserTypes.Ie:\n    case BrowserTypes.Edge:\n    case BrowserTypes.Chromium:\n      return true;\n    default:\n      return false;\n  }\n};\n\nexport const setUserAgent = (userAgent) => setUa(userAgent)\n\nexport const mockUserAgent = (userAgent) => {\n  window.navigator.__defineGetter__('userAgent', () => userAgent);\n};\n\nexport const setDefaults = (p, d = 'none') => (p ? p : d);\n\nexport const getNavigatorInstance = () => {\n  if (typeof window !== 'undefined') {\n    if (window.navigator || navigator) {\n      return window.navigator || navigator;\n    }\n  }\n\n  return false;\n};\n\nexport const isIOS13Check = (type) => {\n  const nav = getNavigatorInstance();\n  return (\n    nav &&\n    nav.platform &&\n    (nav.platform.indexOf(type) !== -1 ||\n      (nav.platform === 'MacIntel' && nav.maxTouchPoints > 1 && !window.MSStream))\n  );\n};\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device/DeviceManager.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device/androidtv/AndroidTvDeviceManager.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device/androidtv/types.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device/index.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device/tizen/TizenDeviceManager.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "@typescript-eslint/triple-slash-reference",
        severity: 2,
        message:
          "Do not use a triple slash reference for ./index.d.ts, use `import` style instead.",
        line: 2,
        column: 1,
        nodeType: "Line",
        messageId: "tripleSlashReference",
        endLine: 2,
        endColumn: 38,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 142,
        column: 7,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 142,
        endColumn: 18,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "log",
            },
            fix: {
              range: [5158, 5271],
              text: "",
            },
            desc: "Remove the console.log().",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device/tizen/types.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device/types.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device/web/WebDeviceManager.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/device/webos/WebOSDeviceManager.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/fixed-image-list/FixedImageList.style.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/fixed-image-list/FixedImageList.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/ga/getContentTypeForEventAction/getContentTypeForEventAction.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/http/httpGet.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/http/httpGet.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/http/httpPost.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/http/httpPost.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/http/index.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/index.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/network/forceNavigatorOnline.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/player/getProgressPointerPosition/getProgressPointerPosition.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/calculateItemWidth.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/calculateTextWidth.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/calculateTvItemWidth.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/convertImageUrl.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/convertLegacyUrl.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/convertToTvingBand.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/convertToTvingItem.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/convertTvBandType.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/convertTvItemType.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getActor.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getAgeFromGradeCode.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getContentLabels.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'drmYn' is assigned a value but never used.",
        line: 74,
        column: 15,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 74,
        endColumn: 20,
      },
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'drmYn' is assigned a value but never used.",
        line: 150,
        column: 15,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 150,
        endColumn: 20,
      },
    ],
    suppressedMessages: [],
    errorCount: 2,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { SeasonMovieContent } from '../../apis/types';\nimport { API_URLS } from '../../constants/apiConstants';\nimport { CONTENT_LABEL_TYPE, DEVICE_TYPE } from '../../constants/commonConstants';\nimport { ItemResponse } from '../../proxies/types';\nimport getDeviceType from '../common/getDeviceType/getDeviceType';\n\nimport getProgramMovieEpisodeChannel from './getProgramMovieEpisodeChannel';\n\nconst getContentLabels = (bandApiUrl: string, itemResponse: ItemResponse): CONTENT_LABEL_TYPE[] => {\n  const contentLabelArr: CONTENT_LABEL_TYPE[] = [];\n  const { program, episode, movie } = getProgramMovieEpisodeChannel(bandApiUrl, itemResponse);\n  const deviceType = getDeviceType();\n  if (program) {\n    const { quickup_yn: quickUpYn } = program;\n    if (quickUpYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.QUICK_VOD);\n    }\n  }\n\n  if (episode) {\n    const { ko_cc_yn: explainSubtitleYn, uhd_4k_yn: uhd4kYn, pip_cliptype: pipClipType, hdr_type: hdrType, audio_type: audioType } = episode;\n\n    if (bandApiUrl === API_URLS.FREQUENCY_PROGRAM) {\n      if (pipClipType === 'C012') {\n        contentLabelArr.push(CONTENT_LABEL_TYPE.QUICK_VOD);\n      }\n    }\n\n    if (uhd4kYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.UHD_4K);\n    }\n\n    // HDR\n    if (hdrType === '01') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.HDR);\n    } else if (hdrType === '02') {\n      if (deviceType === DEVICE_TYPE.TIZEN) {\n        contentLabelArr.push(CONTENT_LABEL_TYPE.HDR10_PLUS);\n      } else {\n        contentLabelArr.push(CONTENT_LABEL_TYPE.HDR);\n      }\n    } else if (hdrType === '03') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DOLBY_VISION);\n    }\n\n    if (audioType === '01') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DOLBY_51);\n    } else if (audioType === '03') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DTX);\n    }\n\n    if (explainSubtitleYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.EXPLAIN_SUBTITLE);\n    }\n  }\n\n  if (program) {\n    // episodes의 경우 program의 free_yn을 봐야 하는데, 노출 순서가 맨 마지막이라 여기에서 체크 후 label 넣어줌\n    // content_info도 program, episode 동일 데이터이므로 여기서 처리\n    const { free_yn: freeYn } = program;\n    if ((bandApiUrl === API_URLS.EPISODES || bandApiUrl === API_URLS.CONTENT_INFO) && freeYn?.toUpperCase() === 'Y') {\n      // 프로그램 상세, episodes(더보기 리스트) 메타 영역에 노출\n      contentLabelArr.push(CONTENT_LABEL_TYPE.FREE_META);\n    }\n  }\n\n  if (movie) {\n    const {\n      uhd_4k_yn: uhd4kYn,\n      subtitle_ver_yn: subtitleYn,\n      audio_type: audioType,\n      dub_ver_yn: dubYn,\n      hdr_type: hdrType,\n      drm_yn: drmYn,\n      ko_cc_yn: explainSubtitleYn,\n      free_yn: freeYn,\n    } = movie;\n\n    if (uhd4kYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.UHD_4K);\n    }\n\n    // 자막판\n    if (subtitleYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.SUBTITLE);\n    }\n    // 더빙판\n    if (dubYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DUBBING);\n    }\n\n    // HDR\n    if (hdrType === '01') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.HDR);\n    } else if (hdrType === '02') {\n      if (deviceType === DEVICE_TYPE.TIZEN) {\n        contentLabelArr.push(CONTENT_LABEL_TYPE.HDR10_PLUS);\n      } else {\n        contentLabelArr.push(CONTENT_LABEL_TYPE.HDR);\n      }\n    } else if (hdrType === '03') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DOLBY_VISION);\n    }\n\n    if (audioType === '01') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DOLBY_51);\n    } else if (audioType === '03') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DTX);\n    }\n    //\n    // // 개별구매\n    // if (billingPackageTag?.toUpperCase() === 'SINGLE') {\n    //   contentLabelArr.push(CONTENT_LABEL_TYPE.PURCHASE);\n    // }\n    //\n    // // 이벤트\n    // if (eventYn?.toUpperCase() === 'Y') {\n    //   contentLabelArr.push(CONTENT_LABEL_TYPE.EVENT);\n    // }\n    // // 극장동시\n    // if (cineSameYn?.toUpperCase() === 'Y') {\n    //   contentLabelArr.push(CONTENT_LABEL_TYPE.CINE_SAME);\n    // }\n    //\n    // // 최초 개봉\n    // if (firstOpenYn?.toUpperCase() === 'Y') {\n    //   contentLabelArr.push(CONTENT_LABEL_TYPE.FIRST_OPEN);\n    // }\n\n    if (explainSubtitleYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.EXPLAIN_SUBTITLE);\n    }\n\n    if ((bandApiUrl === API_URLS.CONTENT_INFO || bandApiUrl === API_URLS.MOVIES) && freeYn?.toUpperCase() === 'Y') {\n      // 영화 상세, movies(더보기 리스트) 메타 영역에 노출\n      contentLabelArr.push(CONTENT_LABEL_TYPE.FREE_META);\n    }\n  }\n\n  if (bandApiUrl === API_URLS.SEASON_MOVIE) {\n    const {\n      uhd_4k_yn: uhd4kYn,\n      subtitle_ver_yn: subtitleYn,\n      audio_type: audioType,\n      dub_ver_yn: dubYn,\n      hdr_type: hdrType,\n      billing_package_tag: billingPackageTag,\n      cine_same_yn: cineSameYn,\n      first_open_yn: firstOpenYn,\n      drm_yn: drmYn,\n      ko_cc_yn: explainSubtitleYn,\n    } = itemResponse as SeasonMovieContent;\n\n    if (uhd4kYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.UHD_4K);\n    }\n\n    // 자막판\n    if (subtitleYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.SUBTITLE);\n    }\n    // 더빙판\n    if (dubYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DUBBING);\n    }\n\n    // HDR\n    if (hdrType === '01') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.HDR);\n    } else if (hdrType === '02') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.HDR10_PLUS);\n    } else if (hdrType === '03') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DOLBY_VISION);\n    }\n\n    if (audioType === '01') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DOLBY_51);\n    } else if (audioType === '03') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DTX);\n    }\n\n    // 개별구매\n    if (billingPackageTag?.toUpperCase() === 'SINGLE') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.PURCHASE);\n    }\n\n    // 극장동시\n    if (cineSameYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.CINE_SAME);\n    }\n\n    // 최초 개봉\n    if (firstOpenYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.FIRST_OPEN);\n    }\n\n    if (explainSubtitleYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.EXPLAIN_SUBTITLE);\n    }\n  }\n\n  return contentLabelArr;\n};\n\nexport default getContentLabels;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getContentTypeFromMediaCode.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getDayFromDayCode.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getDirector.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getEpisodeContentLabels.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'drmYn' is assigned a value but never used.",
        line: 36,
        column: 15,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 36,
        endColumn: 20,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { CONTENT_LABEL_TYPE } from '../../constants/commonConstants';\nimport { ItemResponse } from '../../proxies/types';\n\nimport getProgramMovieEpisodeChannel from './getProgramMovieEpisodeChannel';\n\nconst getEpisodeContentLabels = (bandApiUrl: string, itemResponse: ItemResponse): CONTENT_LABEL_TYPE[] => {\n  const contentLabelArr: CONTENT_LABEL_TYPE[] = [];\n  const { episode, movie } = getProgramMovieEpisodeChannel(bandApiUrl, itemResponse);\n\n  if (episode) {\n    const { ko_cc_yn: explainSubtitleYn, uhd_4k_yn: uhd4kYn, pip_cliptype: quickupYn } = episode;\n\n    if (quickupYn === 'C012') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.QUICK_VOD);\n    }\n\n    if (explainSubtitleYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.EXPLAIN_SUBTITLE);\n    }\n    if (uhd4kYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.UHD_4K);\n    }\n  }\n\n  if (movie) {\n    const {\n      uhd_4k_yn: uhd4kYn,\n      subtitle_ver_yn: subtitleYn,\n      audio_type: audioType,\n      dub_ver_yn: dubYn,\n      hdr_type: hdrType,\n      billing_package_tag: billingPackageTag,\n      event_yn: eventYn,\n      cine_same_yn: cineSameYn,\n      first_open_yn: firstOpenYn,\n      drm_yn: drmYn,\n      ko_cc_yn: explainSubtitleYn,\n    } = movie;\n\n    if (uhd4kYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.UHD_4K);\n    }\n\n    // 자막판\n    if (subtitleYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.SUBTITLE);\n    }\n    // 더빙판\n    if (dubYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DUBBING);\n    }\n\n    // HDR\n    if (hdrType === '01') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.HDR);\n    } else if (hdrType === '02') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.HDR10_PLUS);\n    } else if (hdrType === '03') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DOLBY_VISION);\n    }\n\n    if (audioType === '01') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DOLBY_51);\n    } else if (audioType === '03') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.DTX);\n    }\n\n    // 개별구매\n    if (billingPackageTag?.toUpperCase() === 'SINGLE') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.PURCHASE);\n    }\n\n    // 이벤트\n    if (eventYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.EVENT);\n    }\n    // 극장동시\n    if (cineSameYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.CINE_SAME);\n    }\n\n    // 최초 개봉\n    if (firstOpenYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.FIRST_OPEN);\n    }\n\n    if (explainSubtitleYn?.toUpperCase() === 'Y') {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.EXPLAIN_SUBTITLE);\n    }\n  }\n\n  return contentLabelArr;\n};\n\nexport default getEpisodeContentLabels;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getEpisodeMetaTexts.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getImageTitleUrl.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'images'.",
        line: 15,
        column: 5,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 15,
        endColumn: 11,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getLabelType.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getMetaTexts.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getPosterUrl.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'images'.",
        line: 42,
        column: 11,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 42,
        endColumn: 17,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'images'.",
        line: 66,
        column: 11,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 66,
        endColumn: 17,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'movieImages'.",
        line: 136,
        column: 11,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 136,
        endColumn: 22,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message:
          "Assignment to property of function parameter 'programImages'.",
        line: 149,
        column: 11,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 149,
        endColumn: 24,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message:
          "Assignment to property of function parameter 'episodeImages'.",
        line: 155,
        column: 11,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 155,
        endColumn: 24,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message:
          "Assignment to property of function parameter 'programImages'.",
        line: 167,
        column: 11,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 167,
        endColumn: 24,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getProgramBroadcastDate.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getProgramMovieEpisodeChannel.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getRatingType.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getStartDate.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getSynopsis.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getTextTitle.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getThumbnailUrl.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'images'.",
        line: 30,
        column: 11,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 30,
        endColumn: 17,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'images'.",
        line: 51,
        column: 11,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 51,
        endColumn: 17,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'images'.",
        line: 76,
        column: 11,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 76,
        endColumn: 17,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getTvBroadcastDate.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getTvContentLabels.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'isDrm' is assigned a value but never used.",
        line: 10,
        column: 47,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 10,
        endColumn: 52,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { CONTENT_LABEL_TYPE, DEVICE_TYPE } from '../../constants/commonConstants';\nimport { TvItem } from '../../proxies/types';\nimport getDeviceType from '../common/getDeviceType/getDeviceType';\n\nconst getTvContentLabels = (tvItem: TvItem): CONTENT_LABEL_TYPE[] => {\n  const contentLabelArr: CONTENT_LABEL_TYPE[] = [];\n  const deviceType = getDeviceType();\n\n  const { label, hdrCode, audioCode } = tvItem;\n  const { isExplainSubtitle, isUhd4k, isFree, isDrm, isSubtitle, isDubbing, isQuickVod } = label || {};\n\n  if (isQuickVod) {\n    contentLabelArr.push(CONTENT_LABEL_TYPE.QUICK_VOD);\n  }\n\n  if (isUhd4k) {\n    contentLabelArr.push(CONTENT_LABEL_TYPE.UHD_4K);\n  }\n\n  // 자막판\n  if (isSubtitle) {\n    contentLabelArr.push(CONTENT_LABEL_TYPE.SUBTITLE);\n  }\n  // 더빙판\n  if (isDubbing) {\n    contentLabelArr.push(CONTENT_LABEL_TYPE.DUBBING);\n  }\n\n  // HDR\n  if (hdrCode === '01') {\n    contentLabelArr.push(CONTENT_LABEL_TYPE.HDR);\n  } else if (hdrCode === '02') {\n    if (deviceType === DEVICE_TYPE.TIZEN) {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.HDR10_PLUS);\n    } else {\n      contentLabelArr.push(CONTENT_LABEL_TYPE.HDR);\n    }\n  } else if (hdrCode === '03') {\n    contentLabelArr.push(CONTENT_LABEL_TYPE.DOLBY_VISION);\n  }\n\n  if (audioCode === '01') {\n    contentLabelArr.push(CONTENT_LABEL_TYPE.DOLBY_51);\n  } else if (audioCode === '03') {\n    contentLabelArr.push(CONTENT_LABEL_TYPE.DTX);\n  }\n\n  if (isExplainSubtitle) {\n    contentLabelArr.push(CONTENT_LABEL_TYPE.EXPLAIN_SUBTITLE);\n  }\n  if (isFree) {\n    contentLabelArr.push(CONTENT_LABEL_TYPE.FREE_META);\n  }\n  return contentLabelArr;\n};\n\nexport default getTvContentLabels;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getTvLabelType.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getTvMetaTexts.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getTvRatingType.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/getUserType.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/isAdult.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 15,
        column: 14,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 15,
        endColumn: 61,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 15,
        column: 65,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 15,
        endColumn: 112,
      },
      {
        ruleId: "@typescript-eslint/no-unsafe-enum-comparison",
        severity: 2,
        message:
          "The two values in this comparison do not have a shared enum type.",
        line: 26,
        column: 14,
        nodeType: "BinaryExpression",
        messageId: "mismatchedCondition",
        endLine: 26,
        endColumn: 47,
      },
    ],
    suppressedMessages: [],
    errorCount: 3,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { EpisodeContent, SearchMovieContent, SearchProgramContent, SeasonMovieContent } from '../../apis/types';\nimport { API_URLS } from '../../constants/apiConstants';\nimport { GRADE_CODE } from '../../constants/commonConstants';\nimport { ItemResponse } from '../../proxies/types';\n\nimport getProgramMovieEpisodeChannel from './getProgramMovieEpisodeChannel';\n\nconst isAdult = (bandApiUrl: string, itemResponse: ItemResponse): boolean => {\n  const { program, movie, episode } = getProgramMovieEpisodeChannel(bandApiUrl, itemResponse);\n\n  switch (bandApiUrl) {\n    case API_URLS.SEARCH:\n    case API_URLS.SEARCH_AUTO_RESULT: {\n      const searchResponse = itemResponse as SearchProgramContent & SearchMovieContent;\n      return searchResponse.grade_cd === GRADE_CODE.CMMG0400 || searchResponse.grade_cd === GRADE_CODE.CPTG0500;\n    }\n    case API_URLS.SEASON_MOVIE: {\n      const { adult_yn: adultYn, grade_code: gradeCode } = itemResponse as SeasonMovieContent;\n      if (adultYn) {\n        return adultYn === 'Y';\n      }\n      return gradeCode === GRADE_CODE.CMMG0400 || gradeCode === GRADE_CODE.CPTG0500;\n    }\n    case API_URLS.FREQUENCY_PROGRAM: {\n      const { grade_code: gradeCode } = episode as EpisodeContent;\n      return gradeCode === GRADE_CODE.CPTG0500;\n    }\n    default: {\n      const content = program || movie || episode;\n      if (content?.adult_yn) {\n        return content?.adult_yn === 'Y';\n      }\n      return content?.grade_code === GRADE_CODE.CMMG0400 || content?.grade_code === GRADE_CODE.CPTG0500;\n    }\n  }\n};\n\nexport default isAdult;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/isAffiliate.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/isFree.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/isParamount.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/proxy-util/isSns.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/rotuer/TvingNavigator.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/simple-virtual-list/SimpleVirtualList.style.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/simple-virtual-list/SimpleVirtualList.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-credit/TvingCredit.style.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-credit/TvingCredit.tsx",
    messages: [
      {
        ruleId: "@typescript-eslint/no-misused-promises",
        severity: 2,
        message:
          "Promise-returning function provided to attribute where a void return was expected.",
        line: 163,
        column: 17,
        nodeType: "JSXExpressionContainer",
        messageId: "voidReturnAttribute",
        endLine: 174,
        endColumn: 11,
      },
    ],
    suppressedMessages: [
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'credit'.",
        line: 16,
        column: 3,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 16,
        endColumn: 9,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'ref'.",
        line: 81,
        column: 11,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 81,
        endColumn: 14,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'ref'.",
        line: 83,
        column: 11,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 83,
        endColumn: 14,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "jsx-a11y/media-has-caption",
        severity: 2,
        message:
          "Media elements such as <audio> and <video> must have a <track> for captions.",
        line: 154,
        column: 7,
        nodeType: "JSXOpeningElement",
        endLine: 154,
        endColumn: 62,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      '/* eslint-disable max-len */\nimport React, { useLayoutEffect, useMemo, useRef } from \'react\';\n\nimport { tvingPeople } from \'./tving-people\';\nimport StyledTvingCredit from \'./TvingCredit.style\';\n\nconst TRANSITION_DURATION = 3000;\nconst ROLL_DURATION = 90000;\n\nlet eventFunction: (() => void) | null = null;\n\nconst doRoll = (credit: HTMLElement) => {\n  const start = performance.now();\n  const creditHeight = credit.scrollHeight;\n  // eslint-disable-next-line no-param-reassign\n  credit.style.transform = `translateY(${creditHeight + 300}px)`;\n\n  const setEnd = () => {\n    const creditHeight = credit.scrollHeight;\n    const creditDom = credit;\n\n    const scrollHeight = creditHeight;\n    const bodyHeight = document.body.clientHeight;\n\n    const end = performance.now();\n    const duration = end - start;\n    creditDom.style.transition = `transform ${Math.max(ROLL_DURATION - duration, 0)}ms linear`;\n    creditDom.style.transform = `translateY(${-scrollHeight + bodyHeight / 2}px)`;\n  };\n\n  const timeoutKey = setTimeout(() => {\n    setEnd();\n  }, 1000);\n\n  if (eventFunction) {\n    window.removeEventListener(\'resize\', eventFunction);\n    eventFunction = null;\n  }\n\n  eventFunction = () => {\n    clearTimeout(timeoutKey);\n    setEnd();\n  };\n\n  window.addEventListener(\'resize\', eventFunction);\n};\n\nconst TvingCredit = () => {\n  // Every render, team order is changed.\n  const randomizedTvingPeople = useMemo(() => {\n    return tvingPeople.sort(() => Math.random() - 0.5);\n  }, []);\n\n  const thanksRef = useRef<HTMLDivElement>(null);\n  // const presentsRef = useRef<HTMLDivElement>(null);\n  const productionRef = useRef<HTMLDivElement>(null);\n  const rollRef = useRef<HTMLDivElement>(null);\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  useLayoutEffect(() => {\n    const refs = [thanksRef, productionRef, rollRef];\n\n    const timeouts: NodeJS.Timeout[] = [];\n    refs.forEach((ref, index) => {\n      timeouts[index] = setTimeout(() => {\n        if (index > 0) {\n          refs[index - 1].current?.classList.remove(\'active\');\n        }\n        ref.current?.classList.add(\'active\');\n        if (ref.current?.classList.contains(\'roll\')) {\n          doRoll(ref.current);\n        }\n      }, index * TRANSITION_DURATION);\n    });\n\n    return () => {\n      refs.forEach((ref) => {\n        if (ref.current) {\n          ref.current.classList.remove(\'active\');\n          // eslint-disable-next-line no-param-reassign\n          ref.current.style.transition = \'\';\n          // eslint-disable-next-line no-param-reassign\n          ref.current.style.transform = \'\';\n        }\n      });\n\n      timeouts.forEach((timeout) => {\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n      });\n\n      if (eventFunction) {\n        window.removeEventListener(\'resize\', eventFunction);\n        eventFunction = null;\n      }\n    };\n  }, []);\n\n  // HTML Audio 재생상태 관리\n  const [isAudioPlaying, setIsAudioPlaying] = React.useState(false);\n  useLayoutEffect(() => {\n    const audio = audioRef.current;\n    if (audio) {\n      setIsAudioPlaying(!audio.paused);\n    }\n  }, []);\n\n  return (\n    <StyledTvingCredit duration={TRANSITION_DURATION}>\n      {/* thanks message */}\n      <div className="slide fade thanks" ref={thanksRef}>\n        <p>항상 관심 가져주셔서 감사합니다.</p>\n        <p>더욱 발전하는 티빙을 만들 수 있도록 노력하겠습니다.</p>\n      </div>\n\n      {/* 제작 */}\n      <div className="slide fade production" ref={productionRef}>\n        <h3 className="title">제작</h3>\n        <div className="value">주식회사 티빙</div>\n      </div>\n\n      {/* 티빙 인원 roll */}\n      <div className="slide roll" ref={rollRef}>\n        {randomizedTvingPeople.map((team, index) => {\n          return (\n            <div className="team" key={index}>\n              <h3 className="team-name">{team.teamName}</h3>\n\n              <ul className="team-members">\n                {team.members.map((member, index) => {\n                  return (\n                    <li className="member" key={index}>\n                      <span className="member-name">\n                        <div className="member-name-ko">{member.name}</div>\n                        <div className="member-name-en">{member.englishName}</div>\n                      </span>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          );\n        })}\n\n        <div className="blank" />\n\n        <div className="team">\n          <h3 className="team-name">감사합니다.</h3>\n        </div>\n      </div>\n\n      {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n      <audio loop ref={audioRef} src="/audio/song.mp3?v=2" />\n\n      {/*  Audio Turn on/off */}\n      <svg\n        className="volume"\n        xmlns="http://www.w3.org/2000/svg"\n        width="100"\n        height="100"\n        viewBox="0 0 100 100"\n        onClick={async () => {\n          const audio = audioRef.current;\n          if (audio) {\n            if (audio.paused) {\n              await audio.play();\n            } else {\n              audio.pause();\n              audio.currentTime = 0;\n            }\n            setIsAudioPlaying(!audio.paused);\n          }\n        }}\n      >\n        <defs>\n          <clipPath id="clip-path">\n            <path\n              id="패스_37"\n              d="M35.132 17.27a1.17 1.17 0 0 0-.116 1.861 9.094 9.094 0 0 1-.063 13.879 1.169 1.169 0 0 0 1.5 1.8 11.436 11.436 0 0 0 .077-17.46 1.146 1.146 0 0 0-.749-.275 1.178 1.178 0 0 0-.65.2"\n              className="cls-1"\n              transform="translate(-34.538 -17.075)"\n            />\n          </clipPath>\n          <clipPath id="clip-path-2">\n            <path\n              id="패스_41"\n              d="M44.964 10.294a1.277 1.277 0 0 0-.2 1.878A20.826 20.826 0 0 1 44.73 40a1.275 1.275 0 0 0 .2 1.881 1.115 1.115 0 0 0 1.477-.172 23.4 23.4 0 0 0 .037-31.247 1.134 1.134 0 0 0-.838-.377 1.117 1.117 0 0 0-.643.205"\n              className="cls-1"\n              transform="translate(-44.405 -10.089)"\n            />\n          </clipPath>\n          <clipPath id="clip-path-3">\n            <path\n              id="패스_39"\n              d="M54.816 4.078a1.2 1.2 0 0 0-.251 1.773 31.043 31.043 0 0 1-.008 40.06 1.194 1.194 0 0 0 .253 1.769h.005a1.2 1.2 0 0 0 1.575-.238 33.454 33.454 0 0 0 .01-43.127 1.212 1.212 0 0 0-.928-.435 1.188 1.188 0 0 0-.655.2"\n              className="cls-1"\n              transform="translate(-54.273 -3.881)"\n            />\n          </clipPath>\n        </defs>\n        <g id="_icon_Volume_3" transform="translate(25 28)">\n          <g id="volume_big">\n            <path\n              id="big-volume"\n              d="M13.3119 16.941H6.00049C4.89592 16.941 4.00049 17.8364 4.00049 18.941V29.071C4.00049 30.1756 4.89592 31.071 6.00049 31.071H13.3119L22.3594 38.6289C23.0105 39.1728 24.0005 38.7099 24.0005 37.8615V10.1401C24.0005 9.29138 23.0098 8.82852 22.3589 9.37308L13.3119 16.941Z"\n              fill="white"\n            />\n          </g>\n          {isAudioPlaying ? (\n            <>\n              <g d="volume_1_big">\n                <g>\n                  <path\n                    id="big-volume-small"\n                    fillRule="evenodd"\n                    clipRule="evenodd"\n                    d="M29.6136 14.7705L30.9215 15.692C33.527 17.5275 35.2344 20.5643 35.2344 24C35.2344 27.4357 33.527 30.4725 30.9215 32.308L29.6136 33.2295L27.7706 30.6135L29.0786 29.692C30.8697 28.4302 32.0344 26.351 32.0344 24C32.0344 21.649 30.8697 19.5698 29.0786 18.308L27.7706 17.3865L29.6136 14.7705Z"\n                    fill="white"\n                  />\n                </g>\n              </g>\n              <g id="volume_3_big">\n                <g>\n                  <path\n                    id="big-volume-large"\n                    fillRule="evenodd"\n                    clipRule="evenodd"\n                    d="M35.6133 9.77051L36.9213 10.692C41.0969 13.6337 43.8301 18.4976 43.8301 24C43.8301 29.5024 41.0969 34.3663 36.9213 37.308L35.6133 38.2295L33.7703 35.6135L35.0783 34.692C38.4396 32.324 40.6301 28.4177 40.6301 24C40.6301 19.5823 38.4396 15.676 35.0783 13.308L33.7703 12.3865L35.6133 9.77051Z"\n                    fill="white"\n                  />\n                </g>\n              </g>\n            </>\n          ) : (\n            <g id="volume_mute_big">\n              <path\n                id="big-volume-mute"\n                fillRule="evenodd"\n                clipRule="evenodd"\n                d="M33.7372 24L28.8686 19.1314L31.1313 16.8687L36 21.7373L40.8686 16.8687L43.1313 19.1314L38.2627 24L43.1313 28.8687L40.8686 31.1314L36 26.2628L31.1313 31.1314L28.8686 28.8687L33.7372 24Z"\n                fill="white"\n              />\n            </g>\n          )}\n        </g>\n      </svg>\n    </StyledTvingCredit>\n  );\n};\n\nexport default React.memo(TvingCredit);\n',
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-credit/tving-people.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-event-delegator/TvingEventDelegator.ts",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "@typescript-eslint/ban-ts-comment",
        severity: 2,
        message:
          'Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.',
        line: 91,
        column: 9,
        nodeType: "Line",
        messageId: "tsIgnoreInsteadOfExpectError",
        endLine: 91,
        endColumn: 22,
        suggestions: [
          {
            messageId: "replaceTsIgnoreWithTsExpectError",
            fix: {
              range: [2837, 2850],
              text: "// @ts-expect-error",
            },
            desc: 'Replace "@ts-ignore" with "@ts-expect-error".',
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "@typescript-eslint/ban-ts-comment",
        severity: 2,
        message:
          'Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.',
        line: 103,
        column: 11,
        nodeType: "Line",
        messageId: "tsIgnoreInsteadOfExpectError",
        endLine: 103,
        endColumn: 24,
        suggestions: [
          {
            messageId: "replaceTsIgnoreWithTsExpectError",
            fix: {
              range: [3255, 3268],
              text: "// @ts-expect-error",
            },
            desc: 'Replace "@ts-ignore" with "@ts-expect-error".',
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/TvingFocusable.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-redundant-type-constituents",
        severity: 2,
        message: "'any' overrides all other types in this union type.",
        line: 122,
        column: 63,
        nodeType: "TSTypeReference",
        messageId: "overrides",
        endLine: 122,
        endColumn: 111,
      },
    ],
    suppressedMessages: [
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'component'.",
        line: 666,
        column: 9,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 666,
        endColumn: 18,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'component'.",
        line: 815,
        column: 7,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 815,
        endColumn: 16,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 822,
        column: 7,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 822,
        endColumn: 18,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "log",
            },
            fix: {
              range: [28958, 29293],
              text: "",
            },
            desc: "Remove the console.log().",
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "prefer-destructuring",
        severity: 2,
        message: "Use array destructuring.",
        line: 886,
        column: 9,
        nodeType: "AssignmentExpression",
        messageId: "preferDestructuring",
        endLine: 886,
        endColumn: 28,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import difference from 'lodash/difference';\nimport filter from 'lodash/filter';\nimport findKey from 'lodash/findKey';\nimport first from 'lodash/first';\nimport forEach from 'lodash/forEach';\nimport forOwn from 'lodash/forOwn';\nimport DebouncedFunc from 'lodash/function';\nimport last from 'lodash/last';\nimport sortBy from 'lodash/sortBy';\nimport throttle from 'lodash/throttle';\n\nimport { TV_PAGE } from '../../constants/commonConstants';\n\nimport {\n  ADJACENT_SLICE_THRESHOLD,\n  ADJACENT_SLICE_WEIGHT,\n  CHILDREN_ENDPOINT_ACTION,\n  CHILDREN_ENDPOINT_ACTION_RESULT,\n  DEBUG_FN_COLORS,\n  DEFAULT_KEY_MAP,\n  DIAGONAL_SLICE_WEIGHT,\n  DIRECTION_DOWN,\n  DIRECTION_LEFT,\n  DIRECTION_RIGHT,\n  DIRECTION_UP,\n  KEY_BACK,\n  KEY_BACK_ANDROID_TV,\n  KEY_BACK_TIZEN_TV,\n  KEY_BACK_WEBOS_TV,\n  KEY_ENTER,\n  MAIN_COORDINATE_WEIGHT,\n  THROTTLE_OPTIONS,\n} from './contants';\nimport {\n  Corners,\n  FocusableComponentLayout,\n  FocusableComponentProps,\n  FocusableComponentRemovePayload,\n  FocusableComponentUpdatePayload,\n  FocusDetails,\n  KeyMap,\n  KeyPressDetails,\n  NavigationType,\n  PressedKeys,\n} from './types';\nimport checkChildrenEndpointAction from './utils/checkChildrenEndpointAction';\nimport getCutoffCoordinateFromCenter from './utils/getCutoffCoordinateFromCenter';\nimport getCutoffCoordinateFromEdge from './utils/getCutoffCoordinateFromEdge';\nimport getOppositeDirection from './utils/getOppositeDirection';\nimport getRefCornersFromCenter from './utils/getRefCornersFromCenter';\nimport getRefCornersFromEdge from './utils/getRefCornersFromEdge';\nimport measureLayout from './utils/measureLayout';\nimport VisualDebugger from './VisualDebugger';\n\nconst getChildSpatialClosestToOrigin = (children: FocusableComponentProps[]) => {\n  const childrenClosestToOrigin = sortBy(children, ({ layout }) => {\n    return Math.abs(layout?.left ? layout.left : 0) + Math.abs(layout?.top ? layout.top : 0);\n  }).filter((children) => !children.isInactive && !children.node.classList.contains('inactive'));\n\n  return first(childrenClosestToOrigin);\n};\n\nconst getChildSequentialClosestToOrigin = (lastIndex: number, children: FocusableComponentProps[]) => {\n  const childrenClosestToOrigin = sortBy(children, ({ focusIndex }) => {\n    return lastIndex - Math.abs(focusIndex || 0);\n  }).filter((children) => !children.isInactive && !children.node.classList.contains('inactive'));\n\n  return first(childrenClosestToOrigin);\n};\n\nclass TvingFocusable {\n  private readonly focusRoot: string;\n\n  private focusableComponents: { [index: string]: FocusableComponentProps };\n\n  private visualDebugger: VisualDebugger | null;\n\n  /**\n   * Focus key of the currently focused element\n   */\n  private focusKey: string;\n\n  /**\n   * This collection contains focus keys of the elements that are having a child focused\n   * Might be handy for styling of certain parent components if their child is focused.\n   */\n  private parentsHavingFocusedChild: string[];\n\n  private enabled: boolean;\n\n  /**\n   * Used in the React Native environment\n   * In this mode, the library works as a \"read-only\" helper to sync focused\n   * states for the components when they are focused by the native focus engine\n   */\n  private nativeMode: boolean;\n\n  /**\n   * Throttling delay for key presses in milliseconds\n   */\n  throttle: number;\n\n  /**\n   * Enables/disables throttling feature\n   */\n  private throttleKeypresses: boolean;\n\n  /**\n   * Storing pressed keys counter by the eventType\n   */\n  private readonly pressedKeys: PressedKeys;\n\n  /**\n   * Flag used to block key events from this service\n   */\n  private paused: boolean;\n\n  private originalKeyDownEventListener: (event: KeyboardEvent) => boolean;\n\n  private keyDownEventListenerThrottled: DebouncedFunc<(event: KeyboardEvent) => boolean>;\n\n  keyDownEventListener: ((event: KeyboardEvent) => boolean) | DebouncedFunc<(event: KeyboardEvent) => boolean>;\n\n  keyUpEventListener: (event: KeyboardEvent) => boolean;\n\n  private keyMap: KeyMap;\n\n  private debug: boolean;\n\n  private logIndex: number;\n\n  /**\n   * Calculates if the sibling node is intersecting enough with the ref node by the secondary coordinate\n   */\n  static isAdjacentSlice(refCorners: Corners, siblingCorners: Corners, isVerticalDirection: boolean) {\n    const { a: refA, b: refB } = refCorners;\n    const { a: siblingA, b: siblingB } = siblingCorners;\n    const coordinate = isVerticalDirection ? 'x' : 'y';\n\n    const refCoordinateA = refA[coordinate];\n    const refCoordinateB = refB[coordinate];\n    const siblingCoordinateA = siblingA[coordinate];\n    const siblingCoordinateB = siblingB[coordinate];\n\n    const thresholdDistance = (refCoordinateB - refCoordinateA) * ADJACENT_SLICE_THRESHOLD;\n\n    const intersectionLength = Math.max(0, Math.min(refCoordinateB, siblingCoordinateB) - Math.max(refCoordinateA, siblingCoordinateA));\n\n    return intersectionLength >= thresholdDistance;\n  }\n\n  static getPrimaryAxisDistance(refCorners: Corners, siblingCorners: Corners, isVerticalDirection: boolean) {\n    const { a: refA } = refCorners;\n    const { a: siblingA } = siblingCorners;\n    const coordinate = isVerticalDirection ? 'y' : 'x';\n\n    return Math.abs(siblingA[coordinate] - refA[coordinate]);\n  }\n\n  static getSecondaryAxisDistance(refCorners: Corners, siblingCorners: Corners, isVerticalDirection: boolean) {\n    const { a: refA, b: refB } = refCorners;\n    const { a: siblingA, b: siblingB } = siblingCorners;\n    const coordinate = isVerticalDirection ? 'x' : 'y';\n\n    const refCoordinateA = refA[coordinate];\n    const refCoordinateB = refB[coordinate];\n    const siblingCoordinateA = siblingA[coordinate];\n    const siblingCoordinateB = siblingB[coordinate];\n\n    const distancesToCompare = [] as number[];\n\n    distancesToCompare.push(Math.abs(siblingCoordinateA - refCoordinateA));\n    distancesToCompare.push(Math.abs(siblingCoordinateA - refCoordinateB));\n    distancesToCompare.push(Math.abs(siblingCoordinateB - refCoordinateA));\n    distancesToCompare.push(Math.abs(siblingCoordinateB - refCoordinateB));\n\n    return Math.min(...distancesToCompare);\n  }\n\n  /**\n   * 인접 노드 (현재 노드의 방향 + 꼭지점 기준 범위 내에 들어오는 노드) 만을 기준으로 우선순위 sorting (입력된 방향과 일치하는 직선상에 위치한 노드들만 가지고 우선순위를 판단)\n   * looping 시 지정된 범위 내의 노드만을 탐색하기 위해 호출\n   * @param siblings\n   * @param currentLayout\n   * @param direction\n   * @param focusKey\n   */\n  sortAdjacentSiblingsByPriority(siblings: FocusableComponentProps[], currentLayout, direction: string, focusKey?: string) {\n    this.log('sortAdjacentSiblingsByPriority', `${focusKey ?? ''}`);\n    const isVerticalDirection = direction === DIRECTION_DOWN || direction === DIRECTION_UP;\n\n    // 1. 현재 레이아웃의 기준점을 획득\n    // const refCorners = TvingFocusable.getRefCornersFromEdge(direction, false, currentLayout);\n    const refCorners = getRefCornersFromCenter(direction, currentLayout as FocusableComponentLayout);\n\n    const convertedSiblings = siblings.filter((sibling) => {\n      // 2. 형제 노드의 기준점 획득\n      const siblingCorners = getRefCornersFromEdge(direction, sibling.layout as FocusableComponentLayout, true);\n\n      return TvingFocusable.isAdjacentSlice(refCorners, siblingCorners, isVerticalDirection);\n    });\n\n    return sortBy(convertedSiblings, (sibling) => {\n      const siblingCorners = getRefCornersFromEdge(direction, sibling.layout as FocusableComponentLayout, true);\n\n      return TvingFocusable.getPrimaryAxisDistance(refCorners, siblingCorners, isVerticalDirection);\n    });\n  }\n\n  /**\n   * Inspired by: https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS_for_TV/TV_remote_control_navigation#Algorithm_design\n   * Ref Corners are the 2 corners of the current component in the direction of navigation\n   * They used as a base to measure adjacent slices\n   */\n  sortSiblingsByPriority(\n    siblings: FocusableComponentProps[],\n    currentLayout: FocusableComponentLayout,\n    direction: string,\n    focusKey: string,\n    parentComponent: FocusableComponentProps,\n  ) {\n    const isVerticalDirection = direction === DIRECTION_DOWN || direction === DIRECTION_UP;\n\n    // 1. 현재 레이아웃의 기준점을 획득\n    // const refCorners = TvingFocusable.getRefCornersFromEdge(direction, false, currentLayout);\n    const refCorners = parentComponent?.overlapChildren\n      ? getRefCornersFromCenter(direction, currentLayout)\n      : getRefCornersFromEdge(direction, currentLayout);\n\n    // 2. 획득된 레이아웃을 기준으로 이웃 노드의 거리를 계산해서 우선순위 정렬\n    return sortBy(siblings, (sibling) => {\n      // 3. 형제 노드의 기준점을 획득\n      const siblingCorners = getRefCornersFromEdge(direction, sibling.layout as FocusableComponentLayout, true);\n\n      // 4. 인접 노드 여부 체크 (대각선 범위 안에 들어오는지)\n      const isAdjacentSlice = TvingFocusable.isAdjacentSlice(refCorners, siblingCorners, isVerticalDirection);\n\n      // 5-1. 형제 노드가 현재 노드의 넓이 or 높이 범위 내에 노드라면, 직선거리를 우선으로 체크\n      const primaryAxisFunction = isAdjacentSlice\n        ? TvingFocusable.getPrimaryAxisDistance.bind(TvingFocusable)\n        : TvingFocusable.getSecondaryAxisDistance.bind(TvingFocusable);\n\n      // 5-2. 인접 노드가 아닌 경우 각 꼭지점 간의 최소 거리를 우선으로 체크\n      const secondaryAxisFunction = isAdjacentSlice\n        ? TvingFocusable.getSecondaryAxisDistance.bind(TvingFocusable)\n        : TvingFocusable.getPrimaryAxisDistance.bind(TvingFocusable);\n\n      const primaryAxisDistance = primaryAxisFunction(refCorners, siblingCorners, isVerticalDirection);\n      const secondaryAxisDistance = secondaryAxisFunction(refCorners, siblingCorners, isVerticalDirection);\n\n      /**\n       * The higher this value is, the less prioritised the candidate is\n       */\n      const totalDistancePoints = primaryAxisDistance * MAIN_COORDINATE_WEIGHT + secondaryAxisDistance;\n\n      /**\n       * + 1 here is in case of distance is zero, but we still want to apply Adjacent priority weight\n       */\n      const priority = (totalDistancePoints + 1) / (isAdjacentSlice ? ADJACENT_SLICE_WEIGHT : DIAGONAL_SLICE_WEIGHT);\n\n      this.log(\n        'smartNavigate',\n        `distance (primary, secondary, total weighted) for ${sibling.focusKey} relative to ${focusKey} is`,\n        primaryAxisDistance,\n        secondaryAxisDistance,\n        totalDistancePoints,\n      );\n\n      this.log('smartNavigate', `priority for ${sibling.focusKey} relative to ${focusKey} is`, priority);\n\n      if (this.visualDebugger) {\n        this.visualDebugger.drawPoint(siblingCorners.a.x, siblingCorners.a.y, 'yellow', 6);\n        this.visualDebugger.drawPoint(siblingCorners.b.x, siblingCorners.b.y, 'yellow', 6);\n      }\n\n      return priority;\n    });\n  }\n\n  constructor(focusRoot: string) {\n    this.focusRoot = focusRoot;\n    /**\n     * Storage for all focusable components\n     */\n    this.focusableComponents = {};\n\n    /**\n     * Storing current focused key\n     */\n    this.focusKey = '';\n\n    /**\n     * This collection contains focus keys of the elements that are having a child focused\n     * Might be handy for styling of certain parent components if their child is focused.\n     */\n    this.parentsHavingFocusedChild = [];\n\n    this.enabled = false;\n    this.nativeMode = false;\n    this.throttle = 0;\n    this.throttleKeypresses = false;\n\n    this.pressedKeys = {};\n\n    /**\n     * Flag used to block key events from this service\n     * @type {boolean}\n     */\n    this.paused = false;\n\n    this.originalKeyDownEventListener = () => {\n      // initialize\n      return true;\n    };\n\n    this.keyDownEventListenerThrottled = throttle(this.originalKeyDownEventListener.bind(this), this.throttle, THROTTLE_OPTIONS);\n    this.keyDownEventListener = () => {\n      return true;\n    };\n    this.keyUpEventListener = () => {\n      // initialize\n      return true;\n    };\n    this.keyMap = DEFAULT_KEY_MAP;\n\n    this.onKeyEvent = this.onKeyEvent.bind(this);\n    this.pause = this.pause.bind(this);\n    this.resume = this.resume.bind(this);\n    this.setFocus = this.setFocus.bind(this);\n    this.getComponentByFocusKey = this.getComponentByFocusKey.bind(this);\n    this.getCurrentFocus = this.getCurrentFocus.bind(this);\n    this.getCurrentComponent = this.getCurrentComponent.bind(this);\n    this.updateAllLayouts = this.updateAllLayouts.bind(this);\n    this.navigateByDirection = this.navigateByDirection.bind(this);\n    this.initTvingFocusable = this.initTvingFocusable.bind(this);\n    this.setKeyMap = this.setKeyMap.bind(this);\n\n    this.debug = false;\n\n    this.visualDebugger = null;\n\n    this.logIndex = 0;\n  }\n\n  initTvingFocusable({ debug = false, visualDebug = false, nativeMode = false, throttle: throttleParam = 0, throttleKeypresses = false } = {}) {\n    if (!this.enabled) {\n      this.enabled = true;\n      this.nativeMode = nativeMode;\n      this.throttleKeypresses = throttleKeypresses;\n\n      this.debug = debug;\n\n      if (!this.nativeMode) {\n        if (Number.isInteger(throttleParam) && throttleParam > 0) {\n          this.throttle = throttleParam;\n        }\n        this.bindEventHandlers();\n        if (visualDebug) {\n          this.visualDebugger = new VisualDebugger();\n          this.startDrawLayouts();\n        }\n      }\n    }\n  }\n\n  startDrawLayouts() {\n    const draw = () => {\n      requestAnimationFrame(() => {\n        if (this.visualDebugger) {\n          this.visualDebugger.clearLayouts();\n        }\n\n        // forOwn(this.focusableComponents, (component, focusKey) => {\n        //   if (this.visualDebugger && component.layout) {\n        //     this.visualDebugger.drawLayout(component.layout, focusKey, component.parentFocusKey);\n        //   }\n        // });\n        draw();\n      });\n    };\n\n    draw();\n  }\n\n  destroyTvingFocusable() {\n    if (this.enabled) {\n      this.enabled = false;\n      this.nativeMode = false;\n      this.throttle = 0;\n      this.throttleKeypresses = false;\n      this.focusKey = '';\n      this.parentsHavingFocusedChild = [];\n      this.focusableComponents = {};\n      this.paused = false;\n      this.keyMap = DEFAULT_KEY_MAP;\n\n      this.unbindEventHandlers();\n    }\n  }\n\n  getEventType(keyCode: number) {\n    return findKey(this.getKeyMap(), (code) => keyCode === code);\n  }\n\n  bindEventHandlers() {\n    // We check both because the React Native remote debugger implements window, but not window.addEventListener.\n    this.originalKeyDownEventListener = (event: KeyboardEvent) => {\n      if (!Object.values(this.getKeyMap()).some((keyCode) => event.keyCode === keyCode)) {\n        return true;\n      }\n\n      // console.groupCollapsed('current focus root', this.focusRoot);\n      // console.trace(); // hidden in collapsed group\n      // console.groupEnd();\n\n      if (this.paused) {\n        return false;\n      }\n\n      if (this.debug) {\n        this.logIndex += 1;\n      }\n\n      const eventType = this.getEventType(event.keyCode);\n\n      if (!eventType) {\n        return false;\n      }\n\n      this.pressedKeys[eventType] = this.pressedKeys[eventType] ? this.pressedKeys[eventType] + 1 : 1;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const keysDetails = {\n        pressedKeys: this.pressedKeys,\n      };\n\n      if (eventType === KEY_ENTER && this.focusKey) {\n        this.onEnterPress(keysDetails);\n\n        return false;\n      }\n\n      if (\n        (eventType === KEY_BACK || eventType === KEY_BACK_ANDROID_TV || eventType === KEY_BACK_TIZEN_TV || eventType === KEY_BACK_WEBOS_TV) &&\n        this.focusKey\n      ) {\n        const component = this.focusableComponents[this.focusKey];\n        this.onBackPress(component, keysDetails);\n        return false;\n      }\n\n      const preventDefaultNavigation = this.onArrowPress(eventType, keysDetails) === false;\n\n      if (preventDefaultNavigation) {\n        this.log('originalKeyDownEventListener', 'default navigation prevented');\n\n        if (this.visualDebugger) {\n          this.visualDebugger.clear();\n        }\n      } else {\n        this.onKeyEvent(event);\n      }\n\n      return false;\n    };\n\n    this.keyDownEventListener = this.originalKeyDownEventListener;\n    // Apply throttle only if the option we got is not undefined to avoid limiting the listener to every animation frame\n    if (this.throttle !== undefined) {\n      this.keyDownEventListenerThrottled = throttle(this.originalKeyDownEventListener.bind(this), this.throttle, THROTTLE_OPTIONS);\n      this.keyDownEventListener = this.keyDownEventListenerThrottled;\n    }\n\n    // When throttling then make sure to only throttle key down and cancel any queued functions in case of key up\n    this.keyUpEventListener = (event: KeyboardEvent) => {\n      if (!Object.values(this.getKeyMap()).some((keyCode) => event.keyCode === keyCode)) {\n        return true;\n      }\n\n      const eventType = this.getEventType(event.keyCode);\n\n      if (eventType) {\n        Reflect.deleteProperty(this.pressedKeys, eventType);\n      }\n\n      if (this.throttle && !this.throttleKeypresses) {\n        if (\n          eventType !== KEY_BACK &&\n          eventType !== KEY_BACK_ANDROID_TV &&\n          eventType !== KEY_BACK_TIZEN_TV &&\n          eventType !== KEY_BACK_WEBOS_TV &&\n          this.keyDownEventListenerThrottled\n        ) {\n          this.keyDownEventListenerThrottled.cancel();\n        }\n      }\n\n      if (eventType === KEY_ENTER && this.focusKey) {\n        this.onEnterRelease();\n      }\n\n      event.stopPropagation();\n      event.preventDefault();\n      return false;\n    };\n  }\n\n  unbindEventHandlers() {\n    // We check both because the React Native remote debugger implements window, but not window.removeEventListener.\n    this.originalKeyDownEventListener = () => {\n      // initialize\n      return false;\n    };\n\n    if (this.throttle) {\n      this.keyUpEventListener = () => {\n        // initialize\n        return false;\n      };\n    }\n  }\n\n  onEnterPress(keysDetails: KeyPressDetails) {\n    const component = this.focusableComponents[this.focusKey];\n\n    /* Guard against last-focused component being unmounted at time of onEnterPress (e.g. due to UI fading out) */\n    if (!component) {\n      this.log('onEnterPress', 'noComponent');\n\n      return;\n    }\n\n    /* Suppress onEnterPress if the last-focused item happens to lose its 'focused' status. */\n    if (!component.focusable) {\n      this.log('onEnterPress', 'componentNotFocusable');\n\n      return;\n    }\n\n    if (component.onEnterPress) {\n      component.onEnterPress(keysDetails);\n    }\n  }\n\n  onEnterRelease() {\n    const component = this.focusableComponents[this.focusKey];\n\n    /* Guard against last-focused component being unmounted at time of onEnterRelease (e.g. due to UI fading out) */\n    if (!component) {\n      this.log('onEnterRelease', 'noComponent');\n\n      return;\n    }\n\n    /* Suppress onEnterRelease if the last-focused item happens to lose its 'focused' status. */\n    if (!component.focusable) {\n      this.log('onEnterRelease', 'componentNotFocusable');\n\n      return;\n    }\n\n    if (component.onEnterRelease) {\n      component.onEnterRelease();\n    }\n  }\n\n  onArrowPress(direction: string, keysDetails: KeyPressDetails) {\n    let component = this.focusableComponents[this.focusKey];\n\n    /* Guard against last-focused component being unmounted at time of onArrowPress (e.g. due to UI fading out) */\n    if (!component) {\n      this.log('onArrowPress', 'noComponent');\n\n      while (this.focusKeyStack.length > 0) {\n        const lastFocusKey = this.focusKeyStack.pop();\n        if (lastFocusKey && this.focusableComponents[lastFocusKey] && this.focusableComponents[lastFocusKey].focusable) {\n          component = this.focusableComponents[lastFocusKey];\n          break;\n        }\n      }\n      if (component) {\n        // this.setFocus(component.focusKey);\n        // this.navigateByDirection(direction, {});\n      }\n      return undefined;\n    }\n\n    /* It's okay to navigate AWAY from an item that has lost its 'focused' status, so we don't inspect\n     * component.focusable. */\n\n    return component && component.onArrowPress && component.onArrowPress(direction, keysDetails);\n  }\n\n  onBackPress(component: FocusableComponentProps, keysDetails: KeyPressDetails) {\n    /* Guard against last-focused component being unmounted at time of onBackPress (e.g. due to UI fading out) */\n    if (!component) {\n      this.log('onBackPress', 'noComponent');\n\n      return;\n    }\n    if (component.onBackPress) {\n      component.onBackPress(keysDetails);\n    } else {\n      // If current compopnent has not onBackPress method, then pass to parentComponent.\n      const parentComponent = this.focusableComponents[component.parentFocusKey];\n\n      if (parentComponent) {\n        // call recursive\n        this.onBackPress(parentComponent, keysDetails);\n      }\n    }\n  }\n\n  /**\n   * Move focus by direction, if you can't use buttons or focusing by key.\n   *\n   * @example\n   * navigateByDirection('right') // The focus is moved to right\n   */\n  navigateByDirection(direction: string, focusDetails: FocusDetails = {}) {\n    if (this.paused || this.nativeMode) {\n      return;\n    }\n\n    const validDirections = [DIRECTION_DOWN, DIRECTION_UP, DIRECTION_LEFT, DIRECTION_RIGHT];\n\n    if (validDirections.includes(direction)) {\n      this.log('navigateByDirection', 'direction', direction);\n      this.smartNavigate(direction, '', focusDetails);\n    } else {\n      this.log('navigateByDirection', `Invalid direction. You passed: \\`${direction}\\`, but you can use only these: `, validDirections);\n    }\n  }\n\n  onKeyEvent(event: KeyboardEvent) {\n    if (this.visualDebugger) {\n      this.visualDebugger.clear();\n    }\n\n    const direction = findKey(this.getKeyMap(), (code) => event.keyCode === code);\n\n    this.smartNavigate(direction || '', '', { event });\n\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  /**\n   * This function navigates between siblings OR goes up by the Tree\n   * Based on the Direction\n   */\n  smartNavigate(direction: string, fromParentFocusKey: string, focusDetails: FocusDetails, isLoop?: boolean) {\n    if (this.nativeMode) {\n      return;\n    }\n\n    this.log('smartNavigate', 'direction', direction);\n    this.log('smartNavigate', 'fromParentFocusKey', fromParentFocusKey);\n    this.log('smartNavigate', 'this.focusKey', this.focusKey);\n\n    if (!fromParentFocusKey) {\n      forOwn(this.focusableComponents, (component) => {\n        // eslint-disable-next-line no-param-reassign\n        component.layoutUpdated = false;\n      });\n    }\n\n    const currentComponent = this.focusableComponents[fromParentFocusKey || this.focusKey];\n\n    this.log(\n      'smartNavigate',\n      'currentComponent',\n      currentComponent ? currentComponent.focusKey : undefined,\n      currentComponent ? currentComponent.node : undefined,\n    );\n\n    if (currentComponent) {\n      this.updateLayout(currentComponent.focusKey);\n\n      const { parentFocusKey, focusKey, layout } = currentComponent;\n      const parentComponent = this.focusableComponents[parentFocusKey];\n      // 1. 방향 체크\n      const isVerticalDirection = direction === DIRECTION_DOWN || direction === DIRECTION_UP;\n      const isIncrementalDirection = direction === DIRECTION_DOWN || direction === DIRECTION_RIGHT;\n\n      let nextComponent: FocusableComponentProps | undefined;\n      if (currentComponent.navigationType === NavigationType.SPATIAL) {\n        // 2. 현재 노드의 기준점 체크\n        const currentCutoffCoordinate = parentComponent?.overlapChildren\n          ? getCutoffCoordinateFromCenter(isVerticalDirection, layout)\n          : getCutoffCoordinateFromEdge(isVerticalDirection, layout, isIncrementalDirection);\n\n        /**\n         * Get only the siblings with the coords on the way of our moving direction\n         */\n\n        // 3. 방향 & 기준 점 기준 이웃 노드 체크\n        const siblings = filter(this.focusableComponents, (component) => {\n          if (component.parentFocusKey === parentFocusKey && component.focusable && component.layout) {\n            this.updateLayout(component.focusKey);\n            const siblingCutoffCoordinate = parentComponent?.overlapChildren\n              ? getCutoffCoordinateFromCenter(isVerticalDirection, component.layout)\n              : getCutoffCoordinateFromEdge(isVerticalDirection, component.layout, isIncrementalDirection, true);\n\n            if (siblingCutoffCoordinate && currentCutoffCoordinate) {\n              if (parentComponent?.overlapChildren) {\n                return isIncrementalDirection ? siblingCutoffCoordinate > currentCutoffCoordinate : siblingCutoffCoordinate < currentCutoffCoordinate;\n              }\n              return isIncrementalDirection ? siblingCutoffCoordinate >= currentCutoffCoordinate : siblingCutoffCoordinate <= currentCutoffCoordinate;\n            }\n          }\n\n          return false;\n        });\n\n        if (this.debug) {\n          this.log('smartNavigate', 'currentCutoffCoordinate', currentCutoffCoordinate);\n          this.log(\n            'smartNavigate',\n            'siblings',\n            `${siblings.length} elements:`,\n            siblings.map((sibling) => sibling.focusKey).join(', '),\n            siblings.map((sibling) => sibling.node),\n          );\n        }\n\n        if (this.visualDebugger) {\n          const refCorners = getRefCornersFromEdge(direction, layout as FocusableComponentLayout);\n\n          this.visualDebugger.drawPoint(refCorners.a.x, refCorners.a.y);\n          this.visualDebugger.drawPoint(refCorners.b.x, refCorners.b.y);\n        }\n\n        // 4. 이웃 우선순위 정렬\n        // const sortedSiblings = this.sortSiblingsByPriority(siblings, layout, direction, focusKey, parentComponent);\n        const sortedSiblings =\n          parentComponent &&\n          parentComponent.childrenEndPointAction &&\n          parentComponent.childrenEndPointAction !== CHILDREN_ENDPOINT_ACTION.NONE &&\n          parentComponent.childrenEndPointAction !== CHILDREN_ENDPOINT_ACTION.ISOLATED\n            ? this.sortAdjacentSiblingsByPriority(siblings, layout, direction, focusKey)\n            : this.sortSiblingsByPriority(siblings, layout as FocusableComponentLayout, direction, focusKey, parentComponent);\n\n        if (isLoop) {\n          sortedSiblings.reverse();\n        }\n\n        nextComponent = first(sortedSiblings);\n      } else if (\n        (currentComponent.navigationType === NavigationType.VERTICAL && isVerticalDirection) ||\n        (currentComponent.navigationType === NavigationType.HORIZONTAL && !isVerticalDirection)\n      ) {\n        const focusableComponents = Object.values(this.focusableComponents);\n        const siblings = focusableComponents\n          .filter((component) => {\n            return (\n              component.focusable &&\n              component.focusIndex !== undefined &&\n              currentComponent.focusIndex !== undefined &&\n              component.parentFocusKey === parentFocusKey &&\n              (isIncrementalDirection ? component.focusIndex > currentComponent.focusIndex : component.focusIndex < currentComponent.focusIndex)\n            );\n          })\n          .sort((a, b) => {\n            if (a.focusIndex === undefined || b.focusIndex === undefined) {\n              return 0;\n            }\n            return a.focusIndex - b.focusIndex;\n          });\n\n        if (isLoop) {\n          nextComponent = isIncrementalDirection ? first(focusableComponents) : last(focusableComponents);\n        } else {\n          nextComponent = isIncrementalDirection ? first(siblings) : last(siblings);\n        }\n      }\n\n      this.log('smartNavigate', 'nextComponent', nextComponent ? nextComponent.focusKey : undefined, nextComponent ? nextComponent.node : undefined);\n\n      if (nextComponent) {\n        this.setFocus(nextComponent.focusKey, focusDetails);\n      } else {\n        // Check setting of childrenEndpointAction\n        const EndPointActionResult = checkChildrenEndpointAction(direction, parentComponent?.childrenEndPointAction);\n\n        if (EndPointActionResult === CHILDREN_ENDPOINT_ACTION_RESULT.LOOP && !isLoop) {\n          // call recursive when you set the kind of mode 'LOOP'\n          this.smartNavigate(getOppositeDirection(direction), '', focusDetails, true);\n        } else if (EndPointActionResult === CHILDREN_ENDPOINT_ACTION_RESULT.NONE) {\n          // find next group focusable components\n          this.saveLastFocusedChildKey(parentComponent, focusKey);\n          if (parentComponent && parentComponent.isFocusBoundary) {\n            const keysDetails = {\n              pressedKeys: this.pressedKeys,\n            };\n            if (parentComponent.onChildrenEndPointEvent) {\n              // Check onChildrenEndpoint Event. If it is, you can get the callBackEvent you registered.\n              parentComponent.onChildrenEndPointEvent(direction, keysDetails);\n            }\n          } else {\n            this.smartNavigate(direction, parentFocusKey, focusDetails);\n          }\n        }\n      }\n    }\n  }\n\n  saveLastFocusedChildKey(component: FocusableComponentProps, focusKey: string) {\n    if (component) {\n      this.log('saveLastFocusedChildKey', `${component.focusKey} lastFocusedChildKey set`, focusKey);\n\n      // eslint-disable-next-line no-param-reassign\n      component.lastFocusedChildKey = focusKey;\n    }\n  }\n\n  log(functionName: string, debugString: string, ...rest: unknown[]) {\n    if (this.debug) {\n      // eslint-disable-next-line no-console\n      console.log(\n        `%c${functionName}%c${debugString}`,\n        `background: ${DEBUG_FN_COLORS[this.logIndex % DEBUG_FN_COLORS.length]}; color: black; padding: 1px 5px;`,\n        'background: #333; color: #BADA55; padding: 1px 5px;',\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        ...rest,\n      );\n    }\n  }\n\n  /**\n   * This function tries to determine the next component to Focus\n   * It's either the target node OR the one down by the Tree if node has children components\n   * Based on \"targetFocusKey\" which means the \"intended component to focus\"\n   */\n  getNextFocusKey(targetFocusKey: string): string {\n    const targetComponent = this.focusableComponents[targetFocusKey];\n\n    /**\n     * Security check, if component doesn't exist, stay on the same focusKey\n     */\n    if (!targetComponent || this.nativeMode) {\n      return targetFocusKey;\n    }\n    const children = filter(\n      this.focusableComponents,\n      (component) => component.parentFocusKey === targetFocusKey && component.focusable && component.node && document.body.contains(component.node),\n    );\n\n    if (children.length > 0) {\n      const { lastFocusedChildKey, preferredChildFocusKey } = targetComponent;\n\n      this.log('getNextFocusKey', 'lastFocusedChildKey is', lastFocusedChildKey);\n      this.log('getNextFocusKey', 'preferredChildFocusKey is', preferredChildFocusKey);\n\n      /**\n       * First of all trying to focus last focused child\n       */\n      if (lastFocusedChildKey && targetComponent.saveLastFocusedChild && this.isParticipatingFocusableComponent(lastFocusedChildKey)) {\n        this.log('getNextFocusKey', 'lastFocusedChildKey will be focused', lastFocusedChildKey);\n        return this.getNextFocusKey(lastFocusedChildKey);\n      }\n\n      /**\n       * If there is no lastFocusedChild, trying to focus the preferred focused key\n       */\n      if (preferredChildFocusKey && targetFocusKey !== preferredChildFocusKey && this.isParticipatingFocusableComponent(preferredChildFocusKey)) {\n        this.log('getNextFocusKey', 'preferredChildFocusKey will be focused', preferredChildFocusKey);\n        return this.getNextFocusKey(preferredChildFocusKey);\n      }\n\n      /**\n       * Otherwise, trying to focus something by coordinates\n       */\n      children.forEach((component) => this.updateLayout(component.focusKey));\n\n      let child: FocusableComponentProps | undefined;\n      if (targetComponent.navigationType === NavigationType.SPATIAL) {\n        child = getChildSpatialClosestToOrigin(children);\n      } else if (lastFocusedChildKey) {\n        const lastFocusedChild = this.focusableComponents[lastFocusedChildKey];\n        child = getChildSequentialClosestToOrigin(lastFocusedChild.focusIndex || 0, children);\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        child = children[0];\n      }\n\n      this.log('getNextFocusKey', 'childKey will be focused', child?.focusKey);\n      return this.getNextFocusKey(child?.focusKey || '');\n    }\n\n    /**\n     * If no children, just return targetFocusKey back\n     */\n    this.log('getNextFocusKey', 'targetFocusKey', targetFocusKey);\n\n    return targetFocusKey;\n  }\n\n  addFocusable({\n    focusKey,\n    navigationType,\n    focusIndex,\n    node,\n    parentFocusKey,\n    onEnterPress,\n    onEnterRelease,\n    onArrowPress,\n    onBackPress,\n    onFocus,\n    onBlur,\n    saveLastFocusedChild,\n    trackChildren,\n    onUpdateFocus,\n    onUpdateHasFocusedChild,\n    preferredChildFocusKey,\n    autoRestoreFocus,\n    focusable,\n    isInactive,\n    isFocusBoundary,\n    onChildrenEndPointEvent,\n    childrenEndPointAction,\n    overlapChildren,\n  }: FocusableComponentProps) {\n    this.focusableComponents[focusKey] = {\n      focusKey,\n      navigationType,\n      focusIndex,\n      node,\n      parentFocusKey,\n      onEnterPress,\n      onEnterRelease,\n      onArrowPress,\n      onBackPress,\n      onFocus,\n      onBlur,\n      onUpdateFocus,\n      onUpdateHasFocusedChild,\n      saveLastFocusedChild,\n      trackChildren,\n      preferredChildFocusKey,\n      focusable,\n      isInactive,\n      isFocusBoundary,\n      autoRestoreFocus,\n      onChildrenEndPointEvent,\n      childrenEndPointAction,\n      lastFocusedChildKey: undefined,\n      layout: {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0,\n\n        /**\n         * Node ref is also duplicated in layout to be reported in onFocus callback\n         */\n        node,\n      },\n      layoutUpdated: false,\n      overlapChildren,\n    };\n\n    if (this.nativeMode) {\n      return;\n    }\n\n    this.updateLayout(focusKey);\n\n    /**\n     * If for some reason this component was already focused before it was added, call the update\n     */\n    if (focusKey === this.focusKey) {\n      this.setFocus(focusKey);\n    }\n  }\n\n  removeFocusable({ focusKey }: FocusableComponentRemovePayload) {\n    const componentToRemove = this.focusableComponents[focusKey];\n\n    if (componentToRemove) {\n      const { parentFocusKey } = componentToRemove;\n\n      Reflect.deleteProperty(this.focusableComponents, focusKey);\n\n      const parentComponent = this.focusableComponents[parentFocusKey];\n      const isFocused = focusKey === this.focusKey;\n\n      /**\n       * If the component was stored as lastFocusedChild, clear lastFocusedChildKey from parent\n       */\n      if (parentComponent && parentComponent.lastFocusedChildKey === focusKey) {\n        parentComponent.lastFocusedChildKey = undefined;\n      }\n\n      if (this.nativeMode) {\n        return;\n      }\n\n      /**\n       * If the component was also focused at this time, focus another one\n       */\n      if (isFocused && parentComponent && parentComponent.autoRestoreFocus) {\n        this.setFocus(parentFocusKey);\n      }\n    }\n  }\n\n  getNodeLayoutByFocusKey(focusKey: string) {\n    const component = this.focusableComponents[focusKey];\n\n    if (component) {\n      this.updateLayout(component.focusKey);\n\n      return component.layout;\n    }\n\n    return null;\n  }\n\n  setCurrentFocusedKey(newFocusKey: string, focusDetails: FocusDetails) {\n    if (this.isFocusableComponent(this.focusKey) && newFocusKey !== this.focusKey) {\n      const oldComponent = this.focusableComponents[this.focusKey];\n      const parentComponent = this.focusableComponents[oldComponent.parentFocusKey];\n\n      this.saveLastFocusedChildKey(parentComponent, this.focusKey);\n\n      oldComponent.onUpdateFocus(false);\n\n      const nodeByFocusKey = this.getNodeLayoutByFocusKey(this.focusKey);\n\n      if (nodeByFocusKey) {\n        oldComponent.onBlur(nodeByFocusKey, focusDetails);\n      }\n    }\n\n    this.focusKey = newFocusKey;\n\n    if (this.isFocusableComponent(this.focusKey)) {\n      const newComponent = this.focusableComponents[this.focusKey];\n\n      newComponent.onUpdateFocus(true);\n\n      const nodeByFocusKey = this.getNodeLayoutByFocusKey(this.focusKey);\n      if (nodeByFocusKey) {\n        newComponent.onFocus(nodeByFocusKey, focusDetails);\n      }\n    }\n  }\n\n  updateParentsHasFocusedChild(focusKey: string, focusDetails: FocusDetails) {\n    const parents = [] as string[];\n\n    let currentComponent = this.focusableComponents[focusKey];\n\n    /**\n     * Recursively iterate the tree up and find all the parents' focus keys\n     */\n    while (currentComponent) {\n      const { parentFocusKey } = currentComponent;\n\n      const parentComponent = this.focusableComponents[parentFocusKey];\n\n      if (parentComponent) {\n        const { focusKey: currentParentFocusKey } = parentComponent;\n\n        parents.push(currentParentFocusKey);\n      }\n\n      currentComponent = parentComponent;\n    }\n\n    const parentsToRemoveFlag = difference(this.parentsHavingFocusedChild, parents);\n    const parentsToAddFlag = difference(parents, this.parentsHavingFocusedChild);\n\n    forEach(parentsToRemoveFlag, (parentFocusKey) => {\n      const parentComponent = this.focusableComponents[parentFocusKey];\n\n      if (parentComponent && parentComponent.trackChildren) {\n        parentComponent.onUpdateHasFocusedChild(false);\n      }\n      this.onIntermediateNodeBecameBlurred(parentFocusKey, focusDetails);\n    });\n\n    forEach(parentsToAddFlag, (parentFocusKey) => {\n      const parentComponent = this.focusableComponents[parentFocusKey];\n\n      if (parentComponent && parentComponent.trackChildren) {\n        parentComponent.onUpdateHasFocusedChild(true);\n      }\n      this.onIntermediateNodeBecameFocused(parentFocusKey, focusDetails);\n    });\n\n    this.parentsHavingFocusedChild = parents;\n  }\n\n  updateParentsLastFocusedChild(focusKey: string) {\n    let currentComponent = this.focusableComponents[focusKey];\n\n    /**\n     * Recursively iterate the tree up and update all the parent's lastFocusedChild\n     */\n    while (currentComponent) {\n      const { parentFocusKey } = currentComponent;\n\n      const parentComponent = this.focusableComponents[parentFocusKey];\n\n      if (parentComponent) {\n        this.saveLastFocusedChildKey(parentComponent, currentComponent.focusKey);\n      }\n\n      currentComponent = parentComponent;\n    }\n  }\n\n  getKeyMap() {\n    return this.keyMap;\n  }\n\n  setKeyMap(keyMap: KeyMap) {\n    this.keyMap = {\n      ...this.getKeyMap(),\n      ...keyMap,\n    };\n  }\n\n  isFocusableComponent(focusKey: string) {\n    return !!this.focusableComponents[focusKey];\n  }\n\n  /**\n   * Checks whether the focusableComponent is actually participating in spatial navigation (in other words, is a\n   * 'focusable' focusableComponent). Seems less confusing than calling it isFocusableFocusableComponent()\n   */\n  isParticipatingFocusableComponent(focusKey: string) {\n    return (\n      this.isFocusableComponent(focusKey) &&\n      this.focusableComponents[focusKey].focusable &&\n      document.body.contains(this.focusableComponents[focusKey].node)\n    );\n  }\n\n  onIntermediateNodeBecameFocused(focusKey: string, focusDetails: FocusDetails) {\n    if (this.isParticipatingFocusableComponent(focusKey)) {\n      const node = this.getNodeLayoutByFocusKey(focusKey);\n      if (node) {\n        this.focusableComponents[focusKey].onFocus(node, focusDetails);\n      }\n    }\n  }\n\n  onIntermediateNodeBecameBlurred(focusKey: string, focusDetails: FocusDetails) {\n    if (this.isParticipatingFocusableComponent(focusKey)) {\n      const node = this.getNodeLayoutByFocusKey(focusKey);\n      if (node) {\n        this.focusableComponents[focusKey].onBlur(node, focusDetails);\n      }\n    }\n  }\n\n  pause() {\n    this.paused = true;\n  }\n\n  resume() {\n    this.paused = false;\n  }\n\n  focusKeyStack: string[] = [];\n\n  getComponentByFocusKey(focusKey: string): FocusableComponentProps | undefined {\n    return this.focusableComponents[focusKey];\n  }\n\n  setFocus(focusKey: string, focusDetails: FocusDetails = {}) {\n    if (!this.enabled) {\n      return;\n    }\n\n    // console.groupCollapsed('bt! focus', `${this.focusKey}`, 'to', `${focusKey}`);\n    // console.trace(); // hidden in collapsed group\n    // console.groupEnd();\n\n    this.log('setFocus', 'focusKey', focusKey);\n\n    const lastFocusedKey = this.focusKey;\n\n    this.focusKeyStack.push(lastFocusedKey);\n    if (this.focusKeyStack.length > 100) {\n      this.focusKeyStack.shift();\n    }\n\n    const newFocusKey = this.getNextFocusKey(focusKey);\n\n    this.log('setFocus', 'newFocusKey', newFocusKey);\n\n    this.setCurrentFocusedKey(newFocusKey, focusDetails);\n    this.updateParentsHasFocusedChild(newFocusKey, focusDetails);\n    this.updateParentsLastFocusedChild(lastFocusedKey);\n  }\n\n  getCurrentFocus() {\n    return this.focusKey;\n  }\n\n  getCurrentComponent() {\n    return this.focusableComponents[this.focusKey];\n  }\n\n  updateAllLayouts() {\n    if (this.nativeMode) {\n      return;\n    }\n\n    forOwn(this.focusableComponents, (_, focusKey) => {\n      this.updateLayout(focusKey);\n    });\n  }\n\n  updateLayout(focusKey: string) {\n    const component = this.focusableComponents[focusKey];\n\n    if (!component || this.nativeMode || component.layoutUpdated) {\n      return;\n    }\n\n    const { node, navigationType } = component;\n    if (node) {\n      if (navigationType === NavigationType.SPATIAL) {\n        component.layout = {\n          ...measureLayout(node),\n          node,\n        };\n      } else {\n        component.layout = { node };\n      }\n    }\n  }\n\n  updateFocusable(\n    focusKey: string,\n    {\n      node,\n      preferredChildFocusKey,\n      focusable,\n      isFocusBoundary,\n      onEnterPress,\n      onEnterRelease,\n      onArrowPress,\n      onBackPress,\n      onFocus,\n      onBlur,\n      onChildrenEndPointEvent,\n    }: FocusableComponentUpdatePayload,\n  ) {\n    if (this.nativeMode) {\n      return;\n    }\n\n    const component = this.focusableComponents[focusKey];\n\n    if (component) {\n      component.preferredChildFocusKey = preferredChildFocusKey;\n      component.focusable = focusable;\n      component.isFocusBoundary = isFocusBoundary;\n      component.onEnterPress = onEnterPress;\n      component.onEnterRelease = onEnterRelease;\n      component.onArrowPress = onArrowPress;\n      component.onBackPress = onBackPress;\n      component.onFocus = onFocus;\n      component.onBlur = onBlur;\n      component.onChildrenEndPointEvent = onChildrenEndPointEvent;\n\n      if (node) {\n        component.node = node;\n      }\n    }\n  }\n\n  isNativeMode() {\n    return this.nativeMode;\n  }\n\n  private static INSTANCES: Record<string, TvingFocusable> = {};\n\n  static getInstance(rootKey: TV_PAGE) {\n    if (!TvingFocusable.INSTANCES[rootKey]) {\n      this.INSTANCES[rootKey] = new TvingFocusable(rootKey);\n    }\n    return this.INSTANCES[rootKey];\n  }\n}\n\n/**\n * Export singleton\n */\n/** @internal */\n// export const TvingFocusable = new TvingFocusable();\n\nexport default TvingFocusable;\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\n// export const { initTvingFocusable, destroyTvingFocusable, setKeyMap } = TvingFocusable;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/VisualDebugger.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/contants.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/hooks/useEffectOnce.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/hooks/useFocusable.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-explicit-any",
        severity: 2,
        message: "Unexpected any. Specify a different type.",
        line: 40,
        column: 18,
        nodeType: "TSAnyKeyword",
        messageId: "unexpectedAny",
        endLine: 40,
        endColumn: 21,
        suggestions: [
          {
            messageId: "suggestUnknown",
            fix: {
              range: [1620, 1623],
              text: "unknown",
            },
            desc: "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
          },
          {
            messageId: "suggestNever",
            fix: {
              range: [1620, 1623],
              text: "never",
            },
            desc: "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
          },
        ],
      },
      {
        ruleId: "@typescript-eslint/no-redundant-type-constituents",
        severity: 2,
        message: "'any' overrides all other types in this union type.",
        line: 57,
        column: 63,
        nodeType: "TSTypeReference",
        messageId: "overrides",
        endLine: 57,
        endColumn: 111,
      },
      {
        ruleId: "react-hooks/exhaustive-deps",
        severity: 1,
        message:
          "React Hook useCallback has a missing dependency: 'tvingFocusable'. Either include it or remove the dependency array.",
        line: 137,
        column: 6,
        nodeType: "ArrayExpression",
        endLine: 137,
        endColumn: 16,
        suggestions: [
          {
            desc: "Update the dependencies array to be: [focusKey, tvingFocusable]",
            fix: {
              range: [4702, 4712],
              text: "[focusKey, tvingFocusable]",
            },
          },
        ],
      },
      {
        ruleId: "react-hooks/exhaustive-deps",
        severity: 1,
        message:
          "React Hook useEffect has missing dependencies: 'autoRestoreFocus', 'childrenEndPointAction', 'focusIndex', 'focusKey', 'focusable', 'isFocusBoundary', 'isInactive', 'navigationType', 'onArrowPressHandler', 'onBackPress', 'onBlurHandler', 'onChildrenEndPointEventHandler', 'onEnterPressHandler', 'onEnterReleaseHandler', 'onFocusHandler', 'overlapChildren', 'parentFocusKey', 'preferredChildFocusKey', 'saveLastFocusedChild', 'trackChildren', and 'tvingFocusable'. Either include them or remove the dependency array.",
        line: 174,
        column: 6,
        nodeType: "ArrayExpression",
        endLine: 174,
        endColumn: 8,
        suggestions: [
          {
            desc: "Update the dependencies array to be: [autoRestoreFocus, childrenEndPointAction, focusIndex, focusKey, focusable, isFocusBoundary, isInactive, navigationType, onArrowPressHandler, onBackPress, onBlurHandler, onChildrenEndPointEventHandler, onEnterPressHandler, onEnterReleaseHandler, onFocusHandler, overlapChildren, parentFocusKey, preferredChildFocusKey, saveLastFocusedChild, trackChildren, tvingFocusable]",
            fix: {
              range: [5704, 5706],
              text: "[autoRestoreFocus, childrenEndPointAction, focusIndex, focusKey, focusable, isFocusBoundary, isInactive, navigationType, onArrowPressHandler, onBackPress, onBlurHandler, onChildrenEndPointEventHandler, onEnterPressHandler, onEnterReleaseHandler, onFocusHandler, overlapChildren, parentFocusKey, preferredChildFocusKey, saveLastFocusedChild, trackChildren, tvingFocusable]",
            },
          },
        ],
      },
      {
        ruleId: "react-hooks/exhaustive-deps",
        severity: 1,
        message:
          "React Hook useEffect has a missing dependency: 'tvingFocusable'. Either include it or remove the dependency array.",
        line: 193,
        column: 6,
        nodeType: "ArrayExpression",
        endLine: 205,
        endColumn: 4,
        suggestions: [
          {
            desc: "Update the dependencies array to be: [focusKey, preferredChildFocusKey, focusable, isFocusBoundary, onEnterPressHandler, onEnterReleaseHandler, onArrowPressHandler, onBackPress, onFocusHandler, onBlurHandler, onChildrenEndPointEventHandler, tvingFocusable]",
            fix: {
              range: [6219, 6471],
              text: "[focusKey, preferredChildFocusKey, focusable, isFocusBoundary, onEnterPressHandler, onEnterReleaseHandler, onArrowPressHandler, onBackPress, onFocusHandler, onBlurHandler, onChildrenEndPointEventHandler, tvingFocusable]",
            },
          },
        ],
      },
    ],
    suppressedMessages: [],
    errorCount: 2,
    fatalErrorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { RefObject, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport DebouncedFunc from 'lodash/function';\nimport noop from 'lodash/noop';\nimport uniqueId from 'lodash/uniqueId';\n\nimport { TV_PAGE } from '../../../constants/commonConstants';\nimport { CHILDREN_ENDPOINT_ACTION } from '../contants';\nimport TvingFocusable from '../TvingFocusable';\nimport { ChildrenEndPointAction, FocusableComponentLayout, FocusableComponentProps, FocusDetails, KeyPressDetails, NavigationType } from '../types';\n\nimport { useFocusContext, useFocusRoot } from './useFocusedContext';\n\ninterface UseFocusableProps {\n  focusable?: boolean;\n  saveLastFocusedChild?: boolean;\n  trackChildren?: boolean;\n  autoRestoreFocus?: boolean;\n  isInactive?: boolean;\n  isFocusBoundary?: boolean;\n  focusKey?: string;\n\n  navigationType?: NavigationType;\n  focusIndex?: number;\n\n  preferredChildFocusKey?: string;\n  onEnterPress?: (props: object, details: KeyPressDetails) => void;\n  onEnterRelease?: (props: object) => void;\n  onArrowPress?: (direction: string, props: object, details: KeyPressDetails) => boolean;\n  onBackPress?: (details: KeyPressDetails) => void;\n  onFocus?: (layout: FocusableComponentLayout, props: object, details: FocusDetails) => void;\n  onBlur?: (layout: FocusableComponentLayout, props: object, details: FocusDetails) => void;\n  onChildrenEndPointEvent?: (direction: string, details: KeyPressDetails) => void;\n  extraProps?: object;\n  childrenEndPointAction?: ChildrenEndPointAction;\n  overlapChildren?: boolean; // true 인 경우 겹쳐있는 노드까지 이웃으로 허용\n}\n\nexport interface UseFocusableResult {\n  ref: RefObject<any>; // <any> since we don't know which HTML tag is passed here\n  focusSelf: () => void;\n  focused: boolean;\n  hasFocusedChild: boolean;\n  focusKey: string;\n  focusIndex: number;\n  parentFocusKey: string;\n  setFocus: (focusKey: string) => void;\n  getComponentByFocusKey: (focusKey: string) => FocusableComponentProps | undefined;\n  getCurrentFocus: () => string;\n  navigateByDirection: (direction: string, focusDetails?: FocusDetails) => void;\n  pause: () => void;\n  resume: () => void;\n  updateAllLayouts: () => void;\n  focusable: boolean;\n\n  tvingFocusableRef: RefObject<TvingFocusable>;\n  keyDownEventListener: ((event: KeyboardEvent) => boolean) | DebouncedFunc<(event: KeyboardEvent) => boolean>;\n  keyUpEventListener: (event: KeyboardEvent) => boolean;\n}\n\nconst useFocusableHook = ({\n  focusable = true,\n  saveLastFocusedChild = true,\n  trackChildren = false,\n  autoRestoreFocus = true,\n  isInactive = false,\n  isFocusBoundary = false,\n  focusKey: propFocusKey,\n  navigationType = NavigationType.SPATIAL,\n  focusIndex,\n  preferredChildFocusKey,\n  onChildrenEndPointEvent = noop,\n  onEnterPress = noop,\n  onEnterRelease = noop,\n  onArrowPress = () => true,\n  onBackPress,\n  onFocus = noop,\n  onBlur = noop,\n  extraProps,\n  childrenEndPointAction = CHILDREN_ENDPOINT_ACTION.NONE,\n  overlapChildren = false,\n}: UseFocusableProps = {}): UseFocusableResult => {\n  const onEnterPressHandler = useCallback(\n    (details: KeyPressDetails) => {\n      onEnterPress(extraProps || {}, details);\n    },\n    [onEnterPress, extraProps],\n  );\n\n  const onEnterReleaseHandler = useCallback(() => {\n    onEnterRelease(extraProps || {});\n  }, [onEnterRelease, extraProps]);\n\n  const onArrowPressHandler = useCallback(\n    (direction: string, details: KeyPressDetails) => onArrowPress(direction, extraProps || {}, details),\n    [extraProps, onArrowPress],\n  );\n\n  const onFocusHandler = useCallback(\n    (layout: FocusableComponentLayout, details: FocusDetails) => {\n      onFocus(layout, extraProps || {}, details);\n    },\n    [extraProps, onFocus],\n  );\n\n  const onBlurHandler = useCallback(\n    (layout: FocusableComponentLayout, details: FocusDetails) => {\n      onBlur(layout, extraProps || {}, details);\n    },\n    [extraProps, onBlur],\n  );\n  const onChildrenEndPointEventHandler = useCallback(\n    (direction: string, details: KeyPressDetails) => onChildrenEndPointEvent(direction, details),\n    [onChildrenEndPointEvent],\n  );\n\n  const ref = useRef(null);\n\n  const [focused, setFocused] = useState(false);\n  const [hasFocusedChild, setHasFocusedChild] = useState(false);\n\n  const rootFocusKey = useFocusRoot();\n  if (!rootFocusKey) {\n    throw new Error('useFocusable must be used inside a FocusRoot');\n  }\n  const tvingFocusable = TvingFocusable.getInstance(rootFocusKey as TV_PAGE);\n\n  const parentFocusKey = useFocusContext();\n\n  /**\n   * Either using the propFocusKey passed in, or generating a random one\n   */\n  const focusKey = useMemo(() => propFocusKey || uniqueId('TVING_'), [propFocusKey]);\n\n  const focusSelf = useCallback(() => {\n    tvingFocusable.setFocus(focusKey);\n  }, [focusKey]);\n\n  useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      tvingFocusable.addFocusable({\n        focusKey,\n        navigationType,\n        focusIndex,\n        node,\n        parentFocusKey,\n        preferredChildFocusKey,\n        onEnterPress: onEnterPressHandler,\n        onEnterRelease: onEnterReleaseHandler,\n        onArrowPress: onArrowPressHandler,\n        onBackPress,\n        onFocus: onFocusHandler,\n        onBlur: onBlurHandler,\n        onUpdateFocus: (isFocused = false) => setFocused(isFocused),\n        onUpdateHasFocusedChild: (isFocused = false) => setHasFocusedChild(isFocused),\n        saveLastFocusedChild,\n        trackChildren,\n        isInactive,\n        isFocusBoundary,\n        onChildrenEndPointEvent: onChildrenEndPointEventHandler,\n        autoRestoreFocus,\n        focusable,\n        childrenEndPointAction,\n        overlapChildren,\n      });\n    }\n\n    return () => {\n      tvingFocusable.removeFocusable({\n        focusKey,\n      });\n    };\n  }, []);\n\n  useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      tvingFocusable.updateFocusable(focusKey, {\n        node,\n        preferredChildFocusKey,\n        focusable,\n        isFocusBoundary,\n        onEnterPress: onEnterPressHandler,\n        onEnterRelease: onEnterReleaseHandler,\n        onArrowPress: onArrowPressHandler,\n        onBackPress,\n        onFocus: onFocusHandler,\n        onBlur: onBlurHandler,\n        onChildrenEndPointEvent: onChildrenEndPointEventHandler,\n      });\n    }\n  }, [\n    focusKey,\n    preferredChildFocusKey,\n    focusable,\n    isFocusBoundary,\n    onEnterPressHandler,\n    onEnterReleaseHandler,\n    onArrowPressHandler,\n    onBackPress,\n    onFocusHandler,\n    onBlurHandler,\n    onChildrenEndPointEventHandler,\n  ]);\n\n  const tvingFocusableRef = useRef<TvingFocusable>(tvingFocusable);\n\n  return {\n    ref,\n    focusSelf,\n    focused,\n    hasFocusedChild,\n    focusKey, // returns either the same focusKey as passed in, or generated one\n    focusIndex: focusIndex as number,\n    parentFocusKey,\n    setFocus: tvingFocusable.isNativeMode() ? noop : tvingFocusable.setFocus.bind(tvingFocusable),\n    getComponentByFocusKey: tvingFocusable.getComponentByFocusKey.bind(tvingFocusable),\n    getCurrentFocus: tvingFocusable.getCurrentFocus.bind(tvingFocusable),\n    navigateByDirection: tvingFocusable.navigateByDirection.bind(tvingFocusable),\n    pause: tvingFocusable.pause.bind(tvingFocusable),\n    resume: tvingFocusable.resume.bind(tvingFocusable),\n    updateAllLayouts: tvingFocusable.updateAllLayouts.bind(tvingFocusable),\n    focusable,\n    tvingFocusableRef,\n    keyDownEventListener: tvingFocusable.keyDownEventListener.bind(tvingFocusable),\n    keyUpEventListener: tvingFocusable.keyUpEventListener.bind(tvingFocusable),\n  };\n};\n\nexport const useFocusable = useFocusableHook;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/hooks/useFocusedContext.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/index.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/types.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/utils/checkChildrenEndpointAction.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/utils/checkChildrenEndpointAction.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/utils/getCutoffCoordinateFromCenter.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/utils/getCutoffCoordinateFromEdge.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/utils/getOppositeDirection.test.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/utils/getOppositeDirection.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/utils/getRefCornersFromCenter.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/utils/getRefCornersFromEdge.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-focusable/utils/measureLayout.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-log-module/TvingLogModule.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-unused-vars",
        severity: 2,
        message: "'tags' is defined but never used.",
        line: 219,
        column: 65,
        nodeType: "Identifier",
        messageId: "unusedVar",
        endLine: 219,
        endColumn: 94,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import * as Sentry from '@sentry/react';\n\nimport amplitudeEvent, { AmplitudeEventProps } from '../amplitude/amplitudeEvent';\n\nexport interface TvingLogModuleOption {\n  isConsole?: boolean;\n}\n\nconst logDomWithCSS = (dom: HTMLElement, args: unknown[], css: string) => {\n  const messages = args.reduce((acc, cur) => {\n    if (typeof cur === 'object' || Array.isArray(cur)) {\n      return `${acc} ${JSON.stringify(cur)}`;\n    }\n    return `${acc} ${cur}`;\n  }, '');\n\n  const logDom = document.createElement('p');\n  logDom.setAttribute('style', css);\n  logDom.innerText = messages as string;\n  dom.appendChild(logDom);\n};\n\nconst consoleWithCSS = (console: Console, args: unknown[], css: string) => {\n  const messages = args.reduce((acc, cur) => {\n    if (typeof cur === 'object' || Array.isArray(cur)) {\n      return `${acc} ${JSON.stringify(cur)}`;\n    }\n    return `${acc} ${cur}`;\n  }, '');\n\n  console.log(`%c${messages}`, css);\n};\n\nexport interface AmplitudeEventDefaultPropertiesProps {\n  mediatype: string | null;\n  channel_code: string | null;\n  channel_name: string | null;\n  code: string | null;\n  program_code: string | null;\n  program_name: string | null;\n  ctgr_name: string | null;\n  ctgr_code: string | null;\n}\nenum LOG_LEVEL {\n  TRACE,\n  DEBUG,\n  INFO,\n  WARN,\n  ERROR,\n  FATAL,\n}\n\n/**\n * TvingLogModule은 Sentry, Console 등 다양한 로그를 관리하는 모듈입니다.\n *\n */\nclass TvingLogModule {\n  private isDebug = process.env.NODE_ENV === 'development';\n\n  private isReal = process.env.REACT_APP_RELEASE === 'PRODUCTION';\n\n  private readonly console: Console;\n\n  private readonly sentry: typeof Sentry;\n\n  private consoleDom: HTMLElement | null = null;\n\n  private logLevel: LOG_LEVEL = LOG_LEVEL.DEBUG;\n\n  // 임의의 DOM에 콘솔 내역을 출력\n  private isConsole = false;\n\n  isAmplitudeConsole = false;\n\n  lastPageView = '';\n\n  constructor(option?: TvingLogModuleOption) {\n    this.console = console;\n    this.sentry = Sentry;\n    this.isConsole = !this.isReal && !!option?.isConsole;\n\n    if (!this.isReal) {\n      this.registerKeydownEvent();\n    }\n\n    if (this.isConsole) {\n      this.drawConsoleDom();\n    }\n  }\n\n  registerKeydownEvent() {\n    document.addEventListener('keydown', (e) => {\n      // noinspection JSDeprecatedSymbols\n      switch (e.keyCode) {\n        case 48: {\n          if (this.consoleDom) {\n            this.consoleDom.innerHTML = '';\n          }\n          break;\n        }\n\n        case 49: {\n          this.isConsole = !this.isConsole;\n          if (this.isConsole) {\n            this.drawConsoleDom();\n          } else if (this.consoleDom) {\n            document.body.removeChild(this.consoleDom);\n          }\n          break;\n        }\n\n        default:\n          break;\n      }\n    });\n  }\n\n  drawConsoleDom() {\n    const consoleDom = document.getElementById('tving-console');\n    if (consoleDom) {\n      this.consoleDom = consoleDom;\n    } else {\n      this.consoleDom = document.createElement('div');\n      this.consoleDom.setAttribute('id', 'tving-console');\n      document.body.appendChild(this.consoleDom);\n    }\n  }\n\n  log(style: string, logLevel: LOG_LEVEL, ...args) {\n    if (this.logLevel > logLevel) {\n      return;\n    }\n\n    if (this.isConsole && this.consoleDom) {\n      logDomWithCSS(this.consoleDom, args, style);\n    }\n\n    if (this.isDebug) {\n      consoleWithCSS(this.console, args, style);\n      this.console.groupCollapsed('Call stack');\n      this.console.trace(); // hidden in collapsed group\n      this.console.groupEnd();\n    } else {\n      this.sentry.addBreadcrumb({\n        category: 'log',\n        message: JSON.stringify(args),\n        level: 'debug',\n      });\n    }\n  }\n\n  trace(...args) {\n    if (args) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.log('background: skyblue; color: black', LOG_LEVEL.TRACE, ...args);\n    }\n  }\n\n  traceSentry(message: string, extra?: Record<string, unknown>, tags?: { [key: string]: string }) {\n    this.sentry.captureMessage(message, {\n      level: 'log',\n      extra,\n      tags,\n    });\n  }\n\n  debug(...args) {\n    if (args) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.log('background: green; color: yellow', LOG_LEVEL.DEBUG, ...args);\n    }\n  }\n\n  debugSentry(message: string, extra?: Record<string, unknown>, tags?: { [key: string]: string }) {\n    this.sentry.captureMessage(message, {\n      level: 'debug',\n      extra,\n      tags,\n    });\n  }\n\n  info(...args) {\n    if (args) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.log('background: black; color: white', LOG_LEVEL.INFO, ...args);\n    }\n  }\n\n  infoSentry(message: string, extra?: Record<string, unknown>, tags?: { [key: string]: string }) {\n    this.sentry.captureMessage(message, {\n      level: 'info',\n      extra,\n      tags,\n    });\n  }\n\n  warn(...args) {\n    if (args) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.log('background: orange; color: red', LOG_LEVEL.WARN, ...args);\n    }\n  }\n\n  warnSentry(message: string, extra?: Record<string, unknown>, tags?: { [key: string]: string }) {\n    this.sentry.captureMessage(message, {\n      level: 'warning',\n      extra,\n      tags,\n    });\n  }\n\n  error(...args) {\n    if (args) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.log('background: darkred; color: yellow', LOG_LEVEL.ERROR, ...args);\n    }\n  }\n\n  errorSentry(message: string, extra?: Record<string, unknown>, tags?: Record<string, string>) {\n    this.sentry.captureMessage(message, {\n      level: 'error',\n      extra,\n    });\n  }\n\n  getLastPageView() {\n    return this.lastPageView;\n  }\n\n  amplitudeEvent({ event, eventProperties }: AmplitudeEventProps) {\n    amplitudeEvent({\n      event,\n      eventProperties,\n    });\n\n    if (this.isAmplitudeConsole) {\n      this.console.log('amplitudeEvent');\n    }\n  }\n}\n\nexport default new TvingLogModule();\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-marquee/TvingMarquee.style.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-marquee/TvingMarquee.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-player/TvingPlayerEventBinder.tsx",
    messages: [
      {
        ruleId: "import/no-cycle",
        severity: 2,
        message: "Dependency cycle detected.",
        line: 3,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 3,
        endColumn: 54,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { memo } from 'react';\n\nimport { useTvingPlayerEventBinding } from './index';\n\nconst TvingPlayerEventBinder = () => {\n  useTvingPlayerEventBinding();\n  return null;\n};\n\nexport default memo(TvingPlayerEventBinder);\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-player/TvingPlayerProvider.tsx",
    messages: [
      {
        ruleId: "import/no-cycle",
        severity: 2,
        message: "Dependency cycle detected.",
        line: 5,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 5,
        endColumn: 68,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { createContext, ReactNode } from 'react';\n\nimport { StoreApi } from 'zustand';\n\nimport { TvingPlayerStore, TvingPlayerEventBinder } from './index';\n\nexport const TvingPlayerContext = createContext<StoreApi<TvingPlayerStore> | null>(null);\n\nexport type TvingPlayerProviderProps = {\n  children: ReactNode;\n  store?: StoreApi<TvingPlayerStore>;\n};\n\nconst TvingPlayerProvider = ({ children, store }: TvingPlayerProviderProps) => {\n  if (!store) {\n    return null;\n  }\n  const { Provider } = TvingPlayerContext;\n  return (\n    <Provider value={store}>\n      <TvingPlayerEventBinder />\n      {children}\n    </Provider>\n  );\n};\n\nexport default TvingPlayerProvider;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-player/index.ts",
    messages: [
      {
        ruleId: "import/no-cycle",
        severity: 2,
        message: "Dependency cycle detected.",
        line: 1,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 1,
        endColumn: 63,
      },
      {
        ruleId: "import/no-cycle",
        severity: 2,
        message: "Dependency cycle detected.",
        line: 2,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 2,
        endColumn: 60,
      },
      {
        ruleId: "import/no-cycle",
        severity: 2,
        message: "Dependency cycle detected.",
        line: 4,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 4,
        endColumn: 71,
      },
      {
        ruleId: "import/no-cycle",
        severity: 2,
        message: "Dependency cycle detected.",
        line: 5,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 5,
        endColumn: 59,
      },
      {
        ruleId: "import/no-cycle",
        severity: 2,
        message: "Dependency cycle detected.",
        line: 6,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 6,
        endColumn: 57,
      },
    ],
    suppressedMessages: [],
    errorCount: 5,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import TvingPlayerEventBinder from './TvingPlayerEventBinder';\nimport { TvingPlayerContext } from './TvingPlayerProvider';\nimport { TvingPlayerStore } from './tvingPlayerStore';\nimport useTvingPlayerEventBinding from './useTvingPlayerEventBinding';\nimport useTvingPlayerEvents from './useTvingPlayerEvents';\nimport useTvingPlayerStore from './useTvingPlayerStore';\n\nexport { TvingPlayerContext, TvingPlayerEventBinder, useTvingPlayerEvents, useTvingPlayerStore, useTvingPlayerEventBinding };\nexport type { TvingPlayerStore };\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-player/tvingPlayerStore.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-player/useTvingPlayerEventBinding.ts",
    messages: [
      {
        ruleId: "import/no-cycle",
        severity: 2,
        message: "Dependency cycle detected.",
        line: 1,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 1,
        endColumn: 69,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { useTvingPlayerEvents, useTvingPlayerStore } from './index';\n\nconst useTvingPlayerEventBinding = () => {\n  const {\n    setPlaying,\n    setPaused,\n    setLoading,\n    setCurrentTime,\n    setDuration,\n    setPlaybackRate,\n    setSubtitleTracks,\n    setQualityList,\n    setVolume,\n    setMuted,\n    clearPlayer,\n    setAdvertisement,\n    setAdvertisementSkippable,\n    setAdvertisementSkipOffset,\n    setAdvertisementPoints,\n    setAdvertisementCurrentTime,\n    setAdvertisementDuration,\n    setAdvertisementIndex,\n    setAdvertisementTotal,\n    setAdvertisementLink,\n    setSkipAdvertisement,\n    setLive,\n    setAdvertisementLive,\n    setQuickVod,\n    setBlocked,\n    setError,\n    setStreamInfo,\n  } = useTvingPlayerStore((state) => ({\n    setPlaying: state.setPlaying,\n    setPaused: state.setPaused,\n    setLoading: state.setLoading,\n    setCurrentTime: state.setCurrentTime,\n    setDuration: state.setDuration,\n    setPlaybackRate: state.setPlaybackRate,\n    setSubtitleTracks: state.setSubtitleTracks,\n    setQualityList: state.setQualityList,\n    setVolume: state.setVolume,\n    setMuted: state.setMuted,\n    setBlocked: state.setBlocked,\n    setError: state.setError,\n    clearPlayer: state.clearPlayer,\n    setAdvertisement: state.setAdvertisement,\n    setAdvertisementSkippable: state.setAdvertisementSkippable,\n    setAdvertisementSkipOffset: state.setAdvertisementSkipOffset,\n    setAdvertisementPoints: state.setAdvertisementPoints,\n    setAdvertisementCurrentTime: state.setAdvertisementCurrentTime,\n    setAdvertisementDuration: state.setAdvertisementDuration,\n    setAdvertisementIndex: state.setAdvertisementIndex,\n    setAdvertisementTotal: state.setAdvertisementTotal,\n    setAdvertisementLink: state.setAdvertisementLink,\n    setSkipAdvertisement: state.setSkipAdvertisement,\n    setLive: state.setLive,\n    setAdvertisementLive: state.setAdvertisementLive,\n    setQuickVod: state.setQuickVod,\n    setStreamInfo: state.setStreamInfo,\n  }));\n\n  useTvingPlayerEvents({\n    onBlockBeforePlay: () => {\n      clearPlayer();\n      setBlocked(true);\n    },\n    onError: () => {\n      clearPlayer();\n      setError(true);\n    },\n    onMediaChange: () => {\n      // 중복 초기화 방지 시 아래 주석 처리\n      clearPlayer();\n      setLoading(true);\n    },\n    onPlayerStateCanplay: () => {\n      setLoading(false);\n    },\n    onPlayerStateCanplaythrough: () => {\n      setLoading(false);\n    },\n    onPlayerStatePause: () => {\n      setPlaying(false);\n      setPaused(true);\n    },\n    onPlayerStatePlaying: () => {\n      setPlaying(true);\n      setPaused(false);\n      setLoading(false);\n    },\n    onPlayerStateEnded: () => {\n      setPlaying(false);\n    },\n    onPlayerStateTimeupdate: (event) => {\n      const { duration, currentTime } = event || {};\n      setLoading(false);\n      setCurrentTime(currentTime);\n      if (duration) {\n        setDuration(duration);\n      }\n    },\n    onPlayerStateDurationchange: ({ duration }) => {\n      setDuration(duration);\n    },\n    onPlayerStateWaiting: () => {\n      setLoading(true);\n      setPlaying(false);\n    },\n    onPlayerStateVolumechange: ({ volume }) => {\n      setVolume(volume);\n      setMuted(volume <= 0);\n    },\n    onPlayerStateRatechange: ({ playbackRate }) => {\n      setPlaybackRate(playbackRate);\n    },\n    onPlayerStateStop: () => {\n      clearPlayer();\n    },\n    onAdLinkStart: ({ url }) => {\n      setAdvertisementLink(url);\n    },\n    // onAdLinkEnd\n    onAdPlayerStarted: ({ duration }) => {\n      setAdvertisementDuration(duration || 0);\n    },\n    onAdplayerStateEnded: () => {\n      setAdvertisementSkippable(false);\n      setAdvertisementSkipOffset(-1);\n    },\n    onAdEnded: () => {\n      setAdvertisement(false);\n      setAdvertisementSkippable(false);\n      setAdvertisementSkipOffset(-1);\n      setAdvertisementLink('');\n    },\n    onAdLiveAdcloseFalse: () => {\n      setAdvertisementLink('');\n    },\n    onAdplayerStatePlaying: ({ isLiveAdsPlaying }) => {\n      setPlaying(true);\n      setPaused(false);\n      setLoading(false);\n      setAdvertisementLive(isLiveAdsPlaying);\n    },\n    onAdplayerStatePause: () => {\n      setPlaying(false);\n      setPaused(true);\n      setLoading(false);\n    },\n    onAdplayerStateTimeupdate: ({ currentTime, duration, isLiveAdsPlaying, sequence }) => {\n      // sequence 값이 'live' 일 경우 대체광고. 대체광고일때는 시간을 변경하지 않도록 추가. (PcPlayer.tsx eventAdTimeupdate 참고)\n      if (!isLiveAdsPlaying && sequence !== 'live') {\n        setAdvertisement(true);\n        setAdvertisementCurrentTime(currentTime || 0);\n        setAdvertisementDuration(duration || 0);\n      }\n    },\n    onAdCreativeUpdated: ({ adsIdx, adsTotal }) => {\n      setAdvertisementSkipOffset(-1);\n      setAdvertisementIndex(adsIdx);\n      setAdvertisementTotal(adsTotal);\n    },\n    onAdPossibleSkip: ({ offset, skip }) => {\n      setAdvertisementSkippable(true);\n      setAdvertisementSkipOffset(offset);\n      setSkipAdvertisement(skip);\n    },\n    onSubtitleTrackLoaded: ({ subtitleTracks }) => {\n      setSubtitleTracks(subtitleTracks);\n    },\n    onStateQualityLoaded: (qualityList) => {\n      setQualityList(qualityList);\n    },\n    onActionQualityChange: ({ qualityList }) => {\n      setQualityList(qualityList);\n    },\n    onStateStreaminfoUpdated: (streamInfo) => {\n      setStreamInfo(streamInfo);\n      if (streamInfo.adQuarter) {\n        setAdvertisementPoints(streamInfo.adQuarter);\n      }\n\n      setQuickVod(streamInfo?.isQvod || false);\n      setLive(streamInfo?.isLive || false);\n    },\n  });\n};\n\nexport default useTvingPlayerEventBinding;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-player/useTvingPlayerEvents.ts",
    messages: [
      {
        ruleId: "import/no-cycle",
        severity: 2,
        message: "Dependency cycle detected.",
        line: 5,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 5,
        endColumn: 47,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { useEffect, useRef } from 'react';\n\nimport { MediaInfo, QualityInfo, StreamInfo, SubtitleStyle, SubtitleTracks } from '@tvingcorp/web-player';\n\nimport { useTvingPlayerStore } from './index';\n\nexport type TvingPlayerEventsHandler = {\n  onBlockBeforePlay?: (blockBeforePlayInfo: { resultCode: string; resultMessage?: string; resultSubMessage?: string }) => void;\n  onError?: (type: 'Player' | 'INIPlayer', errorCode: number) => void;\n  onDestroy?: () => void;\n  onInstanceInitialize?: () => void;\n  onInstanceInitialized?: () => void;\n  onReady?: () => void;\n  onMediaChange?: () => void;\n  onPlayerStateLoadstart?: () => void;\n  onPlayerStateLoadedmetadata?: () => void;\n  onPlayerStateCanplay?: () => void;\n  onPlayerStateCanplaythrough?: () => void;\n  onPlayerStatePlay?: () => void;\n  onPlayerStatePause?: () => void;\n  onPlayerStatePlaying?: () => void;\n  onPlayerStateResume?: () => void;\n  onPlayerStateEnded?: () => void;\n  onPlayerStateSeeking?: () => void;\n  onPlayerStateSeeked?: () => void;\n  onPlayerStateTimeupdate?: (timeUpdateEvent: { duration?: number; currentTime: number }) => void;\n  onPlayerStateDurationchange?: (durationChangeEvent: { duration: number }) => void;\n  onPlayerStateReady?: () => void;\n  onPlayerStateWaiting?: () => void;\n  onPlayerStateVolumechange?: (volumeChangeEvent: { volume: number }) => void;\n  onPlayerStateSubtitlechange?: () => void;\n  onPlayerStateSubtitletextchange?: () => void;\n  onPlayerStateBufferedchange?: (bufferedChangeEvent: { playbackPosition: number; bufferHealthStart: number; bufferHealthEnd: number }) => void;\n  onPlayerStateRatechange?: (rateChangeEvent: { playbackRate: number }) => void;\n  onPlayerStateLoading?: () => void;\n  onPlayerStateStop?: () => void;\n  onPlayerStateError?: (errorEvent: { prefix?: string }) => void;\n  onPlayerStateCustomerror?: (customErrorEvent: { eventType: string; isFatal: boolean; value: string }) => void;\n  onMediaStateTracks?: () => void;\n  onMediaStateTrackchange?: (trackChangeEvent: { bitrate: number }) => void;\n  onMediaStateAudiolanguages?: () => void;\n  onMediaStateAudiolanguagechange?: () => void;\n  onMediaStateAudiochannelchange?: (audioChannelChangeEvent: { id: number; audioChannel: number }) => void;\n  onMediaStateTimedmeta?: (timedmetaEvent: { data: string }) => void;\n  onStreamError?: () => void;\n  onStreamManifestLoading?: () => void;\n  onStreamManifestLoaded?: (manifestLoadedEvent: { url: string; time: number; xhr: string }) => void;\n  onStreamBufferAppend?: () => void;\n  onStreamFragLoading?: () => void;\n  onStreamFragLoaded?: (fragLoadedEvent: { url: string; time: number; xhr: string; measuredBandwidth: number }) => void;\n  onStreamLevelLoading?: () => void;\n  onStreamLevelLoaded?: () => void;\n  onStreamMetadataLoaded?: (metadataLoadedEvent: MediaInfo) => void;\n  onStreamKeyAdded?: () => void;\n  onStreamKeyError?: () => void;\n  onStreamKeyMessage?: () => void;\n  onStreamKeySessionclosed?: () => void;\n  onStreamKeySessioncreated?: () => void;\n  onStreamKeySessionremoved?: () => void;\n  onStreamKeySessionchanged?: () => void;\n  onStreamKeySessionupdated?: () => void;\n  onStreamKeySystemselected?: () => void;\n  onStreamKeySystemaccesscomplete?: () => void;\n  onStreamLicenseRequest?: () => void;\n  onStreamLicenseRequestcomplete?: () => void;\n  onShakaInstance?: () => void;\n  onAdbreaks?: () => void;\n  onAdbreakStarted?: () => void;\n  onAdbreakEnded?: () => void;\n  onAdplayerStateTimeupdate?: (timeUpdateEvent: { currentTime: number; duration: number; isLiveAdsPlaying: boolean; sequence: string }) => void;\n  onAdplayerStatePlay?: (playEvent: { isLiveAdsPlaying: boolean }) => void;\n  onAdplayerStatePause?: () => void;\n  onAdplayerStatePlaying?: (playingEvent: { isLiveAdsPlaying: boolean }) => void;\n  onAdplayerStateEnded?: () => void;\n  onAdplayerStateVolumechange?: (volumeChangeEvent: { volume: number }) => void;\n  onAdplayerStateBuffering?: () => void;\n  onAdStarted?: (adStartedEvent: { sequence: number; offset: number; duration: number; isLiveAdsPlaying: boolean }) => void;\n  onAdEnded?: () => void;\n  onAdPlayerStarted?: (adPlayerStartedEvent: { sequence: number; offset: number; duration: number; isLiveAdsPlaying: boolean }) => void;\n  onAdPlayerEnded?: () => void;\n  onAdLiveStarted?: () => void;\n  onAdLiveEnded?: () => void;\n  onAdLinkStart?: (adLinkStartEvent: { url: string }) => void;\n  onAdLinkEnd?: () => void;\n  onAdCreativeUpdated?: (adCreativeUpdatedEvent: {\n    adsIdx: number;\n    adsTotal: number;\n    network: unknown;\n    adTitle: string;\n    duration: number;\n    sequence: number;\n    offset: number;\n  }) => void;\n  onAdPossibleSkip?: (adPossibleSkipEvent: { offset: number; skip: () => void }) => void;\n  onAdLiveMidSoon?: () => void;\n  onAdLiveAdstart0?: () => void;\n  onAdLiveAdcloseFalse?: () => void;\n  onAdLiveRequestads?: () => void;\n  onAdCompanionBannerCreated?: () => void;\n  onFullscreenSupported?: () => void;\n  onFullscreenChange?: () => void;\n  onPipChange?: () => void;\n  onKeyboardnavigationKeydown?: () => void;\n  onDimensionsChange?: () => void;\n  onNdvrToggle?: () => void;\n  onStateChange?: () => void;\n  onStateReady?: () => void;\n  onStateStreaminfoLoaded?: () => void;\n  onStateStreaminfoUpdated?: (streaminfoUpdatedEvent: StreamInfo) => void;\n  onStateStreaminfoLoaderror?: () => void;\n  onStatePlayRequested?: () => void;\n  onStatePlaying?: () => void;\n  onStatePaused?: () => void;\n  onStateCurrenttimeChange?: () => void;\n  onStateBuffering?: (bufferingEvent: { isBuffering: boolean }) => void;\n  onStateAdbreaks?: () => void;\n  onStateAdbreakStarted?: () => void;\n  onStateAdbreakEnded?: () => void;\n  onStateAdStarted?: () => void;\n  onStateAdEnded?: () => void;\n  onStateStarted?: () => void;\n  onStateContentStarted?: () => void;\n  onStateContentEnded?: () => void;\n  onStateEnded?: () => void;\n  onStateError?: () => void;\n  onStateBufferedChange?: () => void;\n  onStateVolumeChange?: () => void;\n  onStateDurationChange?: () => void;\n  onStateFullscreenSupported?: () => void;\n  onStateFullscreenChange?: () => void;\n  onStateTracks?: () => void;\n  onStateTrackChange?: () => void;\n  onStateSubtitleChange?: () => void;\n  onStateSubtitletextChange?: () => void;\n  onStateSubtitlesettingsChange?: () => void;\n  onStatePlaybackrateChange?: () => void;\n  onStatePipChange?: () => void;\n  onStateAudiolanguages?: () => void;\n  onStateAudiolanguageChange?: () => void;\n  onStateDimensionsChange?: () => void;\n  onStateTvingtvChanged?: () => void;\n  onStateNdvrOn?: () => void;\n  onStateNdvrOff?: () => void;\n  onStateNdvrChanged?: () => void;\n  onStateQualityLoaded?: (qualityLoadedEvent: QualityInfo[]) => void;\n  onStateAutoPlay?: () => void;\n  onStateLiveUpdatedSchedule?: () => void;\n  onStateContinuePlay?: (continuePlayEvent: { startTime: number; isEnableAutoOpeningSkip: boolean }) => void;\n  onStateOnline?: () => void;\n  onStateOffline?: () => void;\n  onDeviceUhdNotSupported?: () => void;\n  onDeviceUhdErrorChangeFhd?: () => void;\n  onUiVisiblecontrolsChange?: () => void;\n  onUiViewChange?: () => void;\n  onUiStateChange?: () => void;\n  onActionClose?: () => void;\n  onActionStop?: (stopEvent: { isEnded: boolean }) => void;\n  onActionPlay?: () => void;\n  onActionPause?: () => void;\n  onActionQualityChange?: (qualityChangeEvent: { streamCode: string; qualityList: QualityInfo[] }) => void;\n  onActionSeek?: () => void;\n  onActionSeekForward?: () => void;\n  onActionSeekBack?: () => void;\n  onSubtitleTrackLoaded?: (subtitleTrackLoadedEvent: SubtitleTracks) => void;\n  onSubtitleTrackChanged?: (subtitleTrackChangedEvent: { subtitleTrack: number }) => void;\n  onSubtitleCueChange?: (subtitleCueChangeEvent: { cue?: unknown }) => void;\n  onSubtitleStyleChanged?: (subtitleStyleChangedEvent: SubtitleStyle) => void;\n  onSubtitleNotSupport?: () => void;\n\n  // ETC\n  onVisibilityChange?: () => void;\n  onResume?: () => void;\n  onPause?: () => void;\n};\n\nconst tvingPlayerEventsMap = {\n  onBlockBeforePlay: 'BLOCK_BEFORE_PLAY',\n  onError: 'ERROR',\n  onDestroy: 'DESTROY',\n  onInstanceInitialize: 'INSTANCE_INITIALIZE',\n  onInstanceInitialized: 'INSTANCE_INITIALIZED',\n  onReady: 'READY',\n  onMediaChange: 'MEDIA_CHANGE',\n  onPlayerStateLoadstart: 'PLAYER_STATE_LOADSTART',\n  onPlayerStateLoadedmetadata: 'PLAYER_STATE_LOADEDMETADATA',\n  onPlayerStateCanplay: 'PLAYER_STATE_CANPLAY',\n  onPlayerStateCanplaythrough: 'PLAYER_STATE_CANPLAYTHROUGH',\n  onPlayerStatePlay: 'PLAYER_STATE_PLAY',\n  onPlayerStatePause: 'PLAYER_STATE_PAUSE',\n  onPlayerStatePlaying: 'PLAYER_STATE_PLAYING',\n  onPlayerStateResume: 'PLAYER_STATE_RESUME',\n  onPlayerStateEnded: 'PLAYER_STATE_ENDED',\n  onPlayerStateSeeking: 'PLAYER_STATE_SEEKING',\n  onPlayerStateSeeked: 'PLAYER_STATE_SEEKED',\n  onPlayerStateTimeupdate: 'PLAYER_STATE_TIMEUPDATE',\n  onPlayerStateDurationchange: 'PLAYER_STATE_DURATIONCHANGE',\n  onPlayerStateReady: 'PLAYER_STATE_READY',\n  onPlayerStateWaiting: 'PLAYER_STATE_WAITING',\n  onPlayerStateVolumechange: 'PLAYER_STATE_VOLUMECHANGE',\n  onPlayerStateSubtitlechange: 'PLAYER_STATE_SUBTITLECHANGE',\n  onPlayerStateSubtitletextchange: 'PLAYER_STATE_SUBTITLETEXTCHANGE',\n  onPlayerStateBufferedchange: 'PLAYER_STATE_BUFFEREDCHANGE',\n  onPlayerStateRatechange: 'PLAYER_STATE_RATECHANGE',\n  onPlayerStateLoading: 'PLAYER_STATE_LOADING',\n  onPlayerStateStop: 'PLAYER_STATE_STOP',\n  onPlayerStateError: 'PLAYER_STATE_ERROR',\n  onPlayerStateCustomerror: 'PLAYER_STATE_CUSTOMERROR',\n  onMediaStateTracks: 'MEDIA_STATE_TRACKS',\n  onMediaStateTrackchange: 'MEDIA_STATE_TRACKCHANGE',\n  onMediaStateAudiolanguages: 'MEDIA_STATE_AUDIOLANGUAGES',\n  onMediaStateAudiolanguagechange: 'MEDIA_STATE_AUDIOLANGUAGECHANGE',\n  onMediaStateAudiochannelchange: 'MEDIA_STATE_AUDIOCHANNELCHANGE',\n  onMediaStateTimedmeta: 'MEDIA_STATE_TIMEDMETA',\n  onStreamError: 'STREAM_ERROR',\n  onStreamManifestLoading: 'STREAM_MANIFEST_LOADING',\n  onStreamManifestLoaded: 'STREAM_MANIFEST_LOADED',\n  onStreamBufferAppend: 'STREAM_BUFFER_APPEND',\n  onStreamFragLoading: 'STREAM_FRAG_LOADING',\n  onStreamFragLoaded: 'STREAM_FRAG_LOADED',\n  onStreamLevelLoading: 'STREAM_LEVEL_LOADING',\n  onStreamLevelLoaded: 'STREAM_LEVEL_LOADED',\n  onStreamMetadataLoaded: 'STREAM_METADATA_LOADED',\n  onStreamKeyAdded: 'STREAM_KEY_ADDED',\n  onStreamKeyError: 'STREAM_KEY_ERROR',\n  onStreamKeyMessage: 'STREAM_KEY_MESSAGE',\n  onStreamKeySessionclosed: 'STREAM_KEY_SESSIONCLOSED',\n  onStreamKeySessioncreated: 'STREAM_KEY_SESSIONCREATED',\n  onStreamKeySessionremoved: 'STREAM_KEY_SESSIONREMOVED',\n  onStreamKeySessionchanged: 'STREAM_KEY_SESSIONCHANGED',\n  onStreamKeySessionupdated: 'STREAM_KEY_SESSIONUPDATED',\n  onStreamKeySystemselected: 'STREAM_KEY_SYSTEMSELECTED',\n  onStreamKeySystemaccesscomplete: 'STREAM_KEY_SYSTEMACCESSCOMPLETE',\n  onStreamLicenseRequest: 'STREAM_LICENSE_REQUEST',\n  onStreamLicenseRequestcomplete: 'STREAM_LICENSE_REQUESTCOMPLETE',\n  onShakaInstance: 'SHAKA_INSTANCE',\n  onAdbreaks: 'ADBREAKS',\n  onAdbreakStarted: 'ADBREAK_STARTED',\n  onAdbreakEnded: 'ADBREAK_ENDED',\n  onAdplayerStateTimeupdate: 'ADPLAYER_STATE_TIMEUPDATE',\n  onAdplayerStatePlay: 'ADPLAYER_STATE_PLAY',\n  onAdplayerStatePause: 'ADPLAYER_STATE_PAUSE',\n  onAdplayerStatePlaying: 'ADPLAYER_STATE_PLAYING',\n  onAdplayerStateEnded: 'ADPLAYER_STATE_ENDED',\n  onAdplayerStateVolumechange: 'ADPLAYER_STATE_VOLUMECHANGE',\n  onAdplayerStateBuffering: 'ADPLAYER_STATE_BUFFERING',\n  onAdStarted: 'AD_STARTED',\n  onAdEnded: 'AD_ENDED',\n  onAdPlayerStarted: 'AD_PLAYER_STARTED',\n  onAdPlayerEnded: 'AD_PLAYER_ENDED',\n  onAdLiveStarted: 'AD_LIVE_STARTED',\n  onAdLiveEnded: 'AD_LIVE_ENDED',\n  onAdLinkStart: 'AD_LINK_START',\n  onAdLinkEnd: 'AD_LINK_END',\n  onAdCreativeUpdated: 'AD_CREATIVE_UPDATED',\n  onAdPossibleSkip: 'AD_POSSIBLE_SKIP',\n  onAdLiveMidSoon: 'AD_LIVE_MID_SOON',\n  onAdLiveAdstart0: 'AD_LIVE_ADSTART0',\n  onAdLiveAdcloseFalse: 'AD_LIVE_ADCLOSE_FALSE',\n  onAdLiveRequestads: 'AD_LIVE_REQUESTADS',\n  onAdCompanionBannerCreated: 'AD_COMPANION_BANNER_CREATED',\n  onFullscreenSupported: 'FULLSCREEN_SUPPORTED',\n  onFullscreenChange: 'FULLSCREEN_CHANGE',\n  onPipChange: 'PIP_CHANGE',\n  onKeyboardnavigationKeydown: 'KEYBOARDNAVIGATION_KEYDOWN',\n  onDimensionsChange: 'DIMENSIONS_CHANGE',\n  onNdvrToggle: 'NDVR_TOGGLE',\n  onStateChange: 'STATE_CHANGE',\n  onStateReady: 'STATE_READY',\n  onStateStreaminfoLoaded: 'STATE_STREAMINFO_LOADED',\n  onStateStreaminfoUpdated: 'STATE_STREAMINFO_UPDATED',\n  onStateStreaminfoLoaderror: 'STATE_STREAMINFO_LOADERROR',\n  onStatePlayRequested: 'STATE_PLAY_REQUESTED',\n  onStatePlaying: 'STATE_PLAYING',\n  onStatePaused: 'STATE_PAUSED',\n  onStateCurrenttimeChange: 'STATE_CURRENTTIME_CHANGE',\n  onStateBuffering: 'STATE_BUFFERING',\n  onStateAdbreaks: 'STATE_ADBREAKS',\n  onStateAdbreakStarted: 'STATE_ADBREAK_STARTED',\n  onStateAdbreakEnded: 'STATE_ADBREAK_ENDED',\n  onStateAdStarted: 'STATE_AD_STARTED',\n  onStateAdEnded: 'STATE_AD_ENDED',\n  onStateStarted: 'STATE_STARTED',\n  onStateContentStarted: 'STATE_CONTENT_STARTED',\n  onStateContentEnded: 'STATE_CONTENT_ENDED',\n  onStateEnded: 'STATE_ENDED',\n  onStateError: 'STATE_ERROR',\n  onStateBufferedChange: 'STATE_BUFFERED_CHANGE',\n  onStateVolumeChange: 'STATE_VOLUME_CHANGE',\n  onStateDurationChange: 'STATE_DURATION_CHANGE',\n  onStateFullscreenSupported: 'STATE_FULLSCREEN_SUPPORTED',\n  onStateFullscreenChange: 'STATE_FULLSCREEN_CHANGE',\n  onStateTracks: 'STATE_TRACKS',\n  onStateTrackChange: 'STATE_TRACK_CHANGE',\n  onStateSubtitleChange: 'STATE_SUBTITLE_CHANGE',\n  onStateSubtitletextChange: 'STATE_SUBTITLETEXT_CHANGE',\n  onStateSubtitlesettingsChange: 'STATE_SUBTITLESETTINGS_CHANGE',\n  onStatePlaybackrateChange: 'STATE_PLAYBACKRATE_CHANGE',\n  onStatePipChange: 'STATE_PIP_CHANGE',\n  onStateAudiolanguages: 'STATE_AUDIOLANGUAGES',\n  onStateAudiolanguageChange: 'STATE_AUDIOLANGUAGE_CHANGE',\n  onStateDimensionsChange: 'STATE_DIMENSIONS_CHANGE',\n  onStateTvingtvChanged: 'STATE_TVINGTV_CHANGED',\n  onStateNdvrOn: 'STATE_NDVR_ON',\n  onStateNdvrOff: 'STATE_NDVR_OFF',\n  onStateNdvrChanged: 'STATE_NDVR_CHANGED',\n  onStateQualityLoaded: 'STATE_QUALITY_LOADED',\n  onStateAutoPlay: 'STATE_AUTO_PLAY',\n  onStateLiveUpdatedSchedule: 'STATE_LIVE_UPDATED_SCHEDULE',\n  onStateContinuePlay: 'STATE_CONTINUE_PLAY',\n  onStateOnline: 'STATE_ONLINE',\n  onStateOffline: 'STATE_OFFLINE',\n  onDeviceUhdNotSupported: 'DEVICE_UHD_NOT_SUPPORTED',\n  onDeviceUhdErrorChangeFhd: 'DEVICE_UHD_ERROR_CHANGE_FHD',\n  onUiVisiblecontrolsChange: 'UI_VISIBLECONTROLS_CHANGE',\n  onUiViewChange: 'UI_VIEW_CHANGE',\n  onUiStateChange: 'UI_STATE_CHANGE',\n  onActionClose: 'ACTION_CLOSE',\n  onActionStop: 'ACTION_STOP',\n  onActionPlay: 'ACTION_PLAY',\n  onActionPause: 'ACTION_PAUSE',\n  onActionQualityChange: 'ACTION_QUALITY_CHANGE',\n  onActionSeek: 'ACTION_SEEK',\n  onActionSeekForward: 'ACTION_SEEK_FORWARD',\n  onActionSeekBack: 'ACTION_SEEK_BACK',\n  onSubtitleTrackLoaded: 'SUBTITLE_TRACK_LOADED',\n  onSubtitleTrackChanged: 'SUBTITLE_TRACK_CHANGED',\n  onSubtitleCueChange: 'SUBTITLE_CUE_CHANGE',\n  onSubtitleStyleChanged: 'SUBTITLE_STYLE_CHANGED',\n  onSubtitleNotSupport: 'SUBTITLE_NOT_SUPPORT',\n};\n\nconst useTvingPlayerEvents = (tvingPlayerEventsHandler: TvingPlayerEventsHandler) => {\n  const tvingPlayer = useTvingPlayerStore((state) => state.tvingPlayer);\n\n  const tvingPlayerEventsHandlerRef = useRef(tvingPlayerEventsHandler);\n\n  useEffect(() => {\n    if (!tvingPlayer) {\n      return;\n    }\n\n    const tvingPlayerEventsHandler = tvingPlayerEventsHandlerRef.current;\n    const { onVisibilityChange, onResume, onPause } = tvingPlayerEventsHandler;\n\n    if (onVisibilityChange) {\n      document.addEventListener('visibilitychange', onVisibilityChange);\n    }\n\n    if (onResume) {\n      window.addEventListener('onResume', onResume);\n    }\n\n    if (onPause) {\n      window.addEventListener('onPause', onPause);\n    }\n\n    const eventKeys = Object.keys(tvingPlayerEventsHandler).filter((key) => key !== 'onVisibilityChange' && key !== 'onResume' && key !== 'onPause');\n    eventKeys.forEach((key) => {\n      if (tvingPlayerEventsHandler[key]) {\n        tvingPlayer.on(tvingPlayer.Events[tvingPlayerEventsMap[key]], tvingPlayerEventsHandler[key]);\n      }\n    });\n\n    return () => {\n      if (onVisibilityChange) {\n        document.removeEventListener('visibilitychange', onVisibilityChange);\n      }\n\n      if (onResume) {\n        window.removeEventListener('onResume', onResume);\n      }\n\n      if (onPause) {\n        window.removeEventListener('onPause', onPause);\n      }\n\n      eventKeys.forEach((key) => {\n        if (tvingPlayerEventsHandler[key]) {\n          tvingPlayer.removeListener(tvingPlayer.Events[tvingPlayerEventsMap[key]], tvingPlayerEventsHandler[key]);\n        }\n      });\n    };\n  }, [tvingPlayer]);\n};\n\nexport default useTvingPlayerEvents;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-player/useTvingPlayerStore.ts",
    messages: [
      {
        ruleId: "import/no-cycle",
        severity: 2,
        message: "Dependency cycle detected.",
        line: 6,
        column: 1,
        nodeType: "ImportDeclaration",
        endLine: 6,
        endColumn: 64,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { useContext } from 'react';\n\nimport { useStore } from 'zustand';\nimport { shallow } from 'zustand/shallow';\n\nimport { TvingPlayerContext, TvingPlayerStore } from './index';\n\n/**\n * 기본적으로 useTvingPlayer 에서 사용하는 playerStore hook\n * 성능 최적화 목적으로 외부에서 직접 사용하는 방법도 있음\n * @see TvingPlayerStore\n * @see useTvingPlayer\n */\nconst useTvingPlayerStore = <T>(selector: (state: TvingPlayerStore) => T, equalityFunction: (a: T, b: T) => boolean = shallow): T => {\n  const store = useContext(TvingPlayerContext);\n  if (store === null) {\n    throw new Error('Cannot find TvingPlayerProvider');\n  }\n\n  return useStore(store, selector, equalityFunction);\n};\n\nexport default useTvingPlayerStore;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-scrollable/TvingScrollable.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-scrollable/TvingScrollbar.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-scrollable/index.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-spinner/TvingSpinner.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-keyboard/TvingVirtualKeyboard.style.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-keyboard/TvingVirtualKeyboard.tsx",
    messages: [
      {
        ruleId: "react-hooks/exhaustive-deps",
        severity: 1,
        message:
          "React Hook useCallback has an unnecessary dependency: 'disabledKeys'. Either exclude it or remove the dependency array.",
        line: 97,
        column: 5,
        nodeType: "ArrayExpression",
        endLine: 109,
        endColumn: 6,
        suggestions: [
          {
            desc: "Update the dependencies array to be: [setSearchType, korean, english, handleNextKeyPress, handlePrevKeyPress, handleAssembleText, loginUppercase, login, keyboard, setFocus]",
            fix: {
              range: [3708, 3930],
              text: "[setSearchType, korean, english, handleNextKeyPress, handlePrevKeyPress, handleAssembleText, loginUppercase, login, keyboard, setFocus]",
            },
          },
        ],
      },
      {
        ruleId: "react-hooks/exhaustive-deps",
        severity: 1,
        message:
          "React Hook useEffect has missing dependencies: 'getCurrentFocus' and 'setFocus'. Either include them or remove the dependency array.",
        line: 116,
        column: 6,
        nodeType: "ArrayExpression",
        endLine: 116,
        endColumn: 20,
        suggestions: [
          {
            desc: "Update the dependencies array to be: [disabledKeys, getCurrentFocus, setFocus]",
            fix: {
              range: [4094, 4108],
              text: "[disabledKeys, getCurrentFocus, setFocus]",
            },
          },
        ],
      },
    ],
    suppressedMessages: [
      {
        ruleId: "react-hooks/exhaustive-deps",
        severity: 1,
        message:
          "React Hook useEffect has missing dependencies: 'english', 'login', 'loginUppercase', and 'setFocus'. Either include them or remove the dependency array.",
        line: 149,
        column: 6,
        nodeType: "ArrayExpression",
        endLine: 149,
        endColumn: 24,
        suggestions: [
          {
            desc: "Update the dependencies array to be: [english, keyboard, korean, login, loginUppercase, setFocus]",
            fix: {
              range: [5026, 5044],
              text: "[english, keyboard, korean, login, loginUppercase, setFocus]",
            },
          },
        ],
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React, { SetStateAction, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport Hangul from 'hangul-js';\nimport { SEARCH_TYPE } from 'tv/src/layers/search';\n\nimport { FOCUS_KEY } from '../../constants/focusKeyConstants';\nimport { FocusParentContext, useFocusable } from '../tving-focusable';\nimport { CHILDREN_ENDPOINT_ACTION, DIRECTION_UP, KEY_CODE } from '../tving-focusable/contants';\n\nimport tv from './layouts/tv';\nimport StyledTvingVirtualKeyboard from './TvingVirtualKeyboard.style';\nimport TvingVirtualKeyboardItem from './TvingVirtualKeyboardItem';\nimport { KEYBOARD_CODE } from './types';\n\ninterface TvingVirtualKeyboardProps {\n  handleAssembleText: (text: string) => void;\n  assembleText?: string;\n  setSearchType?: React.Dispatch<SetStateAction<SEARCH_TYPE>>;\n  disabledKeys?: string[];\n  handleNextKeyPress?: (text: string) => void;\n  handlePrevKeyPress?: () => void;\n}\n\nconst TvingVirtualKeyboard = ({\n  handleAssembleText,\n  assembleText,\n  setSearchType,\n  disabledKeys,\n  handleNextKeyPress,\n  handlePrevKeyPress,\n}: TvingVirtualKeyboardProps) => {\n  const { korean, english, login, loginUppercase } = tv;\n  const [keyboard, setKeyboard] = useState(setSearchType ? korean : login);\n  const { ref, focusKey, setFocus, getCurrentFocus } = useFocusable({\n    // eslint-disable-next-line no-nested-ternary\n    preferredChildFocusKey: keyboard === korean ? 'TVING_VK_ㄱ' : keyboard === english ? 'TVING_VK_a' : 'TVING_VK_1',\n    childrenEndPointAction: setSearchType ? CHILDREN_ENDPOINT_ACTION.LOOP_UP : CHILDREN_ENDPOINT_ACTION.NONE,\n    focusKey: FOCUS_KEY.TVING_VIRTUAL_KEYBOARD(),\n    saveLastFocusedChild: false,\n    onFocus: (_, __, details) => {\n      const { key, keyCode } = details.event || {};\n      if (key === DIRECTION_UP || keyCode === KEY_CODE.UP) {\n        // eslint-disable-next-line no-nested-ternary\n        setFocus(keyboard === korean ? 'TVING_VK_ㅠ' : keyboard === english ? 'TVING_VK_8' : 'TVING_VK_;');\n      }\n    },\n  });\n\n  const text = useRef([] as string[]);\n  const isFirst = useRef(true);\n\n  const handlePressKeyboard = useCallback(\n    (value: string) => {\n      if (value === KEYBOARD_CODE.LANGUAGE_KOR) {\n        setKeyboard(korean);\n      } else if (value === KEYBOARD_CODE.LANGUAGE_ENG) {\n        setKeyboard(english);\n      } else {\n        if (value === KEYBOARD_CODE.SPACE) {\n          // 첫글자가 공백이 아니고 중복 공백이 입력되지 않도록 예외처리\n          if (text.current.length > 0 && text.current[text.current.length - 1] !== ' ') {\n            text.current.push(' ');\n          }\n        } else if (value === KEYBOARD_CODE.DELETE || value === KEYBOARD_CODE.LOGIN_DELETE) {\n          text.current.pop();\n        } else if (value === KEYBOARD_CODE.DELETE_ALL) {\n          text.current = [] as string[];\n        } else if (value === KEYBOARD_CODE.UPPER) {\n          setKeyboard(loginUppercase);\n        } else if (value === KEYBOARD_CODE.LOWER) {\n          setKeyboard(login);\n        } else if (value === KEYBOARD_CODE.NEXT && handleNextKeyPress) {\n          handleNextKeyPress(Hangul.assemble(text.current));\n          isFirst.current = true;\n          if (keyboard === loginUppercase) {\n            setKeyboard(login);\n          }\n          return;\n        } else if (value === KEYBOARD_CODE.PREV && handlePrevKeyPress) {\n          handlePrevKeyPress();\n          isFirst.current = true;\n          if (keyboard === loginUppercase) {\n            setKeyboard(login);\n          }\n          setFocus('TVING_VK_1');\n          return;\n        } else {\n          text.current.push(value);\n        }\n\n        handleAssembleText(Hangul.assemble(text.current));\n      }\n      if (setSearchType) {\n        setSearchType(SEARCH_TYPE.KEYBOARD);\n      }\n    },\n    [\n      setSearchType,\n      korean,\n      english,\n      handleNextKeyPress,\n      handlePrevKeyPress,\n      handleAssembleText,\n      loginUppercase,\n      login,\n      keyboard,\n      disabledKeys,\n      setFocus,\n    ],\n  );\n\n  useEffect(() => {\n    if (disabledKeys && disabledKeys?.indexOf(getCurrentFocus().split('TVING_VK_')[1]) > -1) {\n      setFocus('TVING_VK_1');\n    }\n  }, [disabledKeys]);\n\n  /**\n   * 외부 요인에 의해 현재 text가 바뀐 경우 동기화\n   */\n  useEffect(() => {\n    if (assembleText !== Hangul.assemble(text.current)) {\n      text.current = Hangul.disassemble(assembleText as string);\n    }\n  }, [assembleText]);\n\n  useEffect(() => {\n    if (keyboard && !isFirst.current) {\n      let targetFocusKey: string;\n      switch (keyboard) {\n        case english:\n          targetFocusKey = `TVING_VK_${KEYBOARD_CODE.LANGUAGE_KOR}`;\n          break;\n        case login:\n          targetFocusKey = `TVING_VK_${KEYBOARD_CODE.UPPER}`;\n          break;\n        case loginUppercase:\n          targetFocusKey = `TVING_VK_${KEYBOARD_CODE.LOWER}`;\n          break;\n        default:\n          targetFocusKey = `TVING_VK_${KEYBOARD_CODE.LANGUAGE_ENG}`;\n      }\n      setFocus(targetFocusKey);\n    }\n    if (isFirst.current) {\n      isFirst.current = false;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [keyboard, korean]);\n\n  const buttons = useMemo(() => {\n    return keyboard.map((values, index) => {\n      return (\n        <section key={`${values}_${index}`}>\n          {values.split(' ').map((value, index) => {\n            return (\n              <TvingVirtualKeyboardItem\n                keyboard={keyboard}\n                key={index.toString()}\n                handleClick={() => {\n                  handlePressKeyboard(value);\n                }}\n                isActivated={!disabledKeys || disabledKeys?.indexOf(value) === -1}\n              >\n                {value}\n              </TvingVirtualKeyboardItem>\n            );\n          })}\n        </section>\n      );\n    });\n  }, [handlePressKeyboard, keyboard, disabledKeys]);\n  return (\n    <FocusParentContext.Provider value={focusKey}>\n      <StyledTvingVirtualKeyboard ref={ref}>{buttons}</StyledTvingVirtualKeyboard>\n    </FocusParentContext.Provider>\n  );\n};\nexport default TvingVirtualKeyboard;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-keyboard/TvingVirtualKeyboardItem.style.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-keyboard/TvingVirtualKeyboardItem.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-keyboard/layouts/tv.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-keyboard/types.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/TvingVirtualList.style.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/TvingVirtualList.test.tsx",
    messages: [
      {
        ruleId: "no-console",
        severity: 1,
        message: "Unexpected console statement.",
        line: 21,
        column: 5,
        nodeType: "MemberExpression",
        messageId: "unexpected",
        endLine: 21,
        endColumn: 16,
        suggestions: [
          {
            messageId: "removeConsole",
            data: {
              propertyName: "log",
            },
            fix: {
              range: [607, 644],
              text: "",
            },
            desc: "Remove the console.log().",
          },
        ],
      },
    ],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React from 'react';\n\nimport { render, waitFor } from '@testing-library/react';\n\nimport '@testing-library/jest-dom';\nimport { TvingVirtualList, TvingVirtualListItem } from './index';\n\ndescribe('TvingVirtualList', () => {\n  it('단일 항목 정상 렌더를 확인합니다.', async () => {\n    const { container } = render(\n      <TvingVirtualList renderingItemsCount={2}>\n        <TvingVirtualListItem id=\"test\">1</TvingVirtualListItem>\n      </TvingVirtualList>,\n    );\n\n    const ul = container.querySelector('ul');\n    const li = container.querySelector('li');\n\n    await waitFor(() => expect(li).toBeInTheDocument());\n\n    console.log(`ul : ${ul?.outerHTML}`);\n\n    expect(ul).toBeInTheDocument();\n    expect(li).toBeInTheDocument();\n    expect(li?.innerHTML).toBe('1');\n  });\n\n  it('다중 항목 정상 렌더를 확인합니다.', async () => {\n    const { container } = render(\n      <TvingVirtualList renderingItemsCount={2}>\n        <TvingVirtualListItem id=\"test1\">1</TvingVirtualListItem>\n        <TvingVirtualListItem id=\"test2\">2</TvingVirtualListItem>\n        <TvingVirtualListItem id=\"test3\">3</TvingVirtualListItem>\n      </TvingVirtualList>,\n    );\n\n    const ul = container.querySelector('ul');\n    const li = container.querySelectorAll('li');\n\n    expect(ul).toBeInTheDocument();\n\n    await waitFor(() => expect(li.length).toBeGreaterThan(0));\n\n    expect(li.length).toBe(6);\n  });\n\n  it('TvingVirtualListItem이 아닌 항목 필터링을 확인합니다.', async () => {\n    const { container } = render(\n      <TvingVirtualList renderingItemsCount={2}>\n        <TvingVirtualListItem id=\"test1\">1</TvingVirtualListItem>\n        <TvingVirtualListItem id=\"test2\">2</TvingVirtualListItem>\n        <TvingVirtualListItem id=\"test3\">3</TvingVirtualListItem>\n        <div>not using</div>\n      </TvingVirtualList>,\n    );\n\n    const ul = container.querySelector('ul');\n    const div = container.querySelector('div');\n\n    await waitFor(() => expect(container).toBeInTheDocument());\n\n    expect(ul).toBeInTheDocument();\n    expect(div).not.toBeInTheDocument();\n  });\n});\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/TvingVirtualList.tsx",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to property of function parameter 'ul'.",
        line: 39,
        column: 7,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParamProp",
        endLine: 39,
        endColumn: 9,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/TvingVirtualListContext.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/TvingVirtualListItem.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/TvingVirtualListItemContext.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/convertTvingVirtualListItems.test.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/convertTvingVirtualListItems.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/getActualIndex.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/getOffsetFromTvingVirtualListItems.test.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/getOffsetFromTvingVirtualListItems.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/getTotalOffsetFromTvingVirtualListItems.test.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/getTotalOffsetFromTvingVirtualListItems.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/getTvingVirtualListItems.test.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/getTvingVirtualListItems.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/index.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/loopTvingVirtualListItems.test.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/loopTvingVirtualListItems.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-base-to-string",
        severity: 2,
        message:
          "'tvingVirtualListItem.props' will evaluate to '[object Object]' when stringified.",
        line: 40,
        column: 29,
        nodeType: "MemberExpression",
        messageId: "baseToString",
        endLine: 40,
        endColumn: 55,
      },
    ],
    suppressedMessages: [
      {
        ruleId: "no-plusplus",
        severity: 2,
        message: "Unary operator '++' used.",
        line: 24,
        column: 93,
        nodeType: "UpdateExpression",
        messageId: "unexpectedUnaryOp",
        endLine: 24,
        endColumn: 96,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React from 'react';\n\nimport getActualIndex from './getActualIndex';\nimport getOffsetFromTvingVirtualListItems from './getOffsetFromTvingVirtualListItems';\nimport { TvingVirtualListItemOption } from './types';\n\n// virtualIndex에 해당하는 리스트 반환 함수\nconst loopTvingVirtualListItems = (\n  virtualIndex: number,\n  prerenderingItemsCount: number,\n  renderingItemsCount: number,\n  totalOffset: number,\n  tvingVirtualListItems: React.ReactElement<TvingVirtualListItemOption>[],\n  exitOnFirst = false,\n): React.ReactElement<TvingVirtualListItemOption>[] => {\n  const tvingVirtualListItemsLength = tvingVirtualListItems.length;\n\n  const loopedTvingVirtualListItems: React.ReactElement<TvingVirtualListItemOption>[] = [];\n  // 시작 인덱스는 prerendering을 염두에 두어 설정\n  const startIndex = exitOnFirst && virtualIndex % tvingVirtualListItemsLength === 0 ? virtualIndex : virtualIndex - prerenderingItemsCount;\n\n  // 위에서 설정한 시작 인덱스부터 renderingItem 개수와 prerenderingItem 개수 까지 더한 인덱스까지 계산\n  // eslint-disable-next-line no-plusplus\n  for (let i = startIndex; i < virtualIndex + renderingItemsCount + prerenderingItemsCount; i++) {\n    const index = getActualIndex(i, tvingVirtualListItemsLength);\n    const tvingVirtualListItem = tvingVirtualListItems[index];\n\n    // const isInactive = i < virtualIndex || i >= virtualIndex + renderingItemsCount;\n\n    const isBefore = i < virtualIndex;\n    const isAfter = i >= virtualIndex + renderingItemsCount;\n    const isInactive = isBefore || isAfter;\n\n    if (tvingVirtualListItem) {\n      // 기존 offset에 loop 한 횟수만큼 총 offset을 더하여 보정\n      const offset = getOffsetFromTvingVirtualListItems(i, totalOffset, tvingVirtualListItems);\n      loopedTvingVirtualListItems.push(\n        React.cloneElement(tvingVirtualListItem, {\n          ...tvingVirtualListItem.props,\n          key: `${offset}_${tvingVirtualListItem.props}`,\n          virtualIndex: i,\n          reverseOffset: offset,\n          offset,\n          isBefore,\n          isAfter,\n          isInactive,\n        }),\n      );\n    }\n  }\n\n  return loopedTvingVirtualListItems;\n};\n\nexport default loopTvingVirtualListItems;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/sliceTvingVirtualListItems.test.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/sliceTvingVirtualListItems.ts",
    messages: [
      {
        ruleId: "@typescript-eslint/no-base-to-string",
        severity: 2,
        message:
          "'tvingVirtualListItem.props' will evaluate to '[object Object]' when stringified.",
        line: 36,
        column: 52,
        nodeType: "MemberExpression",
        messageId: "baseToString",
        endLine: 36,
        endColumn: 78,
      },
    ],
    suppressedMessages: [],
    errorCount: 1,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React from 'react';\n\nimport { TvingVirtualListItemOption } from './types';\n\n/**\n * 현재 화면에 노출에 필요한 tvingVirtualListItems 만을 반환\n * @param tvingVirtualListItems\n * @param renderingItemsCount\n * @param virtualIndex\n * @param prerenderingItemsCount\n */\nconst sliceTvingVirtualListItems = (\n  tvingVirtualListItems: React.ReactElement<TvingVirtualListItemOption>[],\n  virtualIndex: number,\n  renderingItemsCount: number,\n  prerenderingItemsCount = 2,\n): React.ReactElement<TvingVirtualListItemOption>[] => {\n  const virtualListItemsLength = tvingVirtualListItems.length;\n  // 루프가 아닐 경우 기존에 변환한 아이템들 그대로 사용\n\n  const slicedStartOffset = Math.max(0, (virtualIndex % virtualListItemsLength) - prerenderingItemsCount);\n\n  const slicedTvingVirtualListItems = tvingVirtualListItems.slice(\n    slicedStartOffset,\n    Math.min((virtualIndex % virtualListItemsLength) + renderingItemsCount + prerenderingItemsCount, virtualListItemsLength),\n  );\n\n  // sliced virtualList item 이 prerenderingItem 인 경우 isInactive 속성을 추가\n  return slicedTvingVirtualListItems.map((tvingVirtualListItem, index) => {\n    // const isInactive = index + slicedStartOffset < virtualIndex || index + slicedStartOffset >= virtualIndex + renderingItemsCount;\n    const isBefore = index + slicedStartOffset < virtualIndex;\n    const isAfter = index + slicedStartOffset >= virtualIndex + renderingItemsCount;\n    const isInactive = isBefore || isAfter;\n    return React.cloneElement(tvingVirtualListItem, {\n      ...tvingVirtualListItem.props,\n      key: `${tvingVirtualListItem.props.offset}_${tvingVirtualListItem.props}`,\n      isBefore,\n      isAfter,\n      isInactive,\n    });\n  });\n};\nexport default sliceTvingVirtualListItems;\n",
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/swiper/TvingVirtualSwiper.tsx",
    messages: [],
    suppressedMessages: [
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to function parameter 'renderingItemsCount'.",
        line: 35,
        column: 5,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParam",
        endLine: 35,
        endColumn: 24,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to function parameter 'prerenderingItemsCount'.",
        line: 37,
        column: 5,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParam",
        endLine: 37,
        endColumn: 27,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
      {
        ruleId: "no-param-reassign",
        severity: 2,
        message: "Assignment to function parameter 'direction'.",
        line: 39,
        column: 5,
        nodeType: "Identifier",
        messageId: "assignmentToFunctionParam",
        endLine: 39,
        endColumn: 14,
        suppressions: [
          {
            kind: "directive",
            justification: "",
          },
        ],
      },
    ],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/swiper/TvingVirtualSwiperItem.tsx",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/swiper/getTvingVirtualSwiperItems.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
  {
    filePath:
      "/Users/jeongjingyu/Desktop/workspaces/web-3/packages/tving-utils/src/utils/tving-virtual-list/types.ts",
    messages: [],
    suppressedMessages: [],
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [
      {
        ruleId: "no-extra-semi",
        replacedBy: [],
      },
      {
        ruleId: "no-mixed-spaces-and-tabs",
        replacedBy: [],
      },
      {
        ruleId: "lines-between-class-members",
        replacedBy: [],
      },
      {
        ruleId: "lines-around-directive",
        replacedBy: ["padding-line-between-statements"],
      },
      {
        ruleId: "no-new-object",
        replacedBy: ["no-object-constructor"],
      },
      {
        ruleId: "spaced-comment",
        replacedBy: [],
      },
      {
        ruleId: "global-require",
        replacedBy: [],
      },
      {
        ruleId: "no-buffer-constructor",
        replacedBy: [],
      },
      {
        ruleId: "no-new-require",
        replacedBy: [],
      },
      {
        ruleId: "no-path-concat",
        replacedBy: [],
      },
      {
        ruleId: "no-return-await",
        replacedBy: [],
      },
    ],
  },
];

const rulesMeta = {
  "accessor-pairs": {
    type: "suggestion",
    docs: {
      description: "Enforce getter and setter pairs in objects and classes",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/accessor-pairs",
    },
    schema: [
      {
        type: "object",
        properties: {
          getWithoutSet: {
            type: "boolean",
            default: false,
          },
          setWithoutGet: {
            type: "boolean",
            default: true,
          },
          enforceForClassMembers: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      missingGetterInPropertyDescriptor:
        "Getter is not present in property descriptor.",
      missingSetterInPropertyDescriptor:
        "Setter is not present in property descriptor.",
      missingGetterInObjectLiteral: "Getter is not present for {{ name }}.",
      missingSetterInObjectLiteral: "Setter is not present for {{ name }}.",
      missingGetterInClass: "Getter is not present for class {{ name }}.",
      missingSetterInClass: "Setter is not present for class {{ name }}.",
    },
  },
  "array-bracket-newline": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Enforce linebreaks after opening and before closing array brackets",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/array-bracket-newline",
    },
    fixable: "whitespace",
    schema: [
      {
        oneOf: [
          {
            enum: ["always", "never", "consistent"],
          },
          {
            type: "object",
            properties: {
              multiline: {
                type: "boolean",
              },
              minItems: {
                type: ["integer", "null"],
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      unexpectedOpeningLinebreak: "There should be no linebreak after '['.",
      unexpectedClosingLinebreak: "There should be no linebreak before ']'.",
      missingOpeningLinebreak: "A linebreak is required after '['.",
      missingClosingLinebreak: "A linebreak is required before ']'.",
    },
  },
  "array-bracket-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent spacing inside array brackets",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/array-bracket-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never"],
      },
      {
        type: "object",
        properties: {
          singleValue: {
            type: "boolean",
          },
          objectsInArrays: {
            type: "boolean",
          },
          arraysInArrays: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedSpaceAfter: "There should be no space after '{{tokenValue}}'.",
      unexpectedSpaceBefore:
        "There should be no space before '{{tokenValue}}'.",
      missingSpaceAfter: "A space is required after '{{tokenValue}}'.",
      missingSpaceBefore: "A space is required before '{{tokenValue}}'.",
    },
  },
  "array-callback-return": {
    type: "problem",
    docs: {
      description: "Enforce `return` statements in callbacks of array methods",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/array-callback-return",
    },
    hasSuggestions: true,
    schema: [
      {
        type: "object",
        properties: {
          allowImplicit: {
            type: "boolean",
            default: false,
          },
          checkForEach: {
            type: "boolean",
            default: false,
          },
          allowVoid: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      expectedAtEnd:
        "{{arrayMethodName}}() expects a value to be returned at the end of {{name}}.",
      expectedInside:
        "{{arrayMethodName}}() expects a return value from {{name}}.",
      expectedReturnValue:
        "{{arrayMethodName}}() expects a return value from {{name}}.",
      expectedNoReturnValue:
        "{{arrayMethodName}}() expects no useless return value from {{name}}.",
      wrapBraces: "Wrap the expression in `{}`.",
      prependVoid: "Prepend `void` to the expression.",
    },
  },
  "array-element-newline": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce line breaks after each array element",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/array-element-newline",
    },
    fixable: "whitespace",
    schema: {
      definitions: {
        basicConfig: {
          oneOf: [
            {
              enum: ["always", "never", "consistent"],
            },
            {
              type: "object",
              properties: {
                multiline: {
                  type: "boolean",
                },
                minItems: {
                  type: ["integer", "null"],
                  minimum: 0,
                },
              },
              additionalProperties: false,
            },
          ],
        },
      },
      type: "array",
      items: [
        {
          oneOf: [
            {
              $ref: "#/definitions/basicConfig",
            },
            {
              type: "object",
              properties: {
                ArrayExpression: {
                  $ref: "#/definitions/basicConfig",
                },
                ArrayPattern: {
                  $ref: "#/definitions/basicConfig",
                },
              },
              additionalProperties: false,
              minProperties: 1,
            },
          ],
        },
      ],
    },
    messages: {
      unexpectedLineBreak: "There should be no linebreak here.",
      missingLineBreak: "There should be a linebreak after this element.",
    },
  },
  "arrow-body-style": {
    type: "suggestion",
    docs: {
      description: "Require braces around arrow function bodies",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/arrow-body-style",
    },
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["always", "never"],
            },
          ],
          minItems: 0,
          maxItems: 1,
        },
        {
          type: "array",
          items: [
            {
              enum: ["as-needed"],
            },
            {
              type: "object",
              properties: {
                requireReturnForObjectLiteral: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
      ],
    },
    fixable: "code",
    messages: {
      unexpectedOtherBlock:
        "Unexpected block statement surrounding arrow body.",
      unexpectedEmptyBlock:
        "Unexpected block statement surrounding arrow body; put a value of `undefined` immediately after the `=>`.",
      unexpectedObjectBlock:
        "Unexpected block statement surrounding arrow body; parenthesize the returned value and move it immediately after the `=>`.",
      unexpectedSingleBlock:
        "Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.",
      expectedBlock: "Expected block statement surrounding arrow body.",
    },
  },
  "arrow-parens": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Require parentheses around arrow function arguments",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/arrow-parens",
    },
    fixable: "code",
    schema: [
      {
        enum: ["always", "as-needed"],
      },
      {
        type: "object",
        properties: {
          requireForBlockBody: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedParens:
        "Unexpected parentheses around single function argument.",
      expectedParens: "Expected parentheses around arrow function argument.",
      unexpectedParensInline:
        "Unexpected parentheses around single function argument having a body with no curly braces.",
      expectedParensBlock:
        "Expected parentheses around arrow function argument having a body with curly braces.",
    },
  },
  "arrow-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Enforce consistent spacing before and after the arrow in arrow functions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/arrow-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          before: {
            type: "boolean",
            default: true,
          },
          after: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      expectedBefore: "Missing space before =>.",
      unexpectedBefore: "Unexpected space before =>.",
      expectedAfter: "Missing space after =>.",
      unexpectedAfter: "Unexpected space after =>.",
    },
  },
  "block-scoped-var": {
    type: "suggestion",
    docs: {
      description:
        "Enforce the use of variables within the scope they are defined",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/block-scoped-var",
    },
    schema: [],
    messages: {
      outOfScope:
        "'{{name}}' declared on line {{definitionLine}} column {{definitionColumn}} is used outside of binding context.",
    },
  },
  "block-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Disallow or enforce spaces inside of blocks after opening block and before closing block",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/block-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never"],
      },
    ],
    messages: {
      missing: "Requires a space {{location}} '{{token}}'.",
      extra: "Unexpected space(s) {{location}} '{{token}}'.",
    },
  },
  "brace-style": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent brace style for blocks",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/brace-style",
    },
    schema: [
      {
        enum: ["1tbs", "stroustrup", "allman"],
      },
      {
        type: "object",
        properties: {
          allowSingleLine: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "whitespace",
    messages: {
      nextLineOpen:
        "Opening curly brace does not appear on the same line as controlling statement.",
      sameLineOpen:
        "Opening curly brace appears on the same line as controlling statement.",
      blockSameLine: "Statement inside of curly braces should be on next line.",
      nextLineClose:
        "Closing curly brace does not appear on the same line as the subsequent block.",
      singleLineClose:
        "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
      sameLineClose:
        "Closing curly brace appears on the same line as the subsequent block.",
    },
  },
  "callback-return": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "Require `return` statements after callbacks",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/callback-return",
    },
    schema: [
      {
        type: "array",
        items: {
          type: "string",
        },
      },
    ],
    messages: {
      missingReturn: "Expected return with your callback function.",
    },
  },
  camelcase: {
    type: "suggestion",
    docs: {
      description: "Enforce camelcase naming convention",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/camelcase",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreDestructuring: {
            type: "boolean",
            default: false,
          },
          ignoreImports: {
            type: "boolean",
            default: false,
          },
          ignoreGlobals: {
            type: "boolean",
            default: false,
          },
          properties: {
            enum: ["always", "never"],
          },
          allow: {
            type: "array",
            items: [
              {
                type: "string",
              },
            ],
            minItems: 0,
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      notCamelCase: "Identifier '{{name}}' is not in camel case.",
      notCamelCasePrivate: "#{{name}} is not in camel case.",
    },
  },
  "capitalized-comments": {
    type: "suggestion",
    docs: {
      description:
        "Enforce or disallow capitalization of the first letter of a comment",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/capitalized-comments",
    },
    fixable: "code",
    schema: [
      {
        enum: ["always", "never"],
      },
      {
        oneOf: [
          {
            type: "object",
            properties: {
              ignorePattern: {
                type: "string",
              },
              ignoreInlineComments: {
                type: "boolean",
              },
              ignoreConsecutiveComments: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              line: {
                type: "object",
                properties: {
                  ignorePattern: {
                    type: "string",
                  },
                  ignoreInlineComments: {
                    type: "boolean",
                  },
                  ignoreConsecutiveComments: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              block: {
                type: "object",
                properties: {
                  ignorePattern: {
                    type: "string",
                  },
                  ignoreInlineComments: {
                    type: "boolean",
                  },
                  ignoreConsecutiveComments: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      unexpectedLowercaseComment:
        "Comments should not begin with a lowercase character.",
      unexpectedUppercaseComment:
        "Comments should not begin with an uppercase character.",
    },
  },
  "class-methods-use-this": {
    type: "suggestion",
    docs: {
      description: "Enforce that class methods utilize `this`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/class-methods-use-this",
    },
    schema: [
      {
        type: "object",
        properties: {
          exceptMethods: {
            type: "array",
            items: {
              type: "string",
            },
          },
          enforceForClassFields: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      missingThis: "Expected 'this' to be used by class {{name}}.",
    },
  },
  "comma-dangle": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Require or disallow trailing commas",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/comma-dangle",
    },
    fixable: "code",
    schema: {
      definitions: {
        value: {
          enum: ["always-multiline", "always", "never", "only-multiline"],
        },
        valueWithIgnore: {
          enum: [
            "always-multiline",
            "always",
            "ignore",
            "never",
            "only-multiline",
          ],
        },
      },
      type: "array",
      items: [
        {
          oneOf: [
            {
              $ref: "#/definitions/value",
            },
            {
              type: "object",
              properties: {
                arrays: {
                  $ref: "#/definitions/valueWithIgnore",
                },
                objects: {
                  $ref: "#/definitions/valueWithIgnore",
                },
                imports: {
                  $ref: "#/definitions/valueWithIgnore",
                },
                exports: {
                  $ref: "#/definitions/valueWithIgnore",
                },
                functions: {
                  $ref: "#/definitions/valueWithIgnore",
                },
              },
              additionalProperties: false,
            },
          ],
        },
      ],
      additionalItems: false,
    },
    messages: {
      unexpected: "Unexpected trailing comma.",
      missing: "Missing trailing comma.",
    },
  },
  "comma-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent spacing before and after commas",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/comma-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          before: {
            type: "boolean",
            default: false,
          },
          after: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      missing: "A space is required {{loc}} ','.",
      unexpected: "There should be no space {{loc}} ','.",
    },
  },
  "comma-style": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent comma style",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/comma-style",
    },
    fixable: "code",
    schema: [
      {
        enum: ["first", "last"],
      },
      {
        type: "object",
        properties: {
          exceptions: {
            type: "object",
            additionalProperties: {
              type: "boolean",
            },
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedLineBeforeAndAfterComma:
        "Bad line breaking before and after ','.",
      expectedCommaFirst: "',' should be placed first.",
      expectedCommaLast: "',' should be placed last.",
    },
  },
  complexity: {
    type: "suggestion",
    docs: {
      description:
        "Enforce a maximum cyclomatic complexity allowed in a program",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/complexity",
    },
    schema: [
      {
        oneOf: [
          {
            type: "integer",
            minimum: 0,
          },
          {
            type: "object",
            properties: {
              maximum: {
                type: "integer",
                minimum: 0,
              },
              max: {
                type: "integer",
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      complex:
        "{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}.",
    },
  },
  "computed-property-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Enforce consistent spacing inside computed property brackets",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/computed-property-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never"],
      },
      {
        type: "object",
        properties: {
          enforceForClassMembers: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedSpaceBefore:
        "There should be no space before '{{tokenValue}}'.",
      unexpectedSpaceAfter: "There should be no space after '{{tokenValue}}'.",
      missingSpaceBefore: "A space is required before '{{tokenValue}}'.",
      missingSpaceAfter: "A space is required after '{{tokenValue}}'.",
    },
  },
  "consistent-return": {
    type: "suggestion",
    docs: {
      description:
        "Require `return` statements to either always or never specify values",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/consistent-return",
    },
    schema: [
      {
        type: "object",
        properties: {
          treatUndefinedAsUnspecified: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      missingReturn: "Expected to return a value at the end of {{name}}.",
      missingReturnValue: "{{name}} expected a return value.",
      unexpectedReturnValue: "{{name}} expected no return value.",
    },
  },
  "consistent-this": {
    type: "suggestion",
    docs: {
      description:
        "Enforce consistent naming when capturing the current execution context",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/consistent-this",
    },
    schema: {
      type: "array",
      items: {
        type: "string",
        minLength: 1,
      },
      uniqueItems: true,
    },
    messages: {
      aliasNotAssignedToThis:
        "Designated alias '{{name}}' is not assigned to 'this'.",
      unexpectedAlias: "Unexpected alias '{{name}}' for 'this'.",
    },
  },
  "constructor-super": {
    type: "problem",
    docs: {
      description: "Require `super()` calls in constructors",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/constructor-super",
    },
    schema: [],
    messages: {
      missingSome: "Lacked a call of 'super()' in some code paths.",
      missingAll: "Expected to call 'super()'.",
      duplicate: "Unexpected duplicate 'super()'.",
      badSuper: "Unexpected 'super()' because 'super' is not a constructor.",
      unexpected: "Unexpected 'super()'.",
    },
  },
  curly: {
    type: "suggestion",
    docs: {
      description: "Enforce consistent brace style for all control statements",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/curly",
    },
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["all"],
            },
          ],
          minItems: 0,
          maxItems: 1,
        },
        {
          type: "array",
          items: [
            {
              enum: ["multi", "multi-line", "multi-or-nest"],
            },
            {
              enum: ["consistent"],
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
      ],
    },
    fixable: "code",
    messages: {
      missingCurlyAfter: "Expected { after '{{name}}'.",
      missingCurlyAfterCondition: "Expected { after '{{name}}' condition.",
      unexpectedCurlyAfter: "Unnecessary { after '{{name}}'.",
      unexpectedCurlyAfterCondition:
        "Unnecessary { after '{{name}}' condition.",
    },
  },
  "default-case": {
    type: "suggestion",
    docs: {
      description: "Require `default` cases in `switch` statements",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/default-case",
    },
    schema: [
      {
        type: "object",
        properties: {
          commentPattern: {
            type: "string",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      missingDefaultCase: "Expected a default case.",
    },
  },
  "default-case-last": {
    type: "suggestion",
    docs: {
      description: "Enforce default clauses in switch statements to be last",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/default-case-last",
    },
    schema: [],
    messages: {
      notLast: "Default clause should be the last clause.",
    },
  },
  "default-param-last": {
    type: "suggestion",
    docs: {
      description: "Enforce default parameters to be last",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/default-param-last",
    },
    schema: [],
    messages: {
      shouldBeLast: "Default parameters should be last.",
    },
  },
  "dot-location": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent newlines before and after dots",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/dot-location",
    },
    schema: [
      {
        enum: ["object", "property"],
      },
    ],
    fixable: "code",
    messages: {
      expectedDotAfterObject: "Expected dot to be on same line as object.",
      expectedDotBeforeProperty: "Expected dot to be on same line as property.",
    },
  },
  "dot-notation": {
    type: "suggestion",
    docs: {
      description: "Enforce dot notation whenever possible",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/dot-notation",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowKeywords: {
            type: "boolean",
            default: true,
          },
          allowPattern: {
            type: "string",
            default: "",
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      useDot: "[{{key}}] is better written in dot notation.",
      useBrackets: ".{{key}} is a syntax error.",
    },
  },
  "eol-last": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Require or disallow newline at the end of files",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/eol-last",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never", "unix", "windows"],
      },
    ],
    messages: {
      missing: "Newline required at end of file but not found.",
      unexpected: "Newline not allowed at end of file.",
    },
  },
  eqeqeq: {
    type: "suggestion",
    docs: {
      description: "Require the use of `===` and `!==`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/eqeqeq",
    },
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["always"],
            },
            {
              type: "object",
              properties: {
                null: {
                  enum: ["always", "never", "ignore"],
                },
              },
              additionalProperties: false,
            },
          ],
          additionalItems: false,
        },
        {
          type: "array",
          items: [
            {
              enum: ["smart", "allow-null"],
            },
          ],
          additionalItems: false,
        },
      ],
    },
    fixable: "code",
    messages: {
      unexpected:
        "Expected '{{expectedOperator}}' and instead saw '{{actualOperator}}'.",
    },
  },
  "for-direction": {
    type: "problem",
    docs: {
      description:
        'Enforce "for" loop update clause moving the counter in the right direction',
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/for-direction",
    },
    fixable: null,
    schema: [],
    messages: {
      incorrectDirection:
        "The update clause in this loop moves the variable in the wrong direction.",
    },
  },
  "func-call-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Require or disallow spacing between function identifiers and their invocations",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/func-call-spacing",
    },
    fixable: "whitespace",
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["never"],
            },
          ],
          minItems: 0,
          maxItems: 1,
        },
        {
          type: "array",
          items: [
            {
              enum: ["always"],
            },
            {
              type: "object",
              properties: {
                allowNewlines: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
      ],
    },
    messages: {
      unexpectedWhitespace:
        "Unexpected whitespace between function name and paren.",
      unexpectedNewline: "Unexpected newline between function name and paren.",
      missing: "Missing space between function name and paren.",
    },
  },
  "func-name-matching": {
    type: "suggestion",
    docs: {
      description:
        "Require function names to match the name of the variable or property to which they are assigned",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/func-name-matching",
    },
    schema: {
      anyOf: [
        {
          type: "array",
          additionalItems: false,
          items: [
            {
              enum: ["always", "never"],
            },
            {
              type: "object",
              properties: {
                considerPropertyDescriptor: {
                  type: "boolean",
                },
                includeCommonJSModuleExports: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
        },
        {
          type: "array",
          additionalItems: false,
          items: [
            {
              type: "object",
              properties: {
                considerPropertyDescriptor: {
                  type: "boolean",
                },
                includeCommonJSModuleExports: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
        },
      ],
    },
    messages: {
      matchProperty:
        "Function name `{{funcName}}` should match property name `{{name}}`.",
      matchVariable:
        "Function name `{{funcName}}` should match variable name `{{name}}`.",
      notMatchProperty:
        "Function name `{{funcName}}` should not match property name `{{name}}`.",
      notMatchVariable:
        "Function name `{{funcName}}` should not match variable name `{{name}}`.",
    },
  },
  "func-names": {
    type: "suggestion",
    docs: {
      description: "Require or disallow named `function` expressions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/func-names",
    },
    schema: {
      definitions: {
        value: {
          enum: ["always", "as-needed", "never"],
        },
      },
      items: [
        {
          $ref: "#/definitions/value",
        },
        {
          type: "object",
          properties: {
            generators: {
              $ref: "#/definitions/value",
            },
          },
          additionalProperties: false,
        },
      ],
    },
    messages: {
      unnamed: "Unexpected unnamed {{name}}.",
      named: "Unexpected named {{name}}.",
    },
  },
  "func-style": {
    type: "suggestion",
    docs: {
      description:
        "Enforce the consistent use of either `function` declarations or expressions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/func-style",
    },
    schema: [
      {
        enum: ["declaration", "expression"],
      },
      {
        type: "object",
        properties: {
          allowArrowFunctions: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      expression: "Expected a function expression.",
      declaration: "Expected a function declaration.",
    },
  },
  "function-call-argument-newline": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce line breaks between arguments of a function call",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/function-call-argument-newline",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never", "consistent"],
      },
    ],
    messages: {
      unexpectedLineBreak: "There should be no line break here.",
      missingLineBreak: "There should be a line break after this argument.",
    },
  },
  "function-paren-newline": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent line breaks inside function parentheses",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/function-paren-newline",
    },
    fixable: "whitespace",
    schema: [
      {
        oneOf: [
          {
            enum: [
              "always",
              "never",
              "consistent",
              "multiline",
              "multiline-arguments",
            ],
          },
          {
            type: "object",
            properties: {
              minItems: {
                type: "integer",
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      expectedBefore: "Expected newline before ')'.",
      expectedAfter: "Expected newline after '('.",
      expectedBetween: "Expected newline between arguments/params.",
      unexpectedBefore: "Unexpected newline before ')'.",
      unexpectedAfter: "Unexpected newline after '('.",
    },
  },
  "generator-star-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Enforce consistent spacing around `*` operators in generator functions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/generator-star-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        oneOf: [
          {
            enum: ["before", "after", "both", "neither"],
          },
          {
            type: "object",
            properties: {
              before: {
                type: "boolean",
              },
              after: {
                type: "boolean",
              },
              named: {
                oneOf: [
                  {
                    enum: ["before", "after", "both", "neither"],
                  },
                  {
                    type: "object",
                    properties: {
                      before: {
                        type: "boolean",
                      },
                      after: {
                        type: "boolean",
                      },
                    },
                    additionalProperties: false,
                  },
                ],
              },
              anonymous: {
                oneOf: [
                  {
                    enum: ["before", "after", "both", "neither"],
                  },
                  {
                    type: "object",
                    properties: {
                      before: {
                        type: "boolean",
                      },
                      after: {
                        type: "boolean",
                      },
                    },
                    additionalProperties: false,
                  },
                ],
              },
              method: {
                oneOf: [
                  {
                    enum: ["before", "after", "both", "neither"],
                  },
                  {
                    type: "object",
                    properties: {
                      before: {
                        type: "boolean",
                      },
                      after: {
                        type: "boolean",
                      },
                    },
                    additionalProperties: false,
                  },
                ],
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      missingBefore: "Missing space before *.",
      missingAfter: "Missing space after *.",
      unexpectedBefore: "Unexpected space before *.",
      unexpectedAfter: "Unexpected space after *.",
    },
  },
  "getter-return": {
    type: "problem",
    docs: {
      description: "Enforce `return` statements in getters",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/getter-return",
    },
    fixable: null,
    schema: [
      {
        type: "object",
        properties: {
          allowImplicit: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      expected: "Expected to return a value in {{name}}.",
      expectedAlways: "Expected {{name}} to always return a value.",
    },
  },
  "global-require": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description:
        "Require `require()` calls to be placed at top-level module scope",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/global-require",
    },
    schema: [],
    messages: {
      unexpected: "Unexpected require().",
    },
  },
  "grouped-accessor-pairs": {
    type: "suggestion",
    docs: {
      description:
        "Require grouped accessor pairs in object literals and classes",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/grouped-accessor-pairs",
    },
    schema: [
      {
        enum: ["anyOrder", "getBeforeSet", "setBeforeGet"],
      },
    ],
    messages: {
      notGrouped:
        "Accessor pair {{ formerName }} and {{ latterName }} should be grouped.",
      invalidOrder: "Expected {{ latterName }} to be before {{ formerName }}.",
    },
  },
  "guard-for-in": {
    type: "suggestion",
    docs: {
      description: "Require `for-in` loops to include an `if` statement",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/guard-for-in",
    },
    schema: [],
    messages: {
      wrap: "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.",
    },
  },
  "handle-callback-err": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "Require error handling in callbacks",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/handle-callback-err",
    },
    schema: [
      {
        type: "string",
      },
    ],
    messages: {
      expected: "Expected error to be handled.",
    },
  },
  "id-blacklist": {
    deprecated: true,
    replacedBy: ["id-denylist"],
    type: "suggestion",
    docs: {
      description: "Disallow specified identifiers",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/id-blacklist",
    },
    schema: {
      type: "array",
      items: {
        type: "string",
      },
      uniqueItems: true,
    },
    messages: {
      restricted: "Identifier '{{name}}' is restricted.",
    },
  },
  "id-denylist": {
    type: "suggestion",
    docs: {
      description: "Disallow specified identifiers",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/id-denylist",
    },
    schema: {
      type: "array",
      items: {
        type: "string",
      },
      uniqueItems: true,
    },
    messages: {
      restricted: "Identifier '{{name}}' is restricted.",
      restrictedPrivate: "Identifier '#{{name}}' is restricted.",
    },
  },
  "id-length": {
    type: "suggestion",
    docs: {
      description: "Enforce minimum and maximum identifier lengths",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/id-length",
    },
    schema: [
      {
        type: "object",
        properties: {
          min: {
            type: "integer",
            default: 2,
          },
          max: {
            type: "integer",
          },
          exceptions: {
            type: "array",
            uniqueItems: true,
            items: {
              type: "string",
            },
          },
          exceptionPatterns: {
            type: "array",
            uniqueItems: true,
            items: {
              type: "string",
            },
          },
          properties: {
            enum: ["always", "never"],
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      tooShort: "Identifier name '{{name}}' is too short (< {{min}}).",
      tooShortPrivate: "Identifier name '#{{name}}' is too short (< {{min}}).",
      tooLong: "Identifier name '{{name}}' is too long (> {{max}}).",
      tooLongPrivate: "Identifier name #'{{name}}' is too long (> {{max}}).",
    },
  },
  "id-match": {
    type: "suggestion",
    docs: {
      description:
        "Require identifiers to match a specified regular expression",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/id-match",
    },
    schema: [
      {
        type: "string",
      },
      {
        type: "object",
        properties: {
          properties: {
            type: "boolean",
            default: false,
          },
          classFields: {
            type: "boolean",
            default: false,
          },
          onlyDeclarations: {
            type: "boolean",
            default: false,
          },
          ignoreDestructuring: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      notMatch:
        "Identifier '{{name}}' does not match the pattern '{{pattern}}'.",
      notMatchPrivate:
        "Identifier '#{{name}}' does not match the pattern '{{pattern}}'.",
    },
  },
  "implicit-arrow-linebreak": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce the location of arrow function bodies",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/implicit-arrow-linebreak",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["beside", "below"],
      },
    ],
    messages: {
      expected: "Expected a linebreak before this expression.",
      unexpected: "Expected no linebreak before this expression.",
    },
  },
  indent: {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent indentation",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/indent",
    },
    fixable: "whitespace",
    schema: [
      {
        oneOf: [
          {
            enum: ["tab"],
          },
          {
            type: "integer",
            minimum: 0,
          },
        ],
      },
      {
        type: "object",
        properties: {
          SwitchCase: {
            type: "integer",
            minimum: 0,
            default: 0,
          },
          VariableDeclarator: {
            oneOf: [
              {
                oneOf: [
                  {
                    type: "integer",
                    minimum: 0,
                  },
                  {
                    enum: ["first", "off"],
                  },
                ],
              },
              {
                type: "object",
                properties: {
                  var: {
                    oneOf: [
                      {
                        type: "integer",
                        minimum: 0,
                      },
                      {
                        enum: ["first", "off"],
                      },
                    ],
                  },
                  let: {
                    oneOf: [
                      {
                        type: "integer",
                        minimum: 0,
                      },
                      {
                        enum: ["first", "off"],
                      },
                    ],
                  },
                  const: {
                    oneOf: [
                      {
                        type: "integer",
                        minimum: 0,
                      },
                      {
                        enum: ["first", "off"],
                      },
                    ],
                  },
                },
                additionalProperties: false,
              },
            ],
          },
          outerIIFEBody: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                enum: ["off"],
              },
            ],
          },
          MemberExpression: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                enum: ["off"],
              },
            ],
          },
          FunctionDeclaration: {
            type: "object",
            properties: {
              parameters: {
                oneOf: [
                  {
                    type: "integer",
                    minimum: 0,
                  },
                  {
                    enum: ["first", "off"],
                  },
                ],
              },
              body: {
                type: "integer",
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
          FunctionExpression: {
            type: "object",
            properties: {
              parameters: {
                oneOf: [
                  {
                    type: "integer",
                    minimum: 0,
                  },
                  {
                    enum: ["first", "off"],
                  },
                ],
              },
              body: {
                type: "integer",
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
          StaticBlock: {
            type: "object",
            properties: {
              body: {
                type: "integer",
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
          CallExpression: {
            type: "object",
            properties: {
              arguments: {
                oneOf: [
                  {
                    type: "integer",
                    minimum: 0,
                  },
                  {
                    enum: ["first", "off"],
                  },
                ],
              },
            },
            additionalProperties: false,
          },
          ArrayExpression: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                enum: ["first", "off"],
              },
            ],
          },
          ObjectExpression: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                enum: ["first", "off"],
              },
            ],
          },
          ImportDeclaration: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                enum: ["first", "off"],
              },
            ],
          },
          flatTernaryExpressions: {
            type: "boolean",
            default: false,
          },
          offsetTernaryExpressions: {
            type: "boolean",
            default: false,
          },
          ignoredNodes: {
            type: "array",
            items: {
              type: "string",
              not: {
                pattern: ":exit$",
              },
            },
          },
          ignoreComments: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      wrongIndentation:
        "Expected indentation of {{expected}} but found {{actual}}.",
    },
  },
  "indent-legacy": {
    type: "layout",
    docs: {
      description: "Enforce consistent indentation",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/indent-legacy",
    },
    deprecated: true,
    replacedBy: ["indent"],
    fixable: "whitespace",
    schema: [
      {
        oneOf: [
          {
            enum: ["tab"],
          },
          {
            type: "integer",
            minimum: 0,
          },
        ],
      },
      {
        type: "object",
        properties: {
          SwitchCase: {
            type: "integer",
            minimum: 0,
          },
          VariableDeclarator: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                type: "object",
                properties: {
                  var: {
                    type: "integer",
                    minimum: 0,
                  },
                  let: {
                    type: "integer",
                    minimum: 0,
                  },
                  const: {
                    type: "integer",
                    minimum: 0,
                  },
                },
              },
            ],
          },
          outerIIFEBody: {
            type: "integer",
            minimum: 0,
          },
          MemberExpression: {
            type: "integer",
            minimum: 0,
          },
          FunctionDeclaration: {
            type: "object",
            properties: {
              parameters: {
                oneOf: [
                  {
                    type: "integer",
                    minimum: 0,
                  },
                  {
                    enum: ["first"],
                  },
                ],
              },
              body: {
                type: "integer",
                minimum: 0,
              },
            },
          },
          FunctionExpression: {
            type: "object",
            properties: {
              parameters: {
                oneOf: [
                  {
                    type: "integer",
                    minimum: 0,
                  },
                  {
                    enum: ["first"],
                  },
                ],
              },
              body: {
                type: "integer",
                minimum: 0,
              },
            },
          },
          CallExpression: {
            type: "object",
            properties: {
              parameters: {
                oneOf: [
                  {
                    type: "integer",
                    minimum: 0,
                  },
                  {
                    enum: ["first"],
                  },
                ],
              },
            },
          },
          ArrayExpression: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                enum: ["first"],
              },
            ],
          },
          ObjectExpression: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                enum: ["first"],
              },
            ],
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      expected: "Expected indentation of {{expected}} but found {{actual}}.",
    },
  },
  "init-declarations": {
    type: "suggestion",
    docs: {
      description:
        "Require or disallow initialization in variable declarations",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/init-declarations",
    },
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["always"],
            },
          ],
          minItems: 0,
          maxItems: 1,
        },
        {
          type: "array",
          items: [
            {
              enum: ["never"],
            },
            {
              type: "object",
              properties: {
                ignoreForLoopInit: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
      ],
    },
    messages: {
      initialized:
        "Variable '{{idName}}' should be initialized on declaration.",
      notInitialized:
        "Variable '{{idName}}' should not be initialized on declaration.",
    },
  },
  "jsx-quotes": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Enforce the consistent use of either double or single quotes in JSX attributes",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/jsx-quotes",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["prefer-single", "prefer-double"],
      },
    ],
    messages: {
      unexpected: "Unexpected usage of {{description}}.",
    },
  },
  "key-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Enforce consistent spacing between keys and values in object literal properties",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/key-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        anyOf: [
          {
            type: "object",
            properties: {
              align: {
                anyOf: [
                  {
                    enum: ["colon", "value"],
                  },
                  {
                    type: "object",
                    properties: {
                      mode: {
                        enum: ["strict", "minimum"],
                      },
                      on: {
                        enum: ["colon", "value"],
                      },
                      beforeColon: {
                        type: "boolean",
                      },
                      afterColon: {
                        type: "boolean",
                      },
                    },
                    additionalProperties: false,
                  },
                ],
              },
              mode: {
                enum: ["strict", "minimum"],
              },
              beforeColon: {
                type: "boolean",
              },
              afterColon: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              singleLine: {
                type: "object",
                properties: {
                  mode: {
                    enum: ["strict", "minimum"],
                  },
                  beforeColon: {
                    type: "boolean",
                  },
                  afterColon: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              multiLine: {
                type: "object",
                properties: {
                  align: {
                    anyOf: [
                      {
                        enum: ["colon", "value"],
                      },
                      {
                        type: "object",
                        properties: {
                          mode: {
                            enum: ["strict", "minimum"],
                          },
                          on: {
                            enum: ["colon", "value"],
                          },
                          beforeColon: {
                            type: "boolean",
                          },
                          afterColon: {
                            type: "boolean",
                          },
                        },
                        additionalProperties: false,
                      },
                    ],
                  },
                  mode: {
                    enum: ["strict", "minimum"],
                  },
                  beforeColon: {
                    type: "boolean",
                  },
                  afterColon: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              singleLine: {
                type: "object",
                properties: {
                  mode: {
                    enum: ["strict", "minimum"],
                  },
                  beforeColon: {
                    type: "boolean",
                  },
                  afterColon: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              multiLine: {
                type: "object",
                properties: {
                  mode: {
                    enum: ["strict", "minimum"],
                  },
                  beforeColon: {
                    type: "boolean",
                  },
                  afterColon: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              align: {
                type: "object",
                properties: {
                  mode: {
                    enum: ["strict", "minimum"],
                  },
                  on: {
                    enum: ["colon", "value"],
                  },
                  beforeColon: {
                    type: "boolean",
                  },
                  afterColon: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      extraKey: "Extra space after {{computed}}key '{{key}}'.",
      extraValue: "Extra space before value for {{computed}}key '{{key}}'.",
      missingKey: "Missing space after {{computed}}key '{{key}}'.",
      missingValue: "Missing space before value for {{computed}}key '{{key}}'.",
    },
  },
  "keyword-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent spacing before and after keywords",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/keyword-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          before: {
            type: "boolean",
            default: true,
          },
          after: {
            type: "boolean",
            default: true,
          },
          overrides: {
            type: "object",
            properties: {
              abstract: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              as: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              async: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              await: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              boolean: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              break: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              byte: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              case: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              catch: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              char: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              class: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              const: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              continue: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              debugger: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              default: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              delete: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              do: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              double: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              else: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              enum: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              export: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              extends: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              false: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              final: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              finally: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              float: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              for: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              from: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              function: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              get: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              goto: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              if: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              implements: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              import: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              in: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              instanceof: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              int: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              interface: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              let: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              long: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              native: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              new: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              null: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              of: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              package: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              private: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              protected: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              public: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              return: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              set: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              short: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              static: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              super: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              switch: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              synchronized: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              this: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              throw: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              throws: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              transient: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              true: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              try: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              typeof: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              var: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              void: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              volatile: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              while: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              with: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              yield: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      expectedBefore: 'Expected space(s) before "{{value}}".',
      expectedAfter: 'Expected space(s) after "{{value}}".',
      unexpectedBefore: 'Unexpected space(s) before "{{value}}".',
      unexpectedAfter: 'Unexpected space(s) after "{{value}}".',
    },
  },
  "line-comment-position": {
    type: "layout",
    docs: {
      description: "Enforce position of line comments",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/line-comment-position",
    },
    schema: [
      {
        oneOf: [
          {
            enum: ["above", "beside"],
          },
          {
            type: "object",
            properties: {
              position: {
                enum: ["above", "beside"],
              },
              ignorePattern: {
                type: "string",
              },
              applyDefaultPatterns: {
                type: "boolean",
              },
              applyDefaultIgnorePatterns: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      above: "Expected comment to be above code.",
      beside: "Expected comment to be beside code.",
    },
  },
  "linebreak-style": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent linebreak style",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/linebreak-style",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["unix", "windows"],
      },
    ],
    messages: {
      expectedLF: "Expected linebreaks to be 'LF' but found 'CRLF'.",
      expectedCRLF: "Expected linebreaks to be 'CRLF' but found 'LF'.",
    },
  },
  "lines-around-comment": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Require empty lines around comments",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/lines-around-comment",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          beforeBlockComment: {
            type: "boolean",
            default: true,
          },
          afterBlockComment: {
            type: "boolean",
            default: false,
          },
          beforeLineComment: {
            type: "boolean",
            default: false,
          },
          afterLineComment: {
            type: "boolean",
            default: false,
          },
          allowBlockStart: {
            type: "boolean",
            default: false,
          },
          allowBlockEnd: {
            type: "boolean",
            default: false,
          },
          allowClassStart: {
            type: "boolean",
          },
          allowClassEnd: {
            type: "boolean",
          },
          allowObjectStart: {
            type: "boolean",
          },
          allowObjectEnd: {
            type: "boolean",
          },
          allowArrayStart: {
            type: "boolean",
          },
          allowArrayEnd: {
            type: "boolean",
          },
          ignorePattern: {
            type: "string",
          },
          applyDefaultIgnorePatterns: {
            type: "boolean",
          },
          afterHashbangComment: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      after: "Expected line after comment.",
      before: "Expected line before comment.",
    },
  },
  "lines-around-directive": {
    type: "layout",
    docs: {
      description: "Require or disallow newlines around directives",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/lines-around-directive",
    },
    schema: [
      {
        oneOf: [
          {
            enum: ["always", "never"],
          },
          {
            type: "object",
            properties: {
              before: {
                enum: ["always", "never"],
              },
              after: {
                enum: ["always", "never"],
              },
            },
            additionalProperties: false,
            minProperties: 2,
          },
        ],
      },
    ],
    fixable: "whitespace",
    messages: {
      expected: 'Expected newline {{location}} "{{value}}" directive.',
      unexpected: 'Unexpected newline {{location}} "{{value}}" directive.',
    },
    deprecated: true,
    replacedBy: ["padding-line-between-statements"],
  },
  "lines-between-class-members": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Require or disallow an empty line between class members",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/lines-between-class-members",
    },
    fixable: "whitespace",
    schema: [
      {
        anyOf: [
          {
            type: "object",
            properties: {
              enforce: {
                type: "array",
                items: {
                  type: "object",
                  properties: {
                    blankLine: {
                      enum: ["always", "never"],
                    },
                    prev: {
                      enum: ["method", "field", "*"],
                    },
                    next: {
                      enum: ["method", "field", "*"],
                    },
                  },
                  additionalProperties: false,
                  required: ["blankLine", "prev", "next"],
                },
                minItems: 1,
              },
            },
            additionalProperties: false,
            required: ["enforce"],
          },
          {
            enum: ["always", "never"],
          },
        ],
      },
      {
        type: "object",
        properties: {
          exceptAfterSingleLine: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      never: "Unexpected blank line between class members.",
      always: "Expected blank line between class members.",
    },
  },
  "logical-assignment-operators": {
    type: "suggestion",
    docs: {
      description: "Require or disallow logical assignment operator shorthand",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/logical-assignment-operators",
    },
    schema: {
      type: "array",
      oneOf: [
        {
          items: [
            {
              const: "always",
            },
            {
              type: "object",
              properties: {
                enforceForIfStatements: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
        {
          items: [
            {
              const: "never",
            },
          ],
          minItems: 1,
          maxItems: 1,
        },
      ],
    },
    fixable: "code",
    hasSuggestions: true,
    messages: {
      assignment:
        "Assignment (=) can be replaced with operator assignment ({{operator}}).",
      useLogicalOperator:
        "Convert this assignment to use the operator {{ operator }}.",
      logical:
        "Logical expression can be replaced with an assignment ({{ operator }}).",
      convertLogical:
        "Replace this logical expression with an assignment with the operator {{ operator }}.",
      if: "'if' statement can be replaced with a logical operator assignment with operator {{ operator }}.",
      convertIf:
        "Replace this 'if' statement with a logical assignment with operator {{ operator }}.",
      unexpected:
        "Unexpected logical operator assignment ({{operator}}) shorthand.",
      separate:
        "Separate the logical assignment into an assignment with a logical operator.",
    },
  },
  "max-classes-per-file": {
    type: "suggestion",
    docs: {
      description: "Enforce a maximum number of classes per file",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/max-classes-per-file",
    },
    schema: [
      {
        oneOf: [
          {
            type: "integer",
            minimum: 1,
          },
          {
            type: "object",
            properties: {
              ignoreExpressions: {
                type: "boolean",
              },
              max: {
                type: "integer",
                minimum: 1,
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      maximumExceeded:
        "File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}.",
    },
  },
  "max-depth": {
    type: "suggestion",
    docs: {
      description: "Enforce a maximum depth that blocks can be nested",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/max-depth",
    },
    schema: [
      {
        oneOf: [
          {
            type: "integer",
            minimum: 0,
          },
          {
            type: "object",
            properties: {
              maximum: {
                type: "integer",
                minimum: 0,
              },
              max: {
                type: "integer",
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      tooDeeply:
        "Blocks are nested too deeply ({{depth}}). Maximum allowed is {{maxDepth}}.",
    },
  },
  "max-len": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce a maximum line length",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/max-len",
    },
    schema: [
      {
        anyOf: [
          {
            type: "object",
            properties: {
              code: {
                type: "integer",
                minimum: 0,
              },
              comments: {
                type: "integer",
                minimum: 0,
              },
              tabWidth: {
                type: "integer",
                minimum: 0,
              },
              ignorePattern: {
                type: "string",
              },
              ignoreComments: {
                type: "boolean",
              },
              ignoreStrings: {
                type: "boolean",
              },
              ignoreUrls: {
                type: "boolean",
              },
              ignoreTemplateLiterals: {
                type: "boolean",
              },
              ignoreRegExpLiterals: {
                type: "boolean",
              },
              ignoreTrailingComments: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          {
            type: "integer",
            minimum: 0,
          },
        ],
      },
      {
        anyOf: [
          {
            type: "object",
            properties: {
              code: {
                type: "integer",
                minimum: 0,
              },
              comments: {
                type: "integer",
                minimum: 0,
              },
              tabWidth: {
                type: "integer",
                minimum: 0,
              },
              ignorePattern: {
                type: "string",
              },
              ignoreComments: {
                type: "boolean",
              },
              ignoreStrings: {
                type: "boolean",
              },
              ignoreUrls: {
                type: "boolean",
              },
              ignoreTemplateLiterals: {
                type: "boolean",
              },
              ignoreRegExpLiterals: {
                type: "boolean",
              },
              ignoreTrailingComments: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          {
            type: "integer",
            minimum: 0,
          },
        ],
      },
      {
        type: "object",
        properties: {
          code: {
            type: "integer",
            minimum: 0,
          },
          comments: {
            type: "integer",
            minimum: 0,
          },
          tabWidth: {
            type: "integer",
            minimum: 0,
          },
          ignorePattern: {
            type: "string",
          },
          ignoreComments: {
            type: "boolean",
          },
          ignoreStrings: {
            type: "boolean",
          },
          ignoreUrls: {
            type: "boolean",
          },
          ignoreTemplateLiterals: {
            type: "boolean",
          },
          ignoreRegExpLiterals: {
            type: "boolean",
          },
          ignoreTrailingComments: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      max: "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
      maxComment:
        "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}.",
    },
  },
  "max-lines": {
    type: "suggestion",
    docs: {
      description: "Enforce a maximum number of lines per file",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/max-lines",
    },
    schema: [
      {
        oneOf: [
          {
            type: "integer",
            minimum: 0,
          },
          {
            type: "object",
            properties: {
              max: {
                type: "integer",
                minimum: 0,
              },
              skipComments: {
                type: "boolean",
              },
              skipBlankLines: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      exceed:
        "File has too many lines ({{actual}}). Maximum allowed is {{max}}.",
    },
  },
  "max-lines-per-function": {
    type: "suggestion",
    docs: {
      description: "Enforce a maximum number of lines of code in a function",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/max-lines-per-function",
    },
    schema: [
      {
        oneOf: [
          {
            type: "object",
            properties: {
              max: {
                type: "integer",
                minimum: 0,
              },
              skipComments: {
                type: "boolean",
              },
              skipBlankLines: {
                type: "boolean",
              },
              IIFEs: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          {
            type: "integer",
            minimum: 1,
          },
        ],
      },
    ],
    messages: {
      exceed:
        "{{name}} has too many lines ({{lineCount}}). Maximum allowed is {{maxLines}}.",
    },
  },
  "max-nested-callbacks": {
    type: "suggestion",
    docs: {
      description: "Enforce a maximum depth that callbacks can be nested",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/max-nested-callbacks",
    },
    schema: [
      {
        oneOf: [
          {
            type: "integer",
            minimum: 0,
          },
          {
            type: "object",
            properties: {
              maximum: {
                type: "integer",
                minimum: 0,
              },
              max: {
                type: "integer",
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      exceed:
        "Too many nested callbacks ({{num}}). Maximum allowed is {{max}}.",
    },
  },
  "max-params": {
    type: "suggestion",
    docs: {
      description:
        "Enforce a maximum number of parameters in function definitions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/max-params",
    },
    schema: [
      {
        oneOf: [
          {
            type: "integer",
            minimum: 0,
          },
          {
            type: "object",
            properties: {
              maximum: {
                type: "integer",
                minimum: 0,
              },
              max: {
                type: "integer",
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      exceed:
        "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.",
    },
  },
  "max-statements": {
    type: "suggestion",
    docs: {
      description:
        "Enforce a maximum number of statements allowed in function blocks",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/max-statements",
    },
    schema: [
      {
        oneOf: [
          {
            type: "integer",
            minimum: 0,
          },
          {
            type: "object",
            properties: {
              maximum: {
                type: "integer",
                minimum: 0,
              },
              max: {
                type: "integer",
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
        ],
      },
      {
        type: "object",
        properties: {
          ignoreTopLevelFunctions: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      exceed:
        "{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}.",
    },
  },
  "max-statements-per-line": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce a maximum number of statements allowed per line",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/max-statements-per-line",
    },
    schema: [
      {
        type: "object",
        properties: {
          max: {
            type: "integer",
            minimum: 1,
            default: 1,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      exceed:
        "This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}.",
    },
  },
  "multiline-comment-style": {
    type: "suggestion",
    docs: {
      description: "Enforce a particular style for multiline comments",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/multiline-comment-style",
    },
    fixable: "whitespace",
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["starred-block", "bare-block"],
            },
          ],
          additionalItems: false,
        },
        {
          type: "array",
          items: [
            {
              enum: ["separate-lines"],
            },
            {
              type: "object",
              properties: {
                checkJSDoc: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          additionalItems: false,
        },
      ],
    },
    messages: {
      expectedBlock:
        "Expected a block comment instead of consecutive line comments.",
      expectedBareBlock: "Expected a block comment without padding stars.",
      startNewline: "Expected a linebreak after '/*'.",
      endNewline: "Expected a linebreak before '*/'.",
      missingStar: "Expected a '*' at the start of this line.",
      alignment:
        "Expected this line to be aligned with the start of the comment.",
      expectedLines:
        "Expected multiple line comments instead of a block comment.",
    },
  },
  "multiline-ternary": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce newlines between operands of ternary expressions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/multiline-ternary",
    },
    schema: [
      {
        enum: ["always", "always-multiline", "never"],
      },
    ],
    messages: {
      expectedTestCons:
        "Expected newline between test and consequent of ternary expression.",
      expectedConsAlt:
        "Expected newline between consequent and alternate of ternary expression.",
      unexpectedTestCons:
        "Unexpected newline between test and consequent of ternary expression.",
      unexpectedConsAlt:
        "Unexpected newline between consequent and alternate of ternary expression.",
    },
    fixable: "whitespace",
  },
  "new-cap": {
    type: "suggestion",
    docs: {
      description: "Require constructor names to begin with a capital letter",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/new-cap",
    },
    schema: [
      {
        type: "object",
        properties: {
          newIsCap: {
            type: "boolean",
            default: true,
          },
          capIsNew: {
            type: "boolean",
            default: true,
          },
          newIsCapExceptions: {
            type: "array",
            items: {
              type: "string",
            },
          },
          newIsCapExceptionPattern: {
            type: "string",
          },
          capIsNewExceptions: {
            type: "array",
            items: {
              type: "string",
            },
          },
          capIsNewExceptionPattern: {
            type: "string",
          },
          properties: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      upper:
        "A function with a name starting with an uppercase letter should only be used as a constructor.",
      lower: "A constructor name should not start with a lowercase letter.",
    },
  },
  "new-parens": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Enforce or disallow parentheses when invoking a constructor with no arguments",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/new-parens",
    },
    fixable: "code",
    schema: [
      {
        enum: ["always", "never"],
      },
    ],
    messages: {
      missing: "Missing '()' invoking a constructor.",
      unnecessary: "Unnecessary '()' invoking a constructor with no arguments.",
    },
  },
  "newline-after-var": {
    type: "layout",
    docs: {
      description:
        "Require or disallow an empty line after variable declarations",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/newline-after-var",
    },
    schema: [
      {
        enum: ["never", "always"],
      },
    ],
    fixable: "whitespace",
    messages: {
      expected: "Expected blank line after variable declarations.",
      unexpected: "Unexpected blank line after variable declarations.",
    },
    deprecated: true,
    replacedBy: ["padding-line-between-statements"],
  },
  "newline-before-return": {
    type: "layout",
    docs: {
      description: "Require an empty line before `return` statements",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/newline-before-return",
    },
    fixable: "whitespace",
    schema: [],
    messages: {
      expected: "Expected newline before return statement.",
    },
    deprecated: true,
    replacedBy: ["padding-line-between-statements"],
  },
  "newline-per-chained-call": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Require a newline after each call in a method chain",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/newline-per-chained-call",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          ignoreChainWithDepth: {
            type: "integer",
            minimum: 1,
            maximum: 10,
            default: 2,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      expected: "Expected line break before `{{callee}}`.",
    },
  },
  "no-alert": {
    type: "suggestion",
    docs: {
      description: "Disallow the use of `alert`, `confirm`, and `prompt`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-alert",
    },
    schema: [],
    messages: {
      unexpected: "Unexpected {{name}}.",
    },
  },
  "no-array-constructor": {
    type: "suggestion",
    docs: {
      description: "Disallow `Array` constructors",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-array-constructor",
    },
    hasSuggestions: true,
    schema: [],
    messages: {
      preferLiteral: "The array literal notation [] is preferable.",
      useLiteral: "Replace with an array literal.",
      useLiteralAfterSemicolon:
        "Replace with an array literal, add preceding semicolon.",
    },
  },
  "no-async-promise-executor": {
    type: "problem",
    docs: {
      description: "Disallow using an async function as a Promise executor",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-async-promise-executor",
    },
    fixable: null,
    schema: [],
    messages: {
      async: "Promise executor functions should not be async.",
    },
  },
  "no-await-in-loop": {
    type: "problem",
    docs: {
      description: "Disallow `await` inside of loops",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-await-in-loop",
    },
    schema: [],
    messages: {
      unexpectedAwait: "Unexpected `await` inside a loop.",
    },
  },
  "no-bitwise": {
    type: "suggestion",
    docs: {
      description: "Disallow bitwise operators",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-bitwise",
    },
    schema: [
      {
        type: "object",
        properties: {
          allow: {
            type: "array",
            items: {
              enum: [
                "^",
                "|",
                "&",
                "<<",
                ">>",
                ">>>",
                "^=",
                "|=",
                "&=",
                "<<=",
                ">>=",
                ">>>=",
                "~",
              ],
            },
            uniqueItems: true,
          },
          int32Hint: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpected: "Unexpected use of '{{operator}}'.",
    },
  },
  "no-buffer-constructor": {
    deprecated: true,
    replacedBy: [],
    type: "problem",
    docs: {
      description: "Disallow use of the `Buffer()` constructor",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-buffer-constructor",
    },
    schema: [],
    messages: {
      deprecated:
        "{{expr}} is deprecated. Use Buffer.from(), Buffer.alloc(), or Buffer.allocUnsafe() instead.",
    },
  },
  "no-caller": {
    type: "suggestion",
    docs: {
      description:
        "Disallow the use of `arguments.caller` or `arguments.callee`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-caller",
    },
    schema: [],
    messages: {
      unexpected: "Avoid arguments.{{prop}}.",
    },
  },
  "no-case-declarations": {
    type: "suggestion",
    docs: {
      description: "Disallow lexical declarations in case clauses",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-case-declarations",
    },
    schema: [],
    messages: {
      unexpected: "Unexpected lexical declaration in case block.",
    },
  },
  "no-catch-shadow": {
    type: "suggestion",
    docs: {
      description:
        "Disallow `catch` clause parameters from shadowing variables in the outer scope",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-catch-shadow",
    },
    replacedBy: ["no-shadow"],
    deprecated: true,
    schema: [],
    messages: {
      mutable: "Value of '{{name}}' may be overwritten in IE 8 and earlier.",
    },
  },
  "no-class-assign": {
    type: "problem",
    docs: {
      description: "Disallow reassigning class members",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-class-assign",
    },
    schema: [],
    messages: {
      class: "'{{name}}' is a class.",
    },
  },
  "no-compare-neg-zero": {
    type: "problem",
    docs: {
      description: "Disallow comparing against -0",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-compare-neg-zero",
    },
    fixable: null,
    schema: [],
    messages: {
      unexpected:
        "Do not use the '{{operator}}' operator to compare against -0.",
    },
  },
  "no-cond-assign": {
    type: "problem",
    docs: {
      description: "Disallow assignment operators in conditional expressions",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-cond-assign",
    },
    schema: [
      {
        enum: ["except-parens", "always"],
      },
    ],
    messages: {
      unexpected: "Unexpected assignment within {{type}}.",
      missing:
        "Expected a conditional expression and instead saw an assignment.",
    },
  },
  "no-confusing-arrow": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description:
        "Disallow arrow functions where they could be confused with comparisons",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-confusing-arrow",
    },
    fixable: "code",
    schema: [
      {
        type: "object",
        properties: {
          allowParens: {
            type: "boolean",
            default: true,
          },
          onlyOneSimpleParam: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      confusing:
        "Arrow function used ambiguously with a conditional expression.",
    },
  },
  "no-console": {
    type: "suggestion",
    docs: {
      description: "Disallow the use of `console`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-console",
    },
    schema: [
      {
        type: "object",
        properties: {
          allow: {
            type: "array",
            items: {
              type: "string",
            },
            minItems: 1,
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
    hasSuggestions: true,
    messages: {
      unexpected: "Unexpected console statement.",
      removeConsole: "Remove the console.{{ propertyName }}().",
    },
  },
  "no-const-assign": {
    type: "problem",
    docs: {
      description: "Disallow reassigning `const` variables",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-const-assign",
    },
    schema: [],
    messages: {
      const: "'{{name}}' is constant.",
    },
  },
  "no-constant-binary-expression": {
    type: "problem",
    docs: {
      description:
        "Disallow expressions where the operation doesn't affect the value",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-constant-binary-expression",
    },
    schema: [],
    messages: {
      constantBinaryOperand:
        "Unexpected constant binary expression. Compares constantly with the {{otherSide}}-hand side of the `{{operator}}`.",
      constantShortCircuit:
        "Unexpected constant {{property}} on the left-hand side of a `{{operator}}` expression.",
      alwaysNew:
        "Unexpected comparison to newly constructed object. These two values can never be equal.",
      bothAlwaysNew:
        "Unexpected comparison of two newly constructed objects. These two values can never be equal.",
    },
  },
  "no-constant-condition": {
    type: "problem",
    docs: {
      description: "Disallow constant expressions in conditions",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-constant-condition",
    },
    schema: [
      {
        type: "object",
        properties: {
          checkLoops: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpected: "Unexpected constant condition.",
    },
  },
  "no-constructor-return": {
    type: "problem",
    docs: {
      description: "Disallow returning value from constructor",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-constructor-return",
    },
    schema: {},
    fixable: null,
    messages: {
      unexpected: "Unexpected return statement in constructor.",
    },
  },
  "no-continue": {
    type: "suggestion",
    docs: {
      description: "Disallow `continue` statements",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-continue",
    },
    schema: [],
    messages: {
      unexpected: "Unexpected use of continue statement.",
    },
  },
  "no-control-regex": {
    type: "problem",
    docs: {
      description: "Disallow control characters in regular expressions",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-control-regex",
    },
    schema: [],
    messages: {
      unexpected:
        "Unexpected control character(s) in regular expression: {{controlChars}}.",
    },
  },
  "no-debugger": {
    type: "problem",
    docs: {
      description: "Disallow the use of `debugger`",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-debugger",
    },
    fixable: null,
    schema: [],
    messages: {
      unexpected: "Unexpected 'debugger' statement.",
    },
  },
  "no-delete-var": {
    type: "suggestion",
    docs: {
      description: "Disallow deleting variables",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-delete-var",
    },
    schema: [],
    messages: {
      unexpected: "Variables should not be deleted.",
    },
  },
  "no-div-regex": {
    type: "suggestion",
    docs: {
      description:
        "Disallow equal signs explicitly at the beginning of regular expressions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-div-regex",
    },
    fixable: "code",
    schema: [],
    messages: {
      unexpected: "A regular expression literal can be confused with '/='.",
    },
  },
  "no-dupe-args": {
    type: "problem",
    docs: {
      description: "Disallow duplicate arguments in `function` definitions",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-dupe-args",
    },
    schema: [],
    messages: {
      unexpected: "Duplicate param '{{name}}'.",
    },
  },
  "no-dupe-class-members": {
    type: "problem",
    docs: {
      description: "Disallow duplicate class members",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-dupe-class-members",
    },
    schema: [],
    messages: {
      unexpected: "Duplicate name '{{name}}'.",
    },
  },
  "no-dupe-else-if": {
    type: "problem",
    docs: {
      description: "Disallow duplicate conditions in if-else-if chains",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-dupe-else-if",
    },
    schema: [],
    messages: {
      unexpected:
        "This branch can never execute. Its condition is a duplicate or covered by previous conditions in the if-else-if chain.",
    },
  },
  "no-dupe-keys": {
    type: "problem",
    docs: {
      description: "Disallow duplicate keys in object literals",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-dupe-keys",
    },
    schema: [],
    messages: {
      unexpected: "Duplicate key '{{name}}'.",
    },
  },
  "no-duplicate-case": {
    type: "problem",
    docs: {
      description: "Disallow duplicate case labels",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-duplicate-case",
    },
    schema: [],
    messages: {
      unexpected: "Duplicate case label.",
    },
  },
  "no-duplicate-imports": {
    type: "problem",
    docs: {
      description: "Disallow duplicate module imports",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-duplicate-imports",
    },
    schema: [
      {
        type: "object",
        properties: {
          includeExports: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      import: "'{{module}}' import is duplicated.",
      importAs: "'{{module}}' import is duplicated as export.",
      export: "'{{module}}' export is duplicated.",
      exportAs: "'{{module}}' export is duplicated as import.",
    },
  },
  "no-else-return": {
    type: "suggestion",
    docs: {
      description:
        "Disallow `else` blocks after `return` statements in `if` statements",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-else-return",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowElseIf: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      unexpected: "Unnecessary 'else' after 'return'.",
    },
  },
  "no-empty": {
    hasSuggestions: true,
    type: "suggestion",
    docs: {
      description: "Disallow empty block statements",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-empty",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowEmptyCatch: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpected: "Empty {{type}} statement.",
      suggestComment: "Add comment inside empty {{type}} statement.",
    },
  },
  "no-empty-character-class": {
    type: "problem",
    docs: {
      description: "Disallow empty character classes in regular expressions",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-empty-character-class",
    },
    schema: [],
    messages: {
      unexpected: "Empty class.",
    },
  },
  "no-empty-function": {
    type: "suggestion",
    docs: {
      description: "Disallow empty functions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-empty-function",
    },
    schema: [
      {
        type: "object",
        properties: {
          allow: {
            type: "array",
            items: {
              enum: [
                "functions",
                "arrowFunctions",
                "generatorFunctions",
                "methods",
                "generatorMethods",
                "getters",
                "setters",
                "constructors",
                "asyncFunctions",
                "asyncMethods",
              ],
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpected: "Unexpected empty {{name}}.",
    },
  },
  "no-empty-pattern": {
    type: "problem",
    docs: {
      description: "Disallow empty destructuring patterns",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-empty-pattern",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowObjectPatternsAsParameters: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpected: "Unexpected empty {{type}} pattern.",
    },
  },
  "no-empty-static-block": {
    type: "suggestion",
    docs: {
      description: "Disallow empty static blocks",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-empty-static-block",
    },
    schema: [],
    messages: {
      unexpected: "Unexpected empty static block.",
    },
  },
  "no-eq-null": {
    type: "suggestion",
    docs: {
      description:
        "Disallow `null` comparisons without type-checking operators",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-eq-null",
    },
    schema: [],
    messages: {
      unexpected: "Use '===' to compare with null.",
    },
  },
  "no-eval": {
    type: "suggestion",
    docs: {
      description: "Disallow the use of `eval()`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-eval",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowIndirect: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpected: "eval can be harmful.",
    },
  },
  "no-ex-assign": {
    type: "problem",
    docs: {
      description: "Disallow reassigning exceptions in `catch` clauses",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-ex-assign",
    },
    schema: [],
    messages: {
      unexpected: "Do not assign to the exception parameter.",
    },
  },
  "no-extend-native": {
    type: "suggestion",
    docs: {
      description: "Disallow extending native types",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-extend-native",
    },
    schema: [
      {
        type: "object",
        properties: {
          exceptions: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpected:
        "{{builtin}} prototype is read only, properties should not be added.",
    },
  },
  "no-extra-bind": {
    type: "suggestion",
    docs: {
      description: "Disallow unnecessary calls to `.bind()`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-extra-bind",
    },
    schema: [],
    fixable: "code",
    messages: {
      unexpected: "The function binding is unnecessary.",
    },
  },
  "no-extra-boolean-cast": {
    type: "suggestion",
    docs: {
      description: "Disallow unnecessary boolean casts",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-extra-boolean-cast",
    },
    schema: [
      {
        type: "object",
        properties: {
          enforceForLogicalOperands: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      unexpectedCall: "Redundant Boolean call.",
      unexpectedNegation: "Redundant double negation.",
    },
  },
  "no-extra-label": {
    type: "suggestion",
    docs: {
      description: "Disallow unnecessary labels",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-extra-label",
    },
    schema: [],
    fixable: "code",
    messages: {
      unexpected: "This label '{{name}}' is unnecessary.",
    },
  },
  "no-extra-parens": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Disallow unnecessary parentheses",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-extra-parens",
    },
    fixable: "code",
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["functions"],
            },
          ],
          minItems: 0,
          maxItems: 1,
        },
        {
          type: "array",
          items: [
            {
              enum: ["all"],
            },
            {
              type: "object",
              properties: {
                conditionalAssign: {
                  type: "boolean",
                },
                ternaryOperandBinaryExpressions: {
                  type: "boolean",
                },
                nestedBinaryExpressions: {
                  type: "boolean",
                },
                returnAssign: {
                  type: "boolean",
                },
                ignoreJSX: {
                  enum: ["none", "all", "single-line", "multi-line"],
                },
                enforceForArrowConditionals: {
                  type: "boolean",
                },
                enforceForSequenceExpressions: {
                  type: "boolean",
                },
                enforceForNewInMemberExpressions: {
                  type: "boolean",
                },
                enforceForFunctionPrototypeMethods: {
                  type: "boolean",
                },
                allowParensAfterCommentPattern: {
                  type: "string",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
      ],
    },
    messages: {
      unexpected: "Unnecessary parentheses around expression.",
    },
  },
  "no-extra-semi": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "Disallow unnecessary semicolons",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-extra-semi",
    },
    fixable: "code",
    schema: [],
    messages: {
      unexpected: "Unnecessary semicolon.",
    },
  },
  "no-fallthrough": {
    type: "problem",
    docs: {
      description: "Disallow fallthrough of `case` statements",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-fallthrough",
    },
    schema: [
      {
        type: "object",
        properties: {
          commentPattern: {
            type: "string",
            default: "",
          },
          allowEmptyCase: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      case: "Expected a 'break' statement before 'case'.",
      default: "Expected a 'break' statement before 'default'.",
    },
  },
  "no-floating-decimal": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description:
        "Disallow leading or trailing decimal points in numeric literals",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-floating-decimal",
    },
    schema: [],
    fixable: "code",
    messages: {
      leading: "A leading decimal point can be confused with a dot.",
      trailing: "A trailing decimal point can be confused with a dot.",
    },
  },
  "no-func-assign": {
    type: "problem",
    docs: {
      description: "Disallow reassigning `function` declarations",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-func-assign",
    },
    schema: [],
    messages: {
      isAFunction: "'{{name}}' is a function.",
    },
  },
  "no-global-assign": {
    type: "suggestion",
    docs: {
      description:
        "Disallow assignments to native objects or read-only global variables",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-global-assign",
    },
    schema: [
      {
        type: "object",
        properties: {
          exceptions: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      globalShouldNotBeModified:
        "Read-only global '{{name}}' should not be modified.",
    },
  },
  "no-implicit-coercion": {
    type: "suggestion",
    docs: {
      description: "Disallow shorthand type conversions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-implicit-coercion",
    },
    fixable: "code",
    schema: [
      {
        type: "object",
        properties: {
          boolean: {
            type: "boolean",
            default: true,
          },
          number: {
            type: "boolean",
            default: true,
          },
          string: {
            type: "boolean",
            default: true,
          },
          disallowTemplateShorthand: {
            type: "boolean",
            default: false,
          },
          allow: {
            type: "array",
            items: {
              enum: ["~", "!!", "+", "*"],
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      useRecommendation: "use `{{recommendation}}` instead.",
    },
  },
  "no-implicit-globals": {
    type: "suggestion",
    docs: {
      description: "Disallow declarations in the global scope",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-implicit-globals",
    },
    schema: [
      {
        type: "object",
        properties: {
          lexicalBindings: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      globalNonLexicalBinding:
        "Unexpected {{kind}} declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.",
      globalLexicalBinding:
        "Unexpected {{kind}} declaration in the global scope, wrap in a block or in an IIFE.",
      globalVariableLeak:
        "Global variable leak, declare the variable if it is intended to be local.",
      assignmentToReadonlyGlobal:
        "Unexpected assignment to read-only global variable.",
      redeclarationOfReadonlyGlobal:
        "Unexpected redeclaration of read-only global variable.",
    },
  },
  "no-implied-eval": {
    type: "suggestion",
    docs: {
      description: "Disallow the use of `eval()`-like methods",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-implied-eval",
    },
    schema: [],
    messages: {
      impliedEval:
        "Implied eval. Consider passing a function instead of a string.",
    },
  },
  "no-import-assign": {
    type: "problem",
    docs: {
      description: "Disallow assigning to imported bindings",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-import-assign",
    },
    schema: [],
    messages: {
      readonly: "'{{name}}' is read-only.",
      readonlyMember: "The members of '{{name}}' are read-only.",
    },
  },
  "no-inline-comments": {
    type: "suggestion",
    docs: {
      description: "Disallow inline comments after code",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-inline-comments",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignorePattern: {
            type: "string",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedInlineComment: "Unexpected comment inline with code.",
    },
  },
  "no-inner-declarations": {
    type: "problem",
    docs: {
      description:
        "Disallow variable or `function` declarations in nested blocks",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-inner-declarations",
    },
    schema: [
      {
        enum: ["functions", "both"],
      },
    ],
    messages: {
      moveDeclToRoot: "Move {{type}} declaration to {{body}} root.",
    },
  },
  "no-invalid-regexp": {
    type: "problem",
    docs: {
      description:
        "Disallow invalid regular expression strings in `RegExp` constructors",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-invalid-regexp",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowConstructorFlags: {
            type: "array",
            items: {
              type: "string",
            },
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      regexMessage: "{{message}}.",
    },
  },
  "no-invalid-this": {
    type: "suggestion",
    docs: {
      description:
        "Disallow use of `this` in contexts where the value of `this` is `undefined`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-invalid-this",
    },
    schema: [
      {
        type: "object",
        properties: {
          capIsConstructor: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedThis: "Unexpected 'this'.",
    },
  },
  "no-irregular-whitespace": {
    type: "problem",
    docs: {
      description: "Disallow irregular whitespace",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-irregular-whitespace",
    },
    schema: [
      {
        type: "object",
        properties: {
          skipComments: {
            type: "boolean",
            default: false,
          },
          skipStrings: {
            type: "boolean",
            default: true,
          },
          skipTemplates: {
            type: "boolean",
            default: false,
          },
          skipRegExps: {
            type: "boolean",
            default: false,
          },
          skipJSXText: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      noIrregularWhitespace: "Irregular whitespace not allowed.",
    },
  },
  "no-iterator": {
    type: "suggestion",
    docs: {
      description: "Disallow the use of the `__iterator__` property",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-iterator",
    },
    schema: [],
    messages: {
      noIterator: "Reserved name '__iterator__'.",
    },
  },
  "no-label-var": {
    type: "suggestion",
    docs: {
      description: "Disallow labels that share a name with a variable",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-label-var",
    },
    schema: [],
    messages: {
      identifierClashWithLabel: "Found identifier with same name as label.",
    },
  },
  "no-labels": {
    type: "suggestion",
    docs: {
      description: "Disallow labeled statements",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-labels",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowLoop: {
            type: "boolean",
            default: false,
          },
          allowSwitch: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedLabel: "Unexpected labeled statement.",
      unexpectedLabelInBreak: "Unexpected label in break statement.",
      unexpectedLabelInContinue: "Unexpected label in continue statement.",
    },
  },
  "no-lone-blocks": {
    type: "suggestion",
    docs: {
      description: "Disallow unnecessary nested blocks",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-lone-blocks",
    },
    schema: [],
    messages: {
      redundantBlock: "Block is redundant.",
      redundantNestedBlock: "Nested block is redundant.",
    },
  },
  "no-lonely-if": {
    type: "suggestion",
    docs: {
      description:
        "Disallow `if` statements as the only statement in `else` blocks",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-lonely-if",
    },
    schema: [],
    fixable: "code",
    messages: {
      unexpectedLonelyIf:
        "Unexpected if as the only statement in an else block.",
    },
  },
  "no-loop-func": {
    type: "suggestion",
    docs: {
      description:
        "Disallow function declarations that contain unsafe references inside loop statements",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-loop-func",
    },
    schema: [],
    messages: {
      unsafeRefs:
        "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}.",
    },
  },
  "no-loss-of-precision": {
    type: "problem",
    docs: {
      description: "Disallow literal numbers that lose precision",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-loss-of-precision",
    },
    schema: [],
    messages: {
      noLossOfPrecision: "This number literal will lose precision at runtime.",
    },
  },
  "no-magic-numbers": {
    type: "suggestion",
    docs: {
      description: "Disallow magic numbers",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-magic-numbers",
    },
    schema: [
      {
        type: "object",
        properties: {
          detectObjects: {
            type: "boolean",
            default: false,
          },
          enforceConst: {
            type: "boolean",
            default: false,
          },
          ignore: {
            type: "array",
            items: {
              anyOf: [
                {
                  type: "number",
                },
                {
                  type: "string",
                  pattern: "^[+-]?(?:0|[1-9][0-9]*)n$",
                },
              ],
            },
            uniqueItems: true,
          },
          ignoreArrayIndexes: {
            type: "boolean",
            default: false,
          },
          ignoreDefaultValues: {
            type: "boolean",
            default: false,
          },
          ignoreClassFieldInitialValues: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      useConst: "Number constants declarations must use 'const'.",
      noMagic: "No magic number: {{raw}}.",
    },
  },
  "no-misleading-character-class": {
    type: "problem",
    docs: {
      description:
        "Disallow characters which are made with multiple code points in character class syntax",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-misleading-character-class",
    },
    hasSuggestions: true,
    schema: [],
    messages: {
      surrogatePairWithoutUFlag:
        "Unexpected surrogate pair in character class. Use 'u' flag.",
      surrogatePair: "Unexpected surrogate pair in character class.",
      combiningClass: "Unexpected combined character in character class.",
      emojiModifier: "Unexpected modified Emoji in character class.",
      regionalIndicatorSymbol: "Unexpected national flag in character class.",
      zwj: "Unexpected joined character sequence in character class.",
      suggestUnicodeFlag: "Add unicode 'u' flag to regex.",
    },
  },
  "no-mixed-operators": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "Disallow mixed binary operators",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-mixed-operators",
    },
    schema: [
      {
        type: "object",
        properties: {
          groups: {
            type: "array",
            items: {
              type: "array",
              items: {
                enum: [
                  "+",
                  "-",
                  "*",
                  "/",
                  "%",
                  "**",
                  "&",
                  "|",
                  "^",
                  "~",
                  "<<",
                  ">>",
                  ">>>",
                  "==",
                  "!=",
                  "===",
                  "!==",
                  ">",
                  ">=",
                  "<",
                  "<=",
                  "&&",
                  "||",
                  "in",
                  "instanceof",
                  "?:",
                  "??",
                ],
              },
              minItems: 2,
              uniqueItems: true,
            },
            uniqueItems: true,
          },
          allowSamePrecedence: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedMixedOperator:
        "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'. Use parentheses to clarify the intended order of operations.",
    },
  },
  "no-mixed-requires": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description:
        "Disallow `require` calls to be mixed with regular variable declarations",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-mixed-requires",
    },
    schema: [
      {
        oneOf: [
          {
            type: "boolean",
          },
          {
            type: "object",
            properties: {
              grouping: {
                type: "boolean",
              },
              allowCall: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      noMixRequire: "Do not mix 'require' and other declarations.",
      noMixCoreModuleFileComputed:
        "Do not mix core, module, file and computed requires.",
    },
  },
  "no-mixed-spaces-and-tabs": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Disallow mixed spaces and tabs for indentation",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-mixed-spaces-and-tabs",
    },
    schema: [
      {
        enum: ["smart-tabs", true, false],
      },
    ],
    messages: {
      mixedSpacesAndTabs: "Mixed spaces and tabs.",
    },
  },
  "no-multi-assign": {
    type: "suggestion",
    docs: {
      description: "Disallow use of chained assignment expressions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-multi-assign",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreNonDeclaration: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedChain: "Unexpected chained assignment.",
    },
  },
  "no-multi-spaces": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Disallow multiple spaces",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-multi-spaces",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          exceptions: {
            type: "object",
            patternProperties: {
              "^([A-Z][a-z]*)+$": {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          ignoreEOLComments: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      multipleSpaces: "Multiple spaces found before '{{displayValue}}'.",
    },
  },
  "no-multi-str": {
    type: "suggestion",
    docs: {
      description: "Disallow multiline strings",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-multi-str",
    },
    schema: [],
    messages: {
      multilineString:
        "Multiline support is limited to browsers supporting ES5 only.",
    },
  },
  "no-multiple-empty-lines": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Disallow multiple empty lines",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-multiple-empty-lines",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          max: {
            type: "integer",
            minimum: 0,
          },
          maxEOF: {
            type: "integer",
            minimum: 0,
          },
          maxBOF: {
            type: "integer",
            minimum: 0,
          },
        },
        required: ["max"],
        additionalProperties: false,
      },
    ],
    messages: {
      blankBeginningOfFile:
        "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
      blankEndOfFile:
        "Too many blank lines at the end of file. Max of {{max}} allowed.",
      consecutiveBlank:
        "More than {{max}} blank {{pluralizedLines}} not allowed.",
    },
  },
  "no-native-reassign": {
    type: "suggestion",
    docs: {
      description:
        "Disallow assignments to native objects or read-only global variables",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-native-reassign",
    },
    deprecated: true,
    replacedBy: ["no-global-assign"],
    schema: [
      {
        type: "object",
        properties: {
          exceptions: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      nativeReassign: "Read-only global '{{name}}' should not be modified.",
    },
  },
  "no-negated-condition": {
    type: "suggestion",
    docs: {
      description: "Disallow negated conditions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-negated-condition",
    },
    schema: [],
    messages: {
      unexpectedNegated: "Unexpected negated condition.",
    },
  },
  "no-negated-in-lhs": {
    type: "problem",
    docs: {
      description: "Disallow negating the left operand in `in` expressions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-negated-in-lhs",
    },
    replacedBy: ["no-unsafe-negation"],
    deprecated: true,
    schema: [],
    messages: {
      negatedLHS: "The 'in' expression's left operand is negated.",
    },
  },
  "no-nested-ternary": {
    type: "suggestion",
    docs: {
      description: "Disallow nested ternary expressions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-nested-ternary",
    },
    schema: [],
    messages: {
      noNestedTernary: "Do not nest ternary expressions.",
    },
  },
  "no-new": {
    type: "suggestion",
    docs: {
      description:
        "Disallow `new` operators outside of assignments or comparisons",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-new",
    },
    schema: [],
    messages: {
      noNewStatement: "Do not use 'new' for side effects.",
    },
  },
  "no-new-func": {
    type: "suggestion",
    docs: {
      description: "Disallow `new` operators with the `Function` object",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-new-func",
    },
    schema: [],
    messages: {
      noFunctionConstructor: "The Function constructor is eval.",
    },
  },
  "no-new-native-nonconstructor": {
    type: "problem",
    docs: {
      description:
        "Disallow `new` operators with global non-constructor functions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor",
    },
    schema: [],
    messages: {
      noNewNonconstructor: "`{{name}}` cannot be called as a constructor.",
    },
  },
  "no-new-object": {
    type: "suggestion",
    docs: {
      description: "Disallow `Object` constructors",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-new-object",
    },
    deprecated: true,
    replacedBy: ["no-object-constructor"],
    schema: [],
    messages: {
      preferLiteral: "The object literal notation {} is preferable.",
    },
  },
  "no-new-require": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "Disallow `new` operators with calls to `require`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-new-require",
    },
    schema: [],
    messages: {
      noNewRequire: "Unexpected use of new with require.",
    },
  },
  "no-new-symbol": {
    type: "problem",
    docs: {
      description: "Disallow `new` operators with the `Symbol` object",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-new-symbol",
    },
    schema: [],
    messages: {
      noNewSymbol: "`Symbol` cannot be called as a constructor.",
    },
  },
  "no-new-wrappers": {
    type: "suggestion",
    docs: {
      description:
        "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-new-wrappers",
    },
    schema: [],
    messages: {
      noConstructor: "Do not use {{fn}} as a constructor.",
    },
  },
  "no-nonoctal-decimal-escape": {
    type: "suggestion",
    docs: {
      description:
        "Disallow `\\8` and `\\9` escape sequences in string literals",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape",
    },
    hasSuggestions: true,
    schema: [],
    messages: {
      decimalEscape: "Don't use '{{decimalEscape}}' escape sequence.",
      refactor:
        "Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.",
      escapeBackslash:
        "Replace '{{original}}' with '{{replacement}}' to include the actual backslash character.",
    },
  },
  "no-obj-calls": {
    type: "problem",
    docs: {
      description: "Disallow calling global object properties as functions",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-obj-calls",
    },
    schema: [],
    messages: {
      unexpectedCall: "'{{name}}' is not a function.",
      unexpectedRefCall:
        "'{{name}}' is reference to '{{ref}}', which is not a function.",
    },
  },
  "no-object-constructor": {
    type: "suggestion",
    docs: {
      description:
        "Disallow calls to the `Object` constructor without an argument",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-object-constructor",
    },
    hasSuggestions: true,
    schema: [],
    messages: {
      preferLiteral: "The object literal notation {} is preferable.",
      useLiteral: "Replace with '{{replacement}}'.",
      useLiteralAfterSemicolon:
        "Replace with '{{replacement}}', add preceding semicolon.",
    },
  },
  "no-octal": {
    type: "suggestion",
    docs: {
      description: "Disallow octal literals",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-octal",
    },
    schema: [],
    messages: {
      noOctal: "Octal literals should not be used.",
    },
  },
  "no-octal-escape": {
    type: "suggestion",
    docs: {
      description: "Disallow octal escape sequences in string literals",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-octal-escape",
    },
    schema: [],
    messages: {
      octalEscapeSequence:
        "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
    },
  },
  "no-param-reassign": {
    type: "suggestion",
    docs: {
      description: "Disallow reassigning `function` parameters",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-param-reassign",
    },
    schema: [
      {
        oneOf: [
          {
            type: "object",
            properties: {
              props: {
                enum: [false],
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              props: {
                enum: [true],
              },
              ignorePropertyModificationsFor: {
                type: "array",
                items: {
                  type: "string",
                },
                uniqueItems: true,
              },
              ignorePropertyModificationsForRegex: {
                type: "array",
                items: {
                  type: "string",
                },
                uniqueItems: true,
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      assignmentToFunctionParam: "Assignment to function parameter '{{name}}'.",
      assignmentToFunctionParamProp:
        "Assignment to property of function parameter '{{name}}'.",
    },
  },
  "no-path-concat": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description:
        "Disallow string concatenation with `__dirname` and `__filename`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-path-concat",
    },
    schema: [],
    messages: {
      usePathFunctions:
        "Use path.join() or path.resolve() instead of + to create paths.",
    },
  },
  "no-plusplus": {
    type: "suggestion",
    docs: {
      description: "Disallow the unary operators `++` and `--`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-plusplus",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowForLoopAfterthoughts: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedUnaryOp: "Unary operator '{{operator}}' used.",
    },
  },
  "no-process-env": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "Disallow the use of `process.env`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-process-env",
    },
    schema: [],
    messages: {
      unexpectedProcessEnv: "Unexpected use of process.env.",
    },
  },
  "no-process-exit": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "Disallow the use of `process.exit()`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-process-exit",
    },
    schema: [],
    messages: {
      noProcessExit: "Don't use process.exit(); throw an error instead.",
    },
  },
  "no-promise-executor-return": {
    type: "problem",
    docs: {
      description: "Disallow returning values from Promise executor functions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-promise-executor-return",
    },
    hasSuggestions: true,
    schema: [
      {
        type: "object",
        properties: {
          allowVoid: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      returnsValue:
        "Return values from promise executor functions cannot be read.",
      prependVoid: "Prepend `void` to the expression.",
      wrapBraces: "Wrap the expression in `{}`.",
    },
  },
  "no-proto": {
    type: "suggestion",
    docs: {
      description: "Disallow the use of the `__proto__` property",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-proto",
    },
    schema: [],
    messages: {
      unexpectedProto: "The '__proto__' property is deprecated.",
    },
  },
  "no-prototype-builtins": {
    type: "problem",
    docs: {
      description:
        "Disallow calling some `Object.prototype` methods directly on objects",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-prototype-builtins",
    },
    hasSuggestions: true,
    schema: [],
    messages: {
      prototypeBuildIn:
        "Do not access Object.prototype method '{{prop}}' from target object.",
      callObjectPrototype: "Call Object.prototype.{{prop}} explicitly.",
    },
  },
  "no-redeclare": {
    type: "suggestion",
    docs: {
      description: "Disallow variable redeclaration",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-redeclare",
    },
    messages: {
      redeclared: "'{{id}}' is already defined.",
      redeclaredAsBuiltin:
        "'{{id}}' is already defined as a built-in global variable.",
      redeclaredBySyntax:
        "'{{id}}' is already defined by a variable declaration.",
    },
    schema: [
      {
        type: "object",
        properties: {
          builtinGlobals: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "no-regex-spaces": {
    type: "suggestion",
    docs: {
      description: "Disallow multiple spaces in regular expressions",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-regex-spaces",
    },
    schema: [],
    fixable: "code",
    messages: {
      multipleSpaces: "Spaces are hard to count. Use {{{length}}}.",
    },
  },
  "no-restricted-exports": {
    type: "suggestion",
    docs: {
      description: "Disallow specified names in exports",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-restricted-exports",
    },
    schema: [
      {
        anyOf: [
          {
            type: "object",
            properties: {
              restrictedNamedExports: {
                type: "array",
                items: {
                  type: "string",
                },
                uniqueItems: true,
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              restrictedNamedExports: {
                type: "array",
                items: {
                  type: "string",
                  pattern: "^(?!default$)",
                },
                uniqueItems: true,
              },
              restrictDefaultExports: {
                type: "object",
                properties: {
                  direct: {
                    type: "boolean",
                  },
                  named: {
                    type: "boolean",
                  },
                  defaultFrom: {
                    type: "boolean",
                  },
                  namedFrom: {
                    type: "boolean",
                  },
                  namespaceFrom: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      restrictedNamed:
        "'{{name}}' is restricted from being used as an exported name.",
      restrictedDefault: "Exporting 'default' is restricted.",
    },
  },
  "no-restricted-globals": {
    type: "suggestion",
    docs: {
      description: "Disallow specified global variables",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-restricted-globals",
    },
    schema: {
      type: "array",
      items: {
        oneOf: [
          {
            type: "string",
          },
          {
            type: "object",
            properties: {
              name: {
                type: "string",
              },
              message: {
                type: "string",
              },
            },
            required: ["name"],
            additionalProperties: false,
          },
        ],
      },
      uniqueItems: true,
      minItems: 0,
    },
    messages: {
      defaultMessage: "Unexpected use of '{{name}}'.",
      customMessage: "Unexpected use of '{{name}}'. {{customMessage}}",
    },
  },
  "no-restricted-imports": {
    type: "suggestion",
    docs: {
      description: "Disallow specified modules when loaded by `import`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-restricted-imports",
    },
    messages: {
      path: "'{{importSource}}' import is restricted from being used.",
      pathWithCustomMessage:
        "'{{importSource}}' import is restricted from being used. {{customMessage}}",
      patterns:
        "'{{importSource}}' import is restricted from being used by a pattern.",
      patternWithCustomMessage:
        "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
      patternAndImportName:
        "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
      patternAndImportNameWithCustomMessage:
        "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
      patternAndEverything:
        "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
      patternAndEverythingWithRegexImportName:
        "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
      patternAndEverythingWithCustomMessage:
        "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
      patternAndEverythingWithRegexImportNameAndCustomMessage:
        "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}",
      everything:
        "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
      everythingWithCustomMessage:
        "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
      importName:
        "'{{importName}}' import from '{{importSource}}' is restricted.",
      importNameWithCustomMessage:
        "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}",
    },
    schema: {
      anyOf: [
        {
          type: "array",
          items: {
            anyOf: [
              {
                type: "string",
              },
              {
                type: "object",
                properties: {
                  name: {
                    type: "string",
                  },
                  message: {
                    type: "string",
                    minLength: 1,
                  },
                  importNames: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                  },
                },
                additionalProperties: false,
                required: ["name"],
              },
            ],
          },
          uniqueItems: true,
        },
        {
          type: "array",
          items: [
            {
              type: "object",
              properties: {
                paths: {
                  type: "array",
                  items: {
                    anyOf: [
                      {
                        type: "string",
                      },
                      {
                        type: "object",
                        properties: {
                          name: {
                            type: "string",
                          },
                          message: {
                            type: "string",
                            minLength: 1,
                          },
                          importNames: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                        },
                        additionalProperties: false,
                        required: ["name"],
                      },
                    ],
                  },
                  uniqueItems: true,
                },
                patterns: {
                  anyOf: [
                    {
                      type: "array",
                      items: {
                        type: "string",
                      },
                      uniqueItems: true,
                    },
                    {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          importNames: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            minItems: 1,
                            uniqueItems: true,
                          },
                          group: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            minItems: 1,
                            uniqueItems: true,
                          },
                          importNamePattern: {
                            type: "string",
                          },
                          message: {
                            type: "string",
                            minLength: 1,
                          },
                          caseSensitive: {
                            type: "boolean",
                          },
                        },
                        additionalProperties: false,
                        required: ["group"],
                      },
                      uniqueItems: true,
                    },
                  ],
                },
              },
              additionalProperties: false,
            },
          ],
          additionalItems: false,
        },
      ],
    },
  },
  "no-restricted-modules": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "Disallow specified modules when loaded by `require`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-restricted-modules",
    },
    schema: {
      anyOf: [
        {
          type: "array",
          items: {
            anyOf: [
              {
                type: "string",
              },
              {
                type: "object",
                properties: {
                  name: {
                    type: "string",
                  },
                  message: {
                    type: "string",
                    minLength: 1,
                  },
                },
                additionalProperties: false,
                required: ["name"],
              },
            ],
          },
          uniqueItems: true,
        },
        {
          type: "array",
          items: {
            type: "object",
            properties: {
              paths: {
                type: "array",
                items: {
                  anyOf: [
                    {
                      type: "string",
                    },
                    {
                      type: "object",
                      properties: {
                        name: {
                          type: "string",
                        },
                        message: {
                          type: "string",
                          minLength: 1,
                        },
                      },
                      additionalProperties: false,
                      required: ["name"],
                    },
                  ],
                },
                uniqueItems: true,
              },
              patterns: {
                type: "array",
                items: {
                  type: "string",
                },
                uniqueItems: true,
              },
            },
            additionalProperties: false,
          },
          additionalItems: false,
        },
      ],
    },
    messages: {
      defaultMessage: "'{{name}}' module is restricted from being used.",
      customMessage:
        "'{{name}}' module is restricted from being used. {{customMessage}}",
      patternMessage:
        "'{{name}}' module is restricted from being used by a pattern.",
    },
  },
  "no-restricted-properties": {
    type: "suggestion",
    docs: {
      description: "Disallow certain properties on certain objects",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-restricted-properties",
    },
    schema: {
      type: "array",
      items: {
        anyOf: [
          {
            type: "object",
            properties: {
              object: {
                type: "string",
              },
              property: {
                type: "string",
              },
              message: {
                type: "string",
              },
            },
            additionalProperties: false,
            required: ["object"],
          },
          {
            type: "object",
            properties: {
              object: {
                type: "string",
              },
              property: {
                type: "string",
              },
              message: {
                type: "string",
              },
            },
            additionalProperties: false,
            required: ["property"],
          },
        ],
      },
      uniqueItems: true,
    },
    messages: {
      restrictedObjectProperty:
        "'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}",
      restrictedProperty:
        "'{{propertyName}}' is restricted from being used.{{message}}",
    },
  },
  "no-restricted-syntax": {
    type: "suggestion",
    docs: {
      description: "Disallow specified syntax",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-restricted-syntax",
    },
    schema: {
      type: "array",
      items: {
        oneOf: [
          {
            type: "string",
          },
          {
            type: "object",
            properties: {
              selector: {
                type: "string",
              },
              message: {
                type: "string",
              },
            },
            required: ["selector"],
            additionalProperties: false,
          },
        ],
      },
      uniqueItems: true,
      minItems: 0,
    },
    messages: {
      restrictedSyntax: "{{message}}",
    },
  },
  "no-return-assign": {
    type: "suggestion",
    docs: {
      description: "Disallow assignment operators in `return` statements",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-return-assign",
    },
    schema: [
      {
        enum: ["except-parens", "always"],
      },
    ],
    messages: {
      returnAssignment: "Return statement should not contain assignment.",
      arrowAssignment: "Arrow function should not return assignment.",
    },
  },
  "no-return-await": {
    hasSuggestions: true,
    type: "suggestion",
    docs: {
      description: "Disallow unnecessary `return await`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-return-await",
    },
    fixable: null,
    deprecated: true,
    replacedBy: [],
    schema: [],
    messages: {
      removeAwait: "Remove redundant `await`.",
      redundantUseOfAwait: "Redundant use of `await` on a return value.",
    },
  },
  "no-script-url": {
    type: "suggestion",
    docs: {
      description: "Disallow `javascript:` urls",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-script-url",
    },
    schema: [],
    messages: {
      unexpectedScriptURL: "Script URL is a form of eval.",
    },
  },
  "no-self-assign": {
    type: "problem",
    docs: {
      description: "Disallow assignments where both sides are exactly the same",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-self-assign",
    },
    schema: [
      {
        type: "object",
        properties: {
          props: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      selfAssignment: "'{{name}}' is assigned to itself.",
    },
  },
  "no-self-compare": {
    type: "problem",
    docs: {
      description: "Disallow comparisons where both sides are exactly the same",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-self-compare",
    },
    schema: [],
    messages: {
      comparingToSelf: "Comparing to itself is potentially pointless.",
    },
  },
  "no-sequences": {
    type: "suggestion",
    docs: {
      description: "Disallow comma operators",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-sequences",
    },
    schema: [
      {
        properties: {
          allowInParentheses: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedCommaExpression: "Unexpected use of comma operator.",
    },
  },
  "no-setter-return": {
    type: "problem",
    docs: {
      description: "Disallow returning values from setters",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-setter-return",
    },
    schema: [],
    messages: {
      returnsValue: "Setter cannot return a value.",
    },
  },
  "no-shadow": {
    type: "suggestion",
    docs: {
      description:
        "Disallow variable declarations from shadowing variables declared in the outer scope",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-shadow",
    },
    schema: [
      {
        type: "object",
        properties: {
          builtinGlobals: {
            type: "boolean",
            default: false,
          },
          hoist: {
            enum: ["all", "functions", "never"],
            default: "functions",
          },
          allow: {
            type: "array",
            items: {
              type: "string",
            },
          },
          ignoreOnInitialization: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      noShadow:
        "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
      noShadowGlobal: "'{{name}}' is already a global variable.",
    },
  },
  "no-shadow-restricted-names": {
    type: "suggestion",
    docs: {
      description: "Disallow identifiers from shadowing restricted names",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-shadow-restricted-names",
    },
    schema: [],
    messages: {
      shadowingRestrictedName: "Shadowing of global property '{{name}}'.",
    },
  },
  "no-spaced-func": {
    type: "layout",
    docs: {
      description:
        "Disallow spacing between function identifiers and their applications (deprecated)",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-spaced-func",
    },
    deprecated: true,
    replacedBy: ["func-call-spacing"],
    fixable: "whitespace",
    schema: [],
    messages: {
      noSpacedFunction: "Unexpected space between function name and paren.",
    },
  },
  "no-sparse-arrays": {
    type: "problem",
    docs: {
      description: "Disallow sparse arrays",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-sparse-arrays",
    },
    schema: [],
    messages: {
      unexpectedSparseArray: "Unexpected comma in middle of array.",
    },
  },
  "no-sync": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "Disallow synchronous methods",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-sync",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowAtRootLevel: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      noSync: "Unexpected sync method: '{{propertyName}}'.",
    },
  },
  "no-tabs": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Disallow all tabs",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-tabs",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowIndentationTabs: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedTab: "Unexpected tab character.",
    },
  },
  "no-template-curly-in-string": {
    type: "problem",
    docs: {
      description:
        "Disallow template literal placeholder syntax in regular strings",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-template-curly-in-string",
    },
    schema: [],
    messages: {
      unexpectedTemplateExpression: "Unexpected template string expression.",
    },
  },
  "no-ternary": {
    type: "suggestion",
    docs: {
      description: "Disallow ternary operators",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-ternary",
    },
    schema: [],
    messages: {
      noTernaryOperator: "Ternary operator used.",
    },
  },
  "no-this-before-super": {
    type: "problem",
    docs: {
      description:
        "Disallow `this`/`super` before calling `super()` in constructors",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-this-before-super",
    },
    schema: [],
    messages: {
      noBeforeSuper: "'{{kind}}' is not allowed before 'super()'.",
    },
  },
  "no-throw-literal": {
    type: "suggestion",
    docs: {
      description: "Disallow throwing literals as exceptions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-throw-literal",
    },
    schema: [],
    messages: {
      object: "Expected an error object to be thrown.",
      undef: "Do not throw undefined.",
    },
  },
  "no-trailing-spaces": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Disallow trailing whitespace at the end of lines",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-trailing-spaces",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          skipBlankLines: {
            type: "boolean",
            default: false,
          },
          ignoreComments: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      trailingSpace: "Trailing spaces not allowed.",
    },
  },
  "no-undef": {
    type: "problem",
    docs: {
      description:
        "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-undef",
    },
    schema: [
      {
        type: "object",
        properties: {
          typeof: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      undef: "'{{name}}' is not defined.",
    },
  },
  "no-undef-init": {
    type: "suggestion",
    docs: {
      description: "Disallow initializing variables to `undefined`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-undef-init",
    },
    schema: [],
    fixable: "code",
    messages: {
      unnecessaryUndefinedInit:
        "It's not necessary to initialize '{{name}}' to undefined.",
    },
  },
  "no-undefined": {
    type: "suggestion",
    docs: {
      description: "Disallow the use of `undefined` as an identifier",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-undefined",
    },
    schema: [],
    messages: {
      unexpectedUndefined: "Unexpected use of undefined.",
    },
  },
  "no-underscore-dangle": {
    type: "suggestion",
    docs: {
      description: "Disallow dangling underscores in identifiers",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-underscore-dangle",
    },
    schema: [
      {
        type: "object",
        properties: {
          allow: {
            type: "array",
            items: {
              type: "string",
            },
          },
          allowAfterThis: {
            type: "boolean",
            default: false,
          },
          allowAfterSuper: {
            type: "boolean",
            default: false,
          },
          allowAfterThisConstructor: {
            type: "boolean",
            default: false,
          },
          enforceInMethodNames: {
            type: "boolean",
            default: false,
          },
          allowFunctionParams: {
            type: "boolean",
            default: true,
          },
          enforceInClassFields: {
            type: "boolean",
            default: false,
          },
          allowInArrayDestructuring: {
            type: "boolean",
            default: true,
          },
          allowInObjectDestructuring: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedUnderscore: "Unexpected dangling '_' in '{{identifier}}'.",
    },
  },
  "no-unexpected-multiline": {
    type: "problem",
    docs: {
      description: "Disallow confusing multiline expressions",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-unexpected-multiline",
    },
    schema: [],
    messages: {
      function: "Unexpected newline between function and ( of function call.",
      property: "Unexpected newline between object and [ of property access.",
      taggedTemplate:
        "Unexpected newline between template tag and template literal.",
      division: "Unexpected newline between numerator and division operator.",
    },
  },
  "no-unmodified-loop-condition": {
    type: "problem",
    docs: {
      description: "Disallow unmodified loop conditions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-unmodified-loop-condition",
    },
    schema: [],
    messages: {
      loopConditionNotModified: "'{{name}}' is not modified in this loop.",
    },
  },
  "no-unneeded-ternary": {
    type: "suggestion",
    docs: {
      description: "Disallow ternary operators when simpler alternatives exist",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-unneeded-ternary",
    },
    schema: [
      {
        type: "object",
        properties: {
          defaultAssignment: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      unnecessaryConditionalExpression:
        "Unnecessary use of boolean literals in conditional expression.",
      unnecessaryConditionalAssignment:
        "Unnecessary use of conditional expression for default assignment.",
    },
  },
  "no-unreachable": {
    type: "problem",
    docs: {
      description:
        "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-unreachable",
    },
    schema: [],
    messages: {
      unreachableCode: "Unreachable code.",
    },
  },
  "no-unreachable-loop": {
    type: "problem",
    docs: {
      description: "Disallow loops with a body that allows only one iteration",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-unreachable-loop",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignore: {
            type: "array",
            items: {
              enum: [
                "WhileStatement",
                "DoWhileStatement",
                "ForStatement",
                "ForInStatement",
                "ForOfStatement",
              ],
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      invalid: "Invalid loop. Its body allows only one iteration.",
    },
  },
  "no-unsafe-finally": {
    type: "problem",
    docs: {
      description: "Disallow control flow statements in `finally` blocks",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-unsafe-finally",
    },
    schema: [],
    messages: {
      unsafeUsage: "Unsafe usage of {{nodeType}}.",
    },
  },
  "no-unsafe-negation": {
    type: "problem",
    docs: {
      description: "Disallow negating the left operand of relational operators",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-unsafe-negation",
    },
    hasSuggestions: true,
    schema: [
      {
        type: "object",
        properties: {
          enforceForOrderingRelations: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: null,
    messages: {
      unexpected:
        "Unexpected negating the left operand of '{{operator}}' operator.",
      suggestNegatedExpression:
        "Negate '{{operator}}' expression instead of its left operand. This changes the current behavior.",
      suggestParenthesisedNegation:
        "Wrap negation in '()' to make the intention explicit. This preserves the current behavior.",
    },
  },
  "no-unsafe-optional-chaining": {
    type: "problem",
    docs: {
      description:
        "Disallow use of optional chaining in contexts where the `undefined` value is not allowed",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining",
    },
    schema: [
      {
        type: "object",
        properties: {
          disallowArithmeticOperators: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: null,
    messages: {
      unsafeOptionalChain:
        "Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.",
      unsafeArithmetic:
        "Unsafe arithmetic operation on optional chaining. It can result in NaN.",
    },
  },
  "no-unused-expressions": {
    type: "suggestion",
    docs: {
      description: "Disallow unused expressions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-unused-expressions",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowShortCircuit: {
            type: "boolean",
            default: false,
          },
          allowTernary: {
            type: "boolean",
            default: false,
          },
          allowTaggedTemplates: {
            type: "boolean",
            default: false,
          },
          enforceForJSX: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unusedExpression:
        "Expected an assignment or function call and instead saw an expression.",
    },
  },
  "no-unused-labels": {
    type: "suggestion",
    docs: {
      description: "Disallow unused labels",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-unused-labels",
    },
    schema: [],
    fixable: "code",
    messages: {
      unused: "'{{name}}:' is defined but never used.",
    },
  },
  "no-unused-private-class-members": {
    type: "problem",
    docs: {
      description: "Disallow unused private class members",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-unused-private-class-members",
    },
    schema: [],
    messages: {
      unusedPrivateClassMember:
        "'{{classMemberName}}' is defined but never used.",
    },
  },
  "no-unused-vars": {
    type: "problem",
    docs: {
      description: "Disallow unused variables",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-unused-vars",
    },
    schema: [
      {
        oneOf: [
          {
            enum: ["all", "local"],
          },
          {
            type: "object",
            properties: {
              vars: {
                enum: ["all", "local"],
              },
              varsIgnorePattern: {
                type: "string",
              },
              args: {
                enum: ["all", "after-used", "none"],
              },
              ignoreRestSiblings: {
                type: "boolean",
              },
              argsIgnorePattern: {
                type: "string",
              },
              caughtErrors: {
                enum: ["all", "none"],
              },
              caughtErrorsIgnorePattern: {
                type: "string",
              },
              destructuredArrayIgnorePattern: {
                type: "string",
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      unusedVar: "'{{varName}}' is {{action}} but never used{{additional}}.",
    },
  },
  "no-use-before-define": {
    type: "problem",
    docs: {
      description: "Disallow the use of variables before they are defined",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-use-before-define",
    },
    schema: [
      {
        oneOf: [
          {
            enum: ["nofunc"],
          },
          {
            type: "object",
            properties: {
              functions: {
                type: "boolean",
              },
              classes: {
                type: "boolean",
              },
              variables: {
                type: "boolean",
              },
              allowNamedExports: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      usedBeforeDefined: "'{{name}}' was used before it was defined.",
    },
  },
  "no-useless-backreference": {
    type: "problem",
    docs: {
      description: "Disallow useless backreferences in regular expressions",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-useless-backreference",
    },
    schema: [],
    messages: {
      nested:
        "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' from within that group.",
      forward:
        "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears later in the pattern.",
      backward:
        "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears before in the same lookbehind.",
      disjunctive:
        "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in another alternative.",
      intoNegativeLookaround:
        "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in a negative lookaround.",
    },
  },
  "no-useless-call": {
    type: "suggestion",
    docs: {
      description: "Disallow unnecessary calls to `.call()` and `.apply()`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-useless-call",
    },
    schema: [],
    messages: {
      unnecessaryCall: "Unnecessary '.{{name}}()'.",
    },
  },
  "no-useless-catch": {
    type: "suggestion",
    docs: {
      description: "Disallow unnecessary `catch` clauses",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-useless-catch",
    },
    schema: [],
    messages: {
      unnecessaryCatchClause: "Unnecessary catch clause.",
      unnecessaryCatch: "Unnecessary try/catch wrapper.",
    },
  },
  "no-useless-computed-key": {
    type: "suggestion",
    docs: {
      description:
        "Disallow unnecessary computed property keys in objects and classes",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-useless-computed-key",
    },
    schema: [
      {
        type: "object",
        properties: {
          enforceForClassMembers: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      unnecessarilyComputedProperty:
        "Unnecessarily computed property [{{property}}] found.",
    },
  },
  "no-useless-concat": {
    type: "suggestion",
    docs: {
      description:
        "Disallow unnecessary concatenation of literals or template literals",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-useless-concat",
    },
    schema: [],
    messages: {
      unexpectedConcat: "Unexpected string concatenation of literals.",
    },
  },
  "no-useless-constructor": {
    type: "suggestion",
    docs: {
      description: "Disallow unnecessary constructors",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-useless-constructor",
    },
    schema: [],
    messages: {
      noUselessConstructor: "Useless constructor.",
    },
  },
  "no-useless-escape": {
    type: "suggestion",
    docs: {
      description: "Disallow unnecessary escape characters",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-useless-escape",
    },
    hasSuggestions: true,
    messages: {
      unnecessaryEscape: "Unnecessary escape character: \\{{character}}.",
      removeEscape:
        "Remove the `\\`. This maintains the current functionality.",
      removeEscapeDoNotKeepSemantics:
        "Remove the `\\` if it was inserted by mistake.",
      escapeBackslash:
        "Replace the `\\` with `\\\\` to include the actual backslash character.",
    },
    schema: [],
  },
  "no-useless-rename": {
    type: "suggestion",
    docs: {
      description:
        "Disallow renaming import, export, and destructured assignments to the same name",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-useless-rename",
    },
    fixable: "code",
    schema: [
      {
        type: "object",
        properties: {
          ignoreDestructuring: {
            type: "boolean",
            default: false,
          },
          ignoreImport: {
            type: "boolean",
            default: false,
          },
          ignoreExport: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unnecessarilyRenamed: "{{type}} {{name}} unnecessarily renamed.",
    },
  },
  "no-useless-return": {
    type: "suggestion",
    docs: {
      description: "Disallow redundant return statements",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-useless-return",
    },
    fixable: "code",
    schema: [],
    messages: {
      unnecessaryReturn: "Unnecessary return statement.",
    },
  },
  "no-var": {
    type: "suggestion",
    docs: {
      description: "Require `let` or `const` instead of `var`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-var",
    },
    schema: [],
    fixable: "code",
    messages: {
      unexpectedVar: "Unexpected var, use let or const instead.",
    },
  },
  "no-void": {
    type: "suggestion",
    docs: {
      description: "Disallow `void` operators",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-void",
    },
    messages: {
      noVoid: "Expected 'undefined' and instead saw 'void'.",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowAsStatement: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "no-warning-comments": {
    type: "suggestion",
    docs: {
      description: "Disallow specified warning terms in comments",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-warning-comments",
    },
    schema: [
      {
        type: "object",
        properties: {
          terms: {
            type: "array",
            items: {
              type: "string",
            },
          },
          location: {
            enum: ["start", "anywhere"],
          },
          decoration: {
            type: "array",
            items: {
              type: "string",
              pattern: "^\\S$",
            },
            minItems: 1,
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedComment: "Unexpected '{{matchedTerm}}' comment: '{{comment}}'.",
    },
  },
  "no-whitespace-before-property": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Disallow whitespace before properties",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/no-whitespace-before-property",
    },
    fixable: "whitespace",
    schema: [],
    messages: {
      unexpectedWhitespace:
        "Unexpected whitespace before property {{propName}}.",
    },
  },
  "no-with": {
    type: "suggestion",
    docs: {
      description: "Disallow `with` statements",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/no-with",
    },
    schema: [],
    messages: {
      unexpectedWith: "Unexpected use of 'with' statement.",
    },
  },
  "nonblock-statement-body-position": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce the location of single-line statements",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/nonblock-statement-body-position",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["beside", "below", "any"],
      },
      {
        properties: {
          overrides: {
            properties: {
              if: {
                enum: ["beside", "below", "any"],
              },
              else: {
                enum: ["beside", "below", "any"],
              },
              while: {
                enum: ["beside", "below", "any"],
              },
              do: {
                enum: ["beside", "below", "any"],
              },
              for: {
                enum: ["beside", "below", "any"],
              },
            },
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      expectNoLinebreak: "Expected no linebreak before this statement.",
      expectLinebreak: "Expected a linebreak before this statement.",
    },
  },
  "object-curly-newline": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Enforce consistent line breaks after opening and before closing braces",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/object-curly-newline",
    },
    fixable: "whitespace",
    schema: [
      {
        oneOf: [
          {
            oneOf: [
              {
                enum: ["always", "never"],
              },
              {
                type: "object",
                properties: {
                  multiline: {
                    type: "boolean",
                  },
                  minProperties: {
                    type: "integer",
                    minimum: 0,
                  },
                  consistent: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
                minProperties: 1,
              },
            ],
          },
          {
            type: "object",
            properties: {
              ObjectExpression: {
                oneOf: [
                  {
                    enum: ["always", "never"],
                  },
                  {
                    type: "object",
                    properties: {
                      multiline: {
                        type: "boolean",
                      },
                      minProperties: {
                        type: "integer",
                        minimum: 0,
                      },
                      consistent: {
                        type: "boolean",
                      },
                    },
                    additionalProperties: false,
                    minProperties: 1,
                  },
                ],
              },
              ObjectPattern: {
                oneOf: [
                  {
                    enum: ["always", "never"],
                  },
                  {
                    type: "object",
                    properties: {
                      multiline: {
                        type: "boolean",
                      },
                      minProperties: {
                        type: "integer",
                        minimum: 0,
                      },
                      consistent: {
                        type: "boolean",
                      },
                    },
                    additionalProperties: false,
                    minProperties: 1,
                  },
                ],
              },
              ImportDeclaration: {
                oneOf: [
                  {
                    enum: ["always", "never"],
                  },
                  {
                    type: "object",
                    properties: {
                      multiline: {
                        type: "boolean",
                      },
                      minProperties: {
                        type: "integer",
                        minimum: 0,
                      },
                      consistent: {
                        type: "boolean",
                      },
                    },
                    additionalProperties: false,
                    minProperties: 1,
                  },
                ],
              },
              ExportDeclaration: {
                oneOf: [
                  {
                    enum: ["always", "never"],
                  },
                  {
                    type: "object",
                    properties: {
                      multiline: {
                        type: "boolean",
                      },
                      minProperties: {
                        type: "integer",
                        minimum: 0,
                      },
                      consistent: {
                        type: "boolean",
                      },
                    },
                    additionalProperties: false,
                    minProperties: 1,
                  },
                ],
              },
            },
            additionalProperties: false,
            minProperties: 1,
          },
        ],
      },
    ],
    messages: {
      unexpectedLinebreakBeforeClosingBrace:
        "Unexpected line break before this closing brace.",
      unexpectedLinebreakAfterOpeningBrace:
        "Unexpected line break after this opening brace.",
      expectedLinebreakBeforeClosingBrace:
        "Expected a line break before this closing brace.",
      expectedLinebreakAfterOpeningBrace:
        "Expected a line break after this opening brace.",
    },
  },
  "object-curly-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent spacing inside braces",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/object-curly-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never"],
      },
      {
        type: "object",
        properties: {
          arraysInObjects: {
            type: "boolean",
          },
          objectsInObjects: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      requireSpaceBefore: "A space is required before '{{token}}'.",
      requireSpaceAfter: "A space is required after '{{token}}'.",
      unexpectedSpaceBefore: "There should be no space before '{{token}}'.",
      unexpectedSpaceAfter: "There should be no space after '{{token}}'.",
    },
  },
  "object-property-newline": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce placing object properties on separate lines",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/object-property-newline",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowAllPropertiesOnSameLine: {
            type: "boolean",
            default: false,
          },
          allowMultiplePropertiesPerLine: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "whitespace",
    messages: {
      propertiesOnNewlineAll:
        "Object properties must go on a new line if they aren't all on the same line.",
      propertiesOnNewline: "Object properties must go on a new line.",
    },
  },
  "object-shorthand": {
    type: "suggestion",
    docs: {
      description:
        "Require or disallow method and property shorthand syntax for object literals",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/object-shorthand",
    },
    fixable: "code",
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: [
                "always",
                "methods",
                "properties",
                "never",
                "consistent",
                "consistent-as-needed",
              ],
            },
          ],
          minItems: 0,
          maxItems: 1,
        },
        {
          type: "array",
          items: [
            {
              enum: ["always", "methods", "properties"],
            },
            {
              type: "object",
              properties: {
                avoidQuotes: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
        {
          type: "array",
          items: [
            {
              enum: ["always", "methods"],
            },
            {
              type: "object",
              properties: {
                ignoreConstructors: {
                  type: "boolean",
                },
                methodsIgnorePattern: {
                  type: "string",
                },
                avoidQuotes: {
                  type: "boolean",
                },
                avoidExplicitReturnArrows: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
      ],
    },
    messages: {
      expectedAllPropertiesShorthanded:
        "Expected shorthand for all properties.",
      expectedLiteralMethodLongform:
        "Expected longform method syntax for string literal keys.",
      expectedPropertyShorthand: "Expected property shorthand.",
      expectedPropertyLongform: "Expected longform property syntax.",
      expectedMethodShorthand: "Expected method shorthand.",
      expectedMethodLongform: "Expected longform method syntax.",
      unexpectedMix:
        "Unexpected mix of shorthand and non-shorthand properties.",
    },
  },
  "one-var": {
    type: "suggestion",
    docs: {
      description:
        "Enforce variables to be declared either together or separately in functions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/one-var",
    },
    fixable: "code",
    schema: [
      {
        oneOf: [
          {
            enum: ["always", "never", "consecutive"],
          },
          {
            type: "object",
            properties: {
              separateRequires: {
                type: "boolean",
              },
              var: {
                enum: ["always", "never", "consecutive"],
              },
              let: {
                enum: ["always", "never", "consecutive"],
              },
              const: {
                enum: ["always", "never", "consecutive"],
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              initialized: {
                enum: ["always", "never", "consecutive"],
              },
              uninitialized: {
                enum: ["always", "never", "consecutive"],
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      combineUninitialized:
        "Combine this with the previous '{{type}}' statement with uninitialized variables.",
      combineInitialized:
        "Combine this with the previous '{{type}}' statement with initialized variables.",
      splitUninitialized:
        "Split uninitialized '{{type}}' declarations into multiple statements.",
      splitInitialized:
        "Split initialized '{{type}}' declarations into multiple statements.",
      splitRequires: "Split requires to be separated into a single block.",
      combine: "Combine this with the previous '{{type}}' statement.",
      split: "Split '{{type}}' declarations into multiple statements.",
    },
  },
  "one-var-declaration-per-line": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "Require or disallow newlines around variable declarations",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/one-var-declaration-per-line",
    },
    schema: [
      {
        enum: ["always", "initializations"],
      },
    ],
    fixable: "whitespace",
    messages: {
      expectVarOnNewline: "Expected variable declaration to be on a new line.",
    },
  },
  "operator-assignment": {
    type: "suggestion",
    docs: {
      description:
        "Require or disallow assignment operator shorthand where possible",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/operator-assignment",
    },
    schema: [
      {
        enum: ["always", "never"],
      },
    ],
    fixable: "code",
    messages: {
      replaced:
        "Assignment (=) can be replaced with operator assignment ({{operator}}).",
      unexpected: "Unexpected operator assignment ({{operator}}) shorthand.",
    },
  },
  "operator-linebreak": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent linebreak style for operators",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/operator-linebreak",
    },
    schema: [
      {
        enum: ["after", "before", "none", null],
      },
      {
        type: "object",
        properties: {
          overrides: {
            type: "object",
            additionalProperties: {
              enum: ["after", "before", "none", "ignore"],
            },
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      operatorAtBeginning:
        "'{{operator}}' should be placed at the beginning of the line.",
      operatorAtEnd: "'{{operator}}' should be placed at the end of the line.",
      badLinebreak: "Bad line breaking before and after '{{operator}}'.",
      noLinebreak:
        "There should be no line break before or after '{{operator}}'.",
    },
  },
  "padded-blocks": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Require or disallow padding within blocks",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/padded-blocks",
    },
    fixable: "whitespace",
    schema: [
      {
        oneOf: [
          {
            enum: ["always", "never"],
          },
          {
            type: "object",
            properties: {
              blocks: {
                enum: ["always", "never"],
              },
              switches: {
                enum: ["always", "never"],
              },
              classes: {
                enum: ["always", "never"],
              },
            },
            additionalProperties: false,
            minProperties: 1,
          },
        ],
      },
      {
        type: "object",
        properties: {
          allowSingleLineBlocks: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      alwaysPadBlock: "Block must be padded by blank lines.",
      neverPadBlock: "Block must not be padded by blank lines.",
    },
  },
  "padding-line-between-statements": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Require or disallow padding lines between statements",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/padding-line-between-statements",
    },
    fixable: "whitespace",
    schema: {
      definitions: {
        paddingType: {
          enum: ["any", "never", "always"],
        },
        statementType: {
          anyOf: [
            {
              enum: [
                "*",
                "block-like",
                "cjs-export",
                "cjs-import",
                "directive",
                "expression",
                "iife",
                "multiline-block-like",
                "multiline-expression",
                "multiline-const",
                "multiline-let",
                "multiline-var",
                "singleline-const",
                "singleline-let",
                "singleline-var",
                "block",
                "empty",
                "function",
                "break",
                "case",
                "class",
                "const",
                "continue",
                "debugger",
                "default",
                "do",
                "export",
                "for",
                "if",
                "import",
                "let",
                "return",
                "switch",
                "throw",
                "try",
                "var",
                "while",
                "with",
              ],
            },
            {
              type: "array",
              items: {
                enum: [
                  "*",
                  "block-like",
                  "cjs-export",
                  "cjs-import",
                  "directive",
                  "expression",
                  "iife",
                  "multiline-block-like",
                  "multiline-expression",
                  "multiline-const",
                  "multiline-let",
                  "multiline-var",
                  "singleline-const",
                  "singleline-let",
                  "singleline-var",
                  "block",
                  "empty",
                  "function",
                  "break",
                  "case",
                  "class",
                  "const",
                  "continue",
                  "debugger",
                  "default",
                  "do",
                  "export",
                  "for",
                  "if",
                  "import",
                  "let",
                  "return",
                  "switch",
                  "throw",
                  "try",
                  "var",
                  "while",
                  "with",
                ],
              },
              minItems: 1,
              uniqueItems: true,
            },
          ],
        },
      },
      type: "array",
      items: {
        type: "object",
        properties: {
          blankLine: {
            $ref: "#/definitions/paddingType",
          },
          prev: {
            $ref: "#/definitions/statementType",
          },
          next: {
            $ref: "#/definitions/statementType",
          },
        },
        additionalProperties: false,
        required: ["blankLine", "prev", "next"],
      },
    },
    messages: {
      unexpectedBlankLine: "Unexpected blank line before this statement.",
      expectedBlankLine: "Expected blank line before this statement.",
    },
  },
  "prefer-arrow-callback": {
    type: "suggestion",
    docs: {
      description: "Require using arrow functions for callbacks",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-arrow-callback",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowNamedFunctions: {
            type: "boolean",
            default: false,
          },
          allowUnboundThis: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      preferArrowCallback: "Unexpected function expression.",
    },
  },
  "prefer-const": {
    type: "suggestion",
    docs: {
      description:
        "Require `const` declarations for variables that are never reassigned after declared",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-const",
    },
    fixable: "code",
    schema: [
      {
        type: "object",
        properties: {
          destructuring: {
            enum: ["any", "all"],
            default: "any",
          },
          ignoreReadBeforeAssign: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      useConst: "'{{name}}' is never reassigned. Use 'const' instead.",
    },
  },
  "prefer-destructuring": {
    type: "suggestion",
    docs: {
      description: "Require destructuring from arrays and/or objects",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-destructuring",
    },
    fixable: "code",
    schema: [
      {
        oneOf: [
          {
            type: "object",
            properties: {
              VariableDeclarator: {
                type: "object",
                properties: {
                  array: {
                    type: "boolean",
                  },
                  object: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              AssignmentExpression: {
                type: "object",
                properties: {
                  array: {
                    type: "boolean",
                  },
                  object: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              array: {
                type: "boolean",
              },
              object: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
        ],
      },
      {
        type: "object",
        properties: {
          enforceForRenamedProperties: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      preferDestructuring: "Use {{type}} destructuring.",
    },
  },
  "prefer-exponentiation-operator": {
    type: "suggestion",
    docs: {
      description:
        "Disallow the use of `Math.pow` in favor of the `**` operator",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-exponentiation-operator",
    },
    schema: [],
    fixable: "code",
    messages: {
      useExponentiation: "Use the '**' operator instead of 'Math.pow'.",
    },
  },
  "prefer-named-capture-group": {
    type: "suggestion",
    docs: {
      description: "Enforce using named capture group in regular expression",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-named-capture-group",
    },
    hasSuggestions: true,
    schema: [],
    messages: {
      addGroupName: "Add name to capture group.",
      addNonCapture: "Convert group to non-capturing.",
      required:
        "Capture group '{{group}}' should be converted to a named or non-capturing group.",
    },
  },
  "prefer-numeric-literals": {
    type: "suggestion",
    docs: {
      description:
        "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-numeric-literals",
    },
    schema: [],
    messages: {
      useLiteral: "Use {{system}} literals instead of {{functionName}}().",
    },
    fixable: "code",
  },
  "prefer-object-has-own": {
    type: "suggestion",
    docs: {
      description:
        "Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-object-has-own",
    },
    schema: [],
    messages: {
      useHasOwn:
        "Use 'Object.hasOwn()' instead of 'Object.prototype.hasOwnProperty.call()'.",
    },
    fixable: "code",
  },
  "prefer-object-spread": {
    type: "suggestion",
    docs: {
      description:
        "Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-object-spread",
    },
    schema: [],
    fixable: "code",
    messages: {
      useSpreadMessage:
        "Use an object spread instead of `Object.assign` eg: `{ ...foo }`.",
      useLiteralMessage:
        "Use an object literal instead of `Object.assign`. eg: `{ foo: bar }`.",
    },
  },
  "prefer-promise-reject-errors": {
    type: "suggestion",
    docs: {
      description: "Require using Error objects as Promise rejection reasons",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-promise-reject-errors",
    },
    fixable: null,
    schema: [
      {
        type: "object",
        properties: {
          allowEmptyReject: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      rejectAnError: "Expected the Promise rejection reason to be an Error.",
    },
  },
  "prefer-reflect": {
    type: "suggestion",
    docs: {
      description: "Require `Reflect` methods where applicable",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-reflect",
    },
    deprecated: true,
    replacedBy: [],
    schema: [
      {
        type: "object",
        properties: {
          exceptions: {
            type: "array",
            items: {
              enum: [
                "apply",
                "call",
                "delete",
                "defineProperty",
                "getOwnPropertyDescriptor",
                "getPrototypeOf",
                "setPrototypeOf",
                "isExtensible",
                "getOwnPropertyNames",
                "preventExtensions",
              ],
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      preferReflect: "Avoid using {{existing}}, instead use {{substitute}}.",
    },
  },
  "prefer-regex-literals": {
    type: "suggestion",
    docs: {
      description:
        "Disallow use of the `RegExp` constructor in favor of regular expression literals",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-regex-literals",
    },
    hasSuggestions: true,
    schema: [
      {
        type: "object",
        properties: {
          disallowRedundantWrapping: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedRegExp:
        "Use a regular expression literal instead of the 'RegExp' constructor.",
      replaceWithLiteral:
        "Replace with an equivalent regular expression literal.",
      replaceWithLiteralAndFlags:
        "Replace with an equivalent regular expression literal with flags '{{ flags }}'.",
      replaceWithIntendedLiteralAndFlags:
        "Replace with a regular expression literal with flags '{{ flags }}'.",
      unexpectedRedundantRegExp:
        "Regular expression literal is unnecessarily wrapped within a 'RegExp' constructor.",
      unexpectedRedundantRegExpWithFlags:
        "Use regular expression literal with flags instead of the 'RegExp' constructor.",
    },
  },
  "prefer-rest-params": {
    type: "suggestion",
    docs: {
      description: "Require rest parameters instead of `arguments`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-rest-params",
    },
    schema: [],
    messages: {
      preferRestParams: "Use the rest parameters instead of 'arguments'.",
    },
  },
  "prefer-spread": {
    type: "suggestion",
    docs: {
      description: "Require spread operators instead of `.apply()`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-spread",
    },
    schema: [],
    fixable: null,
    messages: {
      preferSpread: "Use the spread operator instead of '.apply()'.",
    },
  },
  "prefer-template": {
    type: "suggestion",
    docs: {
      description: "Require template literals instead of string concatenation",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/prefer-template",
    },
    schema: [],
    fixable: "code",
    messages: {
      unexpectedStringConcatenation: "Unexpected string concatenation.",
    },
  },
  "quote-props": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "Require quotes around object literal property names",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/quote-props",
    },
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: [
                "always",
                "as-needed",
                "consistent",
                "consistent-as-needed",
              ],
            },
          ],
          minItems: 0,
          maxItems: 1,
        },
        {
          type: "array",
          items: [
            {
              enum: [
                "always",
                "as-needed",
                "consistent",
                "consistent-as-needed",
              ],
            },
            {
              type: "object",
              properties: {
                keywords: {
                  type: "boolean",
                },
                unnecessary: {
                  type: "boolean",
                },
                numbers: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
      ],
    },
    fixable: "code",
    messages: {
      requireQuotesDueToReservedWord:
        "Properties should be quoted as '{{property}}' is a reserved word.",
      inconsistentlyQuotedProperty:
        "Inconsistently quoted property '{{key}}' found.",
      unnecessarilyQuotedProperty:
        "Unnecessarily quoted property '{{property}}' found.",
      unquotedReservedProperty:
        "Unquoted reserved word '{{property}}' used as key.",
      unquotedNumericProperty:
        "Unquoted number literal '{{property}}' used as key.",
      unquotedPropertyFound: "Unquoted property '{{property}}' found.",
      redundantQuoting:
        "Properties shouldn't be quoted as all quotes are redundant.",
    },
  },
  quotes: {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Enforce the consistent use of either backticks, double, or single quotes",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/quotes",
    },
    fixable: "code",
    schema: [
      {
        enum: ["single", "double", "backtick"],
      },
      {
        anyOf: [
          {
            enum: ["avoid-escape"],
          },
          {
            type: "object",
            properties: {
              avoidEscape: {
                type: "boolean",
              },
              allowTemplateLiterals: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      wrongQuotes: "Strings must use {{description}}.",
    },
  },
  radix: {
    type: "suggestion",
    docs: {
      description:
        "Enforce the consistent use of the radix argument when using `parseInt()`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/radix",
    },
    hasSuggestions: true,
    schema: [
      {
        enum: ["always", "as-needed"],
      },
    ],
    messages: {
      missingParameters: "Missing parameters.",
      redundantRadix: "Redundant radix parameter.",
      missingRadix: "Missing radix parameter.",
      invalidRadix:
        "Invalid radix parameter, must be an integer between 2 and 36.",
      addRadixParameter10:
        "Add radix parameter `10` for parsing decimal numbers.",
    },
  },
  "require-atomic-updates": {
    type: "problem",
    docs: {
      description:
        "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/require-atomic-updates",
    },
    fixable: null,
    schema: [
      {
        type: "object",
        properties: {
          allowProperties: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      nonAtomicUpdate:
        "Possible race condition: `{{value}}` might be reassigned based on an outdated value of `{{value}}`.",
      nonAtomicObjectUpdate:
        "Possible race condition: `{{value}}` might be assigned based on an outdated state of `{{object}}`.",
    },
  },
  "require-await": {
    type: "suggestion",
    docs: {
      description: "Disallow async functions which have no `await` expression",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/require-await",
    },
    schema: [],
    messages: {
      missingAwait: "{{name}} has no 'await' expression.",
    },
  },
  "require-jsdoc": {
    type: "suggestion",
    docs: {
      description: "Require JSDoc comments",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/require-jsdoc",
    },
    schema: [
      {
        type: "object",
        properties: {
          require: {
            type: "object",
            properties: {
              ClassDeclaration: {
                type: "boolean",
                default: false,
              },
              MethodDefinition: {
                type: "boolean",
                default: false,
              },
              FunctionDeclaration: {
                type: "boolean",
                default: true,
              },
              ArrowFunctionExpression: {
                type: "boolean",
                default: false,
              },
              FunctionExpression: {
                type: "boolean",
                default: false,
              },
            },
            additionalProperties: false,
            default: {},
          },
        },
        additionalProperties: false,
      },
    ],
    deprecated: true,
    replacedBy: [],
    messages: {
      missingJSDocComment: "Missing JSDoc comment.",
    },
  },
  "require-unicode-regexp": {
    type: "suggestion",
    docs: {
      description: "Enforce the use of `u` or `v` flag on RegExp",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/require-unicode-regexp",
    },
    hasSuggestions: true,
    messages: {
      addUFlag: "Add the 'u' flag.",
      requireUFlag: "Use the 'u' flag.",
    },
    schema: [],
  },
  "require-yield": {
    type: "suggestion",
    docs: {
      description: "Require generator functions to contain `yield`",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/require-yield",
    },
    schema: [],
    messages: {
      missingYield: "This generator function does not have 'yield'.",
    },
  },
  "rest-spread-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Enforce spacing between rest and spread operators and their expressions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/rest-spread-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never"],
      },
    ],
    messages: {
      unexpectedWhitespace: "Unexpected whitespace after {{type}} operator.",
      expectedWhitespace: "Expected whitespace after {{type}} operator.",
    },
  },
  semi: {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Require or disallow semicolons instead of ASI",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/semi",
    },
    fixable: "code",
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["never"],
            },
            {
              type: "object",
              properties: {
                beforeStatementContinuationChars: {
                  enum: ["always", "any", "never"],
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
        {
          type: "array",
          items: [
            {
              enum: ["always"],
            },
            {
              type: "object",
              properties: {
                omitLastInOneLineBlock: {
                  type: "boolean",
                },
                omitLastInOneLineClassBody: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
      ],
    },
    messages: {
      missingSemi: "Missing semicolon.",
      extraSemi: "Extra semicolon.",
    },
  },
  "semi-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent spacing before and after semicolons",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/semi-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          before: {
            type: "boolean",
            default: false,
          },
          after: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedWhitespaceBefore: "Unexpected whitespace before semicolon.",
      unexpectedWhitespaceAfter: "Unexpected whitespace after semicolon.",
      missingWhitespaceBefore: "Missing whitespace before semicolon.",
      missingWhitespaceAfter: "Missing whitespace after semicolon.",
    },
  },
  "semi-style": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce location of semicolons",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/semi-style",
    },
    schema: [
      {
        enum: ["last", "first"],
      },
    ],
    fixable: "whitespace",
    messages: {
      expectedSemiColon: "Expected this semicolon to be at {{pos}}.",
    },
  },
  "sort-imports": {
    type: "suggestion",
    docs: {
      description: "Enforce sorted import declarations within modules",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/sort-imports",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreCase: {
            type: "boolean",
            default: false,
          },
          memberSyntaxSortOrder: {
            type: "array",
            items: {
              enum: ["none", "all", "multiple", "single"],
            },
            uniqueItems: true,
            minItems: 4,
            maxItems: 4,
          },
          ignoreDeclarationSort: {
            type: "boolean",
            default: false,
          },
          ignoreMemberSort: {
            type: "boolean",
            default: false,
          },
          allowSeparatedGroups: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      sortImportsAlphabetically: "Imports should be sorted alphabetically.",
      sortMembersAlphabetically:
        "Member '{{memberName}}' of the import declaration should be sorted alphabetically.",
      unexpectedSyntaxOrder:
        "Expected '{{syntaxA}}' syntax before '{{syntaxB}}' syntax.",
    },
  },
  "sort-keys": {
    type: "suggestion",
    docs: {
      description: "Require object keys to be sorted",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/sort-keys",
    },
    schema: [
      {
        enum: ["asc", "desc"],
      },
      {
        type: "object",
        properties: {
          caseSensitive: {
            type: "boolean",
            default: true,
          },
          natural: {
            type: "boolean",
            default: false,
          },
          minKeys: {
            type: "integer",
            minimum: 2,
            default: 2,
          },
          allowLineSeparatedGroups: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      sortKeys:
        "Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'.",
    },
  },
  "sort-vars": {
    type: "suggestion",
    docs: {
      description:
        "Require variables within the same declaration block to be sorted",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/sort-vars",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreCase: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      sortVars:
        "Variables within the same declaration block should be sorted alphabetically.",
    },
  },
  "space-before-blocks": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent spacing before blocks",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/space-before-blocks",
    },
    fixable: "whitespace",
    schema: [
      {
        oneOf: [
          {
            enum: ["always", "never"],
          },
          {
            type: "object",
            properties: {
              keywords: {
                enum: ["always", "never", "off"],
              },
              functions: {
                enum: ["always", "never", "off"],
              },
              classes: {
                enum: ["always", "never", "off"],
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      unexpectedSpace: "Unexpected space before opening brace.",
      missingSpace: "Missing space before opening brace.",
    },
  },
  "space-before-function-paren": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Enforce consistent spacing before `function` definition opening parenthesis",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/space-before-function-paren",
    },
    fixable: "whitespace",
    schema: [
      {
        oneOf: [
          {
            enum: ["always", "never"],
          },
          {
            type: "object",
            properties: {
              anonymous: {
                enum: ["always", "never", "ignore"],
              },
              named: {
                enum: ["always", "never", "ignore"],
              },
              asyncArrow: {
                enum: ["always", "never", "ignore"],
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      unexpectedSpace: "Unexpected space before function parentheses.",
      missingSpace: "Missing space before function parentheses.",
    },
  },
  "space-in-parens": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent spacing inside parentheses",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/space-in-parens",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never"],
      },
      {
        type: "object",
        properties: {
          exceptions: {
            type: "array",
            items: {
              enum: ["{}", "[]", "()", "empty"],
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      missingOpeningSpace: "There must be a space after this paren.",
      missingClosingSpace: "There must be a space before this paren.",
      rejectedOpeningSpace: "There should be no space after this paren.",
      rejectedClosingSpace: "There should be no space before this paren.",
    },
  },
  "space-infix-ops": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Require spacing around infix operators",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/space-infix-ops",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          int32Hint: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      missingSpace: "Operator '{{operator}}' must be spaced.",
    },
  },
  "space-unary-ops": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent spacing before or after unary operators",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/space-unary-ops",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          words: {
            type: "boolean",
            default: true,
          },
          nonwords: {
            type: "boolean",
            default: false,
          },
          overrides: {
            type: "object",
            additionalProperties: {
              type: "boolean",
            },
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedBefore:
        "Unexpected space before unary operator '{{operator}}'.",
      unexpectedAfter: "Unexpected space after unary operator '{{operator}}'.",
      unexpectedAfterWord:
        "Unexpected space after unary word operator '{{word}}'.",
      wordOperator:
        "Unary word operator '{{word}}' must be followed by whitespace.",
      operator: "Unary operator '{{operator}}' must be followed by whitespace.",
      beforeUnaryExpressions:
        "Space is required before unary expressions '{{token}}'.",
    },
  },
  "spaced-comment": {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description:
        "Enforce consistent spacing after the `//` or `/*` in a comment",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/spaced-comment",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never"],
      },
      {
        type: "object",
        properties: {
          exceptions: {
            type: "array",
            items: {
              type: "string",
            },
          },
          markers: {
            type: "array",
            items: {
              type: "string",
            },
          },
          line: {
            type: "object",
            properties: {
              exceptions: {
                type: "array",
                items: {
                  type: "string",
                },
              },
              markers: {
                type: "array",
                items: {
                  type: "string",
                },
              },
            },
            additionalProperties: false,
          },
          block: {
            type: "object",
            properties: {
              exceptions: {
                type: "array",
                items: {
                  type: "string",
                },
              },
              markers: {
                type: "array",
                items: {
                  type: "string",
                },
              },
              balanced: {
                type: "boolean",
                default: false,
              },
            },
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedSpaceAfterMarker:
        "Unexpected space or tab after marker ({{refChar}}) in comment.",
      expectedExceptionAfter:
        "Expected exception block, space or tab after '{{refChar}}' in comment.",
      unexpectedSpaceBefore: "Unexpected space or tab before '*/' in comment.",
      unexpectedSpaceAfter:
        "Unexpected space or tab after '{{refChar}}' in comment.",
      expectedSpaceBefore: "Expected space or tab before '*/' in comment.",
      expectedSpaceAfter:
        "Expected space or tab after '{{refChar}}' in comment.",
    },
  },
  strict: {
    type: "suggestion",
    docs: {
      description: "Require or disallow strict mode directives",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/strict",
    },
    schema: [
      {
        enum: ["never", "global", "function", "safe"],
      },
    ],
    fixable: "code",
    messages: {
      function: "Use the function form of 'use strict'.",
      global: "Use the global form of 'use strict'.",
      multiple: "Multiple 'use strict' directives.",
      never: "Strict mode is not permitted.",
      unnecessary: "Unnecessary 'use strict' directive.",
      module: "'use strict' is unnecessary inside of modules.",
      implied:
        "'use strict' is unnecessary when implied strict mode is enabled.",
      unnecessaryInClasses: "'use strict' is unnecessary inside of classes.",
      nonSimpleParameterList:
        "'use strict' directive inside a function with non-simple parameter list throws a syntax error since ES2016.",
      wrap: "Wrap {{name}} in a function with 'use strict' directive.",
    },
  },
  "switch-colon-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce spacing around colons of switch statements",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/switch-colon-spacing",
    },
    schema: [
      {
        type: "object",
        properties: {
          before: {
            type: "boolean",
            default: false,
          },
          after: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "whitespace",
    messages: {
      expectedBefore: "Expected space(s) before this colon.",
      expectedAfter: "Expected space(s) after this colon.",
      unexpectedBefore: "Unexpected space(s) before this colon.",
      unexpectedAfter: "Unexpected space(s) after this colon.",
    },
  },
  "symbol-description": {
    type: "suggestion",
    docs: {
      description: "Require symbol descriptions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/symbol-description",
    },
    fixable: null,
    schema: [],
    messages: {
      expected: "Expected Symbol to have a description.",
    },
  },
  "template-curly-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Require or disallow spacing around embedded expressions of template strings",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/template-curly-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never"],
      },
    ],
    messages: {
      expectedBefore: "Expected space(s) before '}'.",
      expectedAfter: "Expected space(s) after '${'.",
      unexpectedBefore: "Unexpected space(s) before '}'.",
      unexpectedAfter: "Unexpected space(s) after '${'.",
    },
  },
  "template-tag-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Require or disallow spacing between template tags and their literals",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/template-tag-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never"],
      },
    ],
    messages: {
      unexpected: "Unexpected space between template tag and template literal.",
      missing: "Missing space between template tag and template literal.",
    },
  },
  "unicode-bom": {
    type: "layout",
    docs: {
      description: "Require or disallow Unicode byte order mark (BOM)",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/unicode-bom",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never"],
      },
    ],
    messages: {
      expected: "Expected Unicode BOM (Byte Order Mark).",
      unexpected: "Unexpected Unicode BOM (Byte Order Mark).",
    },
  },
  "use-isnan": {
    type: "problem",
    docs: {
      description: "Require calls to `isNaN()` when checking for `NaN`",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/use-isnan",
    },
    schema: [
      {
        type: "object",
        properties: {
          enforceForSwitchCase: {
            type: "boolean",
            default: true,
          },
          enforceForIndexOf: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      comparisonWithNaN: "Use the isNaN function to compare with NaN.",
      switchNaN:
        "'switch(NaN)' can never match a case clause. Use Number.isNaN instead of the switch.",
      caseNaN:
        "'case NaN' can never match. Use Number.isNaN before the switch.",
      indexOfNaN: "Array prototype method '{{ methodName }}' cannot find NaN.",
    },
  },
  "valid-jsdoc": {
    type: "suggestion",
    docs: {
      description: "Enforce valid JSDoc comments",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/valid-jsdoc",
    },
    schema: [
      {
        type: "object",
        properties: {
          prefer: {
            type: "object",
            additionalProperties: {
              type: "string",
            },
          },
          preferType: {
            type: "object",
            additionalProperties: {
              type: "string",
            },
          },
          requireReturn: {
            type: "boolean",
            default: true,
          },
          requireParamDescription: {
            type: "boolean",
            default: true,
          },
          requireReturnDescription: {
            type: "boolean",
            default: true,
          },
          matchDescription: {
            type: "string",
          },
          requireReturnType: {
            type: "boolean",
            default: true,
          },
          requireParamType: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      unexpectedTag:
        "Unexpected @{{title}} tag; function has no return statement.",
      expected: "Expected JSDoc for '{{name}}' but found '{{jsdocName}}'.",
      use: "Use @{{name}} instead.",
      useType: "Use '{{expectedTypeName}}' instead of '{{currentTypeName}}'.",
      syntaxError: "JSDoc syntax error.",
      missingBrace: "JSDoc type missing brace.",
      missingParamDesc: "Missing JSDoc parameter description for '{{name}}'.",
      missingParamType: "Missing JSDoc parameter type for '{{name}}'.",
      missingReturnType: "Missing JSDoc return type.",
      missingReturnDesc: "Missing JSDoc return description.",
      missingReturn: "Missing JSDoc @{{returns}} for function.",
      missingParam: "Missing JSDoc for parameter '{{name}}'.",
      duplicateParam: "Duplicate JSDoc parameter '{{name}}'.",
      unsatisfiedDesc: "JSDoc description does not satisfy the regex pattern.",
    },
    deprecated: true,
    replacedBy: [],
  },
  "valid-typeof": {
    type: "problem",
    docs: {
      description:
        "Enforce comparing `typeof` expressions against valid strings",
      recommended: true,
      url: "https://eslint.org/docs/latest/rules/valid-typeof",
    },
    hasSuggestions: true,
    schema: [
      {
        type: "object",
        properties: {
          requireStringLiterals: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      invalidValue: "Invalid typeof comparison value.",
      notString: "Typeof comparisons should be to string literals.",
      suggestString: 'Use `"{{type}}"` instead of `{{type}}`.',
    },
  },
  "vars-on-top": {
    type: "suggestion",
    docs: {
      description:
        "Require `var` declarations be placed at the top of their containing scope",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/vars-on-top",
    },
    schema: [],
    messages: {
      top: "All 'var' declarations must be at the top of the function scope.",
    },
  },
  "wrap-iife": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Require parentheses around immediate `function` invocations",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/wrap-iife",
    },
    schema: [
      {
        enum: ["outside", "inside", "any"],
      },
      {
        type: "object",
        properties: {
          functionPrototypeMethods: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      wrapInvocation: "Wrap an immediate function invocation in parentheses.",
      wrapExpression: "Wrap only the function expression in parens.",
      moveInvocation:
        "Move the invocation into the parens that contain the function.",
    },
  },
  "wrap-regex": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Require parenthesis around regex literals",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/wrap-regex",
    },
    schema: [],
    fixable: "code",
    messages: {
      requireParens:
        "Wrap the regexp literal in parens to disambiguate the slash.",
    },
  },
  "yield-star-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description:
        "Require or disallow spacing around the `*` in `yield*` expressions",
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/yield-star-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        oneOf: [
          {
            enum: ["before", "after", "both", "neither"],
          },
          {
            type: "object",
            properties: {
              before: {
                type: "boolean",
              },
              after: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      missingBefore: "Missing space before *.",
      missingAfter: "Missing space after *.",
      unexpectedBefore: "Unexpected space before *.",
      unexpectedAfter: "Unexpected space after *.",
    },
  },
  yoda: {
    type: "suggestion",
    docs: {
      description: 'Require or disallow "Yoda" conditions',
      recommended: false,
      url: "https://eslint.org/docs/latest/rules/yoda",
    },
    schema: [
      {
        enum: ["always", "never"],
      },
      {
        type: "object",
        properties: {
          exceptRange: {
            type: "boolean",
            default: false,
          },
          onlyEquality: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      expected:
        "Expected literal to be on the {{expectedSide}} side of {{operator}}.",
    },
  },
  "import/no-unresolved": {
    type: "problem",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-unresolved.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          commonjs: {
            type: "boolean",
          },
          amd: {
            type: "boolean",
          },
          esmodule: {
            type: "boolean",
          },
          ignore: {
            type: "array",
            minItems: 1,
            items: {
              type: "string",
            },
            uniqueItems: true,
          },
          caseSensitive: {
            type: "boolean",
            default: true,
          },
          caseSensitiveStrict: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/named": {
    type: "problem",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/named.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          commonjs: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/default": {
    type: "problem",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/default.md",
    },
    schema: [],
  },
  "import/namespace": {
    type: "problem",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/namespace.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowComputed: {
            description:
              "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/no-namespace": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-namespace.md",
    },
    fixable: "code",
    schema: [
      {
        type: "object",
        properties: {
          ignore: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
          },
        },
      },
    ],
  },
  "import/export": {
    type: "problem",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/export.md",
    },
    schema: [],
  },
  "import/no-mutable-exports": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-mutable-exports.md",
    },
    schema: [],
  },
  "import/extensions": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/extensions.md",
    },
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["always", "ignorePackages", "never"],
            },
          ],
          additionalItems: false,
        },
        {
          type: "array",
          items: [
            {
              enum: ["always", "ignorePackages", "never"],
            },
            {
              type: "object",
              properties: {
                pattern: {
                  type: "object",
                  patternProperties: {
                    ".*": {
                      enum: ["always", "ignorePackages", "never"],
                    },
                  },
                },
                ignorePackages: {
                  type: "boolean",
                },
              },
            },
          ],
          additionalItems: false,
        },
        {
          type: "array",
          items: [
            {
              type: "object",
              properties: {
                pattern: {
                  type: "object",
                  patternProperties: {
                    ".*": {
                      enum: ["always", "ignorePackages", "never"],
                    },
                  },
                },
                ignorePackages: {
                  type: "boolean",
                },
              },
            },
          ],
          additionalItems: false,
        },
        {
          type: "array",
          items: [
            {
              type: "object",
              patternProperties: {
                ".*": {
                  enum: ["always", "ignorePackages", "never"],
                },
              },
            },
          ],
          additionalItems: false,
        },
        {
          type: "array",
          items: [
            {
              enum: ["always", "ignorePackages", "never"],
            },
            {
              type: "object",
              patternProperties: {
                ".*": {
                  enum: ["always", "ignorePackages", "never"],
                },
              },
            },
          ],
          additionalItems: false,
        },
      ],
    },
  },
  "import/no-restricted-paths": {
    type: "problem",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-restricted-paths.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          zones: {
            type: "array",
            minItems: 1,
            items: {
              type: "object",
              properties: {
                target: {
                  type: "string",
                },
                from: {
                  type: "string",
                },
                except: {
                  type: "array",
                  items: {
                    type: "string",
                  },
                  uniqueItems: true,
                },
                message: {
                  type: "string",
                },
              },
              additionalProperties: false,
            },
          },
          basePath: {
            type: "string",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/no-internal-modules": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-internal-modules.md",
    },
    schema: [
      {
        oneOf: [
          {
            type: "object",
            properties: {
              allow: {
                type: "array",
                items: {
                  type: "string",
                },
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              forbid: {
                type: "array",
                items: {
                  type: "string",
                },
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
  },
  "import/group-exports": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/group-exports.md",
    },
  },
  "import/no-relative-packages": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-relative-packages.md",
    },
    fixable: "code",
    schema: [
      {
        type: "object",
        properties: {
          commonjs: {
            type: "boolean",
          },
          amd: {
            type: "boolean",
          },
          esmodule: {
            type: "boolean",
          },
          ignore: {
            type: "array",
            minItems: 1,
            items: {
              type: "string",
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/no-relative-parent-imports": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-relative-parent-imports.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          commonjs: {
            type: "boolean",
          },
          amd: {
            type: "boolean",
          },
          esmodule: {
            type: "boolean",
          },
          ignore: {
            type: "array",
            minItems: 1,
            items: {
              type: "string",
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/no-self-import": {
    type: "problem",
    docs: {
      description: "Forbid a module from importing itself",
      recommended: true,
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-self-import.md",
    },
    schema: [],
  },
  "import/no-cycle": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-cycle.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          commonjs: {
            type: "boolean",
          },
          amd: {
            type: "boolean",
          },
          esmodule: {
            type: "boolean",
          },
          ignore: {
            type: "array",
            minItems: 1,
            items: {
              type: "string",
            },
            uniqueItems: true,
          },
          maxDepth: {
            oneOf: [
              {
                description: "maximum dependency depth to traverse",
                type: "integer",
                minimum: 1,
              },
              {
                enum: ["∞"],
                type: "string",
              },
            ],
          },
          ignoreExternal: {
            description: "ignore external modules",
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/no-named-default": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-named-default.md",
    },
    schema: [],
  },
  "import/no-named-as-default": {
    type: "problem",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-named-as-default.md",
    },
    schema: [],
  },
  "import/no-named-as-default-member": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-named-as-default-member.md",
    },
    schema: [],
  },
  "import/no-anonymous-default-export": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-anonymous-default-export.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowArray: {
            description: "If `false`, will report default export of an array",
            type: "boolean",
          },
          allowArrowFunction: {
            description:
              "If `false`, will report default export of an arrow function",
            type: "boolean",
          },
          allowCallExpression: {
            description:
              "If `false`, will report default export of a function call",
            type: "boolean",
          },
          allowAnonymousClass: {
            description:
              "If `false`, will report default export of an anonymous class",
            type: "boolean",
          },
          allowAnonymousFunction: {
            description:
              "If `false`, will report default export of an anonymous function",
            type: "boolean",
          },
          allowLiteral: {
            description: "If `false`, will report default export of a literal",
            type: "boolean",
          },
          allowObject: {
            description:
              "If `false`, will report default export of an object expression",
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/no-unused-modules": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-unused-modules.md",
    },
    schema: [
      {
        properties: {
          src: {
            description: "files/paths to be analyzed (only for unused exports)",
            type: "array",
            minItems: 1,
            items: {
              type: "string",
              minLength: 1,
            },
          },
          ignoreExports: {
            description:
              "files/paths for which unused exports will not be reported (e.g module entry points)",
            type: "array",
            minItems: 1,
            items: {
              type: "string",
              minLength: 1,
            },
          },
          missingExports: {
            description: "report modules without any exports",
            type: "boolean",
          },
          unusedExports: {
            description: "report exports without any usage",
            type: "boolean",
          },
        },
        not: {
          properties: {
            unusedExports: {
              enum: [false],
            },
            missingExports: {
              enum: [false],
            },
          },
        },
        anyOf: [
          {
            not: {
              properties: {
                unusedExports: {
                  enum: [true],
                },
              },
            },
            required: ["missingExports"],
          },
          {
            not: {
              properties: {
                missingExports: {
                  enum: [true],
                },
              },
            },
            required: ["unusedExports"],
          },
          {
            properties: {
              unusedExports: {
                enum: [true],
              },
            },
            required: ["unusedExports"],
          },
          {
            properties: {
              missingExports: {
                enum: [true],
              },
            },
            required: ["missingExports"],
          },
        ],
      },
    ],
  },
  "import/no-commonjs": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-commonjs.md",
    },
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["allow-primitive-modules"],
            },
          ],
          additionalItems: false,
        },
        {
          type: "array",
          items: [
            {
              type: "object",
              properties: {
                allowPrimitiveModules: {
                  type: "boolean",
                },
                allowRequire: {
                  type: "boolean",
                },
                allowConditionalRequire: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          additionalItems: false,
        },
      ],
    },
  },
  "import/no-amd": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-amd.md",
    },
    schema: [],
  },
  "import/no-duplicates": {
    type: "problem",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-duplicates.md",
    },
    fixable: "code",
    schema: [
      {
        type: "object",
        properties: {
          considerQueryString: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/first": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/first.md",
    },
    fixable: "code",
    schema: [
      {
        type: "string",
        enum: ["absolute-first", "disable-absolute-first"],
      },
    ],
  },
  "import/max-dependencies": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/max-dependencies.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          max: {
            type: "number",
          },
          ignoreTypeImports: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/no-extraneous-dependencies": {
    type: "problem",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-extraneous-dependencies.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          devDependencies: {
            type: ["boolean", "array"],
          },
          optionalDependencies: {
            type: ["boolean", "array"],
          },
          peerDependencies: {
            type: ["boolean", "array"],
          },
          bundledDependencies: {
            type: ["boolean", "array"],
          },
          packageDir: {
            type: ["string", "array"],
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/no-absolute-path": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-absolute-path.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          commonjs: {
            type: "boolean",
          },
          amd: {
            type: "boolean",
          },
          esmodule: {
            type: "boolean",
          },
          ignore: {
            type: "array",
            minItems: 1,
            items: {
              type: "string",
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/no-nodejs-modules": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-nodejs-modules.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          allow: {
            type: "array",
            uniqueItems: true,
            items: {
              type: "string",
            },
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/no-webpack-loader-syntax": {
    type: "problem",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-webpack-loader-syntax.md",
    },
    schema: [],
  },
  "import/order": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/order.md",
    },
    fixable: "code",
    schema: [
      {
        type: "object",
        properties: {
          groups: {
            type: "array",
          },
          pathGroupsExcludedImportTypes: {
            type: "array",
          },
          pathGroups: {
            type: "array",
            items: {
              type: "object",
              properties: {
                pattern: {
                  type: "string",
                },
                patternOptions: {
                  type: "object",
                },
                group: {
                  type: "string",
                  enum: [
                    "builtin",
                    "external",
                    "internal",
                    "unknown",
                    "parent",
                    "sibling",
                    "index",
                    "object",
                    "type",
                  ],
                },
                position: {
                  type: "string",
                  enum: ["after", "before"],
                },
              },
              required: ["pattern", "group"],
            },
          },
          "newlines-between": {
            enum: ["ignore", "always", "always-and-inside-groups", "never"],
          },
          alphabetize: {
            type: "object",
            properties: {
              caseInsensitive: {
                type: "boolean",
                default: false,
              },
              order: {
                enum: ["ignore", "asc", "desc"],
                default: "ignore",
              },
            },
            additionalProperties: false,
          },
          warnOnUnassignedImports: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/newline-after-import": {
    type: "layout",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/newline-after-import.md",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          count: {
            type: "integer",
            minimum: 1,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/prefer-default-export": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/prefer-default-export.md",
    },
    schema: [],
  },
  "import/no-default-export": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-default-export.md",
    },
    schema: [],
  },
  "import/no-named-export": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-named-export.md",
    },
    schema: [],
  },
  "import/no-dynamic-require": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-dynamic-require.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          esmodule: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/unambiguous": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/unambiguous.md",
    },
    schema: [],
  },
  "import/no-unassigned-import": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-unassigned-import.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          devDependencies: {
            type: ["boolean", "array"],
          },
          optionalDependencies: {
            type: ["boolean", "array"],
          },
          peerDependencies: {
            type: ["boolean", "array"],
          },
          allow: {
            type: "array",
            items: {
              type: "string",
            },
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/no-useless-path-segments": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-useless-path-segments.md",
    },
    fixable: "code",
    schema: [
      {
        type: "object",
        properties: {
          commonjs: {
            type: "boolean",
          },
          noUselessIndex: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/dynamic-import-chunkname": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/dynamic-import-chunkname.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          importFunctions: {
            type: "array",
            uniqueItems: true,
            items: {
              type: "string",
            },
          },
          webpackChunknameFormat: {
            type: "string",
          },
        },
      },
    ],
  },
  "import/no-import-module-exports": {
    type: "problem",
    docs: {
      description: "Disallow import statements with module.exports",
      category: "Best Practices",
      recommended: true,
    },
    fixable: "code",
    schema: [
      {
        type: "object",
        properties: {
          exceptions: {
            type: "array",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "import/exports-last": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/exports-last.md",
    },
    schema: [],
  },
  "import/no-deprecated": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-deprecated.md",
    },
    schema: [],
  },
  "import/imports-first": {
    type: "suggestion",
    docs: {
      url: "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md",
    },
    fixable: "code",
    schema: [
      {
        type: "string",
        enum: ["absolute-first", "disable-absolute-first"],
      },
    ],
    deprecated: true,
  },
  "react/boolean-prop-naming": {
    docs: {
      category: "Stylistic Issues",
      description: "Enforces consistent naming for boolean props",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/boolean-prop-naming.md",
    },
    messages: {
      patternMismatch:
        "Prop name ({{propName}}) doesn't match rule ({{pattern}})",
    },
    schema: [
      {
        additionalProperties: false,
        properties: {
          propTypeNames: {
            items: {
              type: "string",
            },
            minItems: 1,
            type: "array",
            uniqueItems: true,
          },
          rule: {
            default: "^(is|has)[A-Z]([A-Za-z0-9]?)+",
            minLength: 1,
            type: "string",
          },
          message: {
            minLength: 1,
            type: "string",
          },
          validateNested: {
            default: false,
            type: "boolean",
          },
        },
        type: "object",
      },
    ],
  },
  "react/button-has-type": {
    docs: {
      description:
        "Disallow usage of `button` elements without an explicit `type` attribute",
      category: "Possible Errors",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/button-has-type.md",
    },
    messages: {
      missingType: "Missing an explicit type attribute for button",
      complexType:
        "The button type attribute must be specified by a static string or a trivial ternary expression",
      invalidValue: '"{{value}}" is an invalid value for button type attribute',
      forbiddenValue:
        '"{{value}}" is an invalid value for button type attribute',
    },
    schema: [
      {
        type: "object",
        properties: {
          button: {
            default: true,
            type: "boolean",
          },
          submit: {
            default: true,
            type: "boolean",
          },
          reset: {
            default: true,
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/default-props-match-prop-types": {
    docs: {
      description:
        "Enforce all defaultProps have a corresponding non-required PropType",
      category: "Best Practices",
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/default-props-match-prop-types.md",
    },
    messages: {
      requiredHasDefault:
        'defaultProp "{{name}}" defined for isRequired propType.',
      defaultHasNoType:
        'defaultProp "{{name}}" has no corresponding propTypes declaration.',
    },
    schema: [
      {
        type: "object",
        properties: {
          allowRequiredDefaults: {
            default: false,
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/destructuring-assignment": {
    docs: {
      description:
        "Enforce consistent usage of destructuring assignment of props, state, and context",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/destructuring-assignment.md",
    },
    fixable: "code",
    messages: {
      noDestructPropsInSFCArg:
        "Must never use destructuring props assignment in SFC argument",
      noDestructContextInSFCArg:
        "Must never use destructuring context assignment in SFC argument",
      noDestructAssignment: "Must never use destructuring {{type}} assignment",
      useDestructAssignment: "Must use destructuring {{type}} assignment",
      destructureInSignature:
        "Must destructure props in the function signature.",
    },
    schema: [
      {
        type: "string",
        enum: ["always", "never"],
      },
      {
        type: "object",
        properties: {
          ignoreClassFields: {
            type: "boolean",
          },
          destructureInSignature: {
            type: "string",
            enum: ["always", "ignore"],
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/display-name": {
    docs: {
      description:
        "Disallow missing displayName in a React component definition",
      category: "Best Practices",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/display-name.md",
    },
    messages: {
      noDisplayName: "Component definition is missing display name",
      noContextDisplayName: "Context definition is missing display name",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreTranspilerName: {
            type: "boolean",
          },
          checkContextObjects: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/forbid-component-props": {
    docs: {
      description: "Disallow certain props on components",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-component-props.md",
    },
    messages: {
      propIsForbidden: 'Prop "{{prop}}" is forbidden on Components',
    },
    schema: [
      {
        type: "object",
        properties: {
          forbid: {
            type: "array",
            items: {
              anyOf: [
                {
                  type: "string",
                },
                {
                  type: "object",
                  properties: {
                    propName: {
                      type: "string",
                    },
                    allowedFor: {
                      type: "array",
                      uniqueItems: true,
                      items: {
                        type: "string",
                      },
                    },
                    message: {
                      type: "string",
                    },
                  },
                  additionalProperties: false,
                },
                {
                  type: "object",
                  properties: {
                    propName: {
                      type: "string",
                    },
                    disallowedFor: {
                      type: "array",
                      uniqueItems: true,
                      minItems: 1,
                      items: {
                        type: "string",
                      },
                    },
                    message: {
                      type: "string",
                    },
                  },
                  required: ["disallowedFor"],
                  additionalProperties: false,
                },
              ],
            },
          },
        },
      },
    ],
  },
  "react/forbid-dom-props": {
    docs: {
      description: "Disallow certain props on DOM Nodes",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-dom-props.md",
    },
    messages: {
      propIsForbidden: 'Prop "{{prop}}" is forbidden on DOM Nodes',
    },
    schema: [
      {
        type: "object",
        properties: {
          forbid: {
            type: "array",
            items: {
              anyOf: [
                {
                  type: "string",
                },
                {
                  type: "object",
                  properties: {
                    propName: {
                      type: "string",
                    },
                    disallowedFor: {
                      type: "array",
                      uniqueItems: true,
                      items: {
                        type: "string",
                      },
                    },
                    message: {
                      type: "string",
                    },
                  },
                },
              ],
              minLength: 1,
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/forbid-elements": {
    docs: {
      description: "Disallow certain elements",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-elements.md",
    },
    messages: {
      forbiddenElement: "<{{element}}> is forbidden",
      forbiddenElement_message: "<{{element}}> is forbidden, {{message}}",
    },
    schema: [
      {
        type: "object",
        properties: {
          forbid: {
            type: "array",
            items: {
              anyOf: [
                {
                  type: "string",
                },
                {
                  type: "object",
                  properties: {
                    element: {
                      type: "string",
                    },
                    message: {
                      type: "string",
                    },
                  },
                  required: ["element"],
                  additionalProperties: false,
                },
              ],
            },
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/forbid-foreign-prop-types": {
    docs: {
      description: "Disallow using another component's propTypes",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-foreign-prop-types.md",
    },
    messages: {
      forbiddenPropType:
        "Using propTypes from another component is not safe because they may be removed in production builds",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowInPropTypes: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/forbid-prop-types": {
    docs: {
      description: "Disallow certain propTypes",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-prop-types.md",
    },
    messages: {
      forbiddenPropType: 'Prop type "{{target}}" is forbidden',
    },
    schema: [
      {
        type: "object",
        properties: {
          forbid: {
            type: "array",
            items: {
              type: "string",
            },
          },
          checkContextTypes: {
            type: "boolean",
          },
          checkChildContextTypes: {
            type: "boolean",
          },
        },
        additionalProperties: true,
      },
    ],
  },
  "react/function-component-definition": {
    docs: {
      description: "Enforce a specific function type for function components",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/function-component-definition.md",
    },
    fixable: "code",
    messages: {
      "function-declaration":
        "Function component is not a function declaration",
      "function-expression": "Function component is not a function expression",
      "arrow-function": "Function component is not an arrow function",
    },
    schema: [
      {
        type: "object",
        properties: {
          namedComponents: {
            anyOf: [
              {
                enum: [
                  "function-declaration",
                  "arrow-function",
                  "function-expression",
                ],
              },
              {
                type: "array",
                items: {
                  type: "string",
                  enum: [
                    "function-declaration",
                    "arrow-function",
                    "function-expression",
                  ],
                },
              },
            ],
          },
          unnamedComponents: {
            anyOf: [
              {
                enum: ["arrow-function", "function-expression"],
              },
              {
                type: "array",
                items: {
                  type: "string",
                  enum: ["arrow-function", "function-expression"],
                },
              },
            ],
          },
        },
      },
    ],
  },
  "react/hook-use-state": {
    docs: {
      description:
        "Ensure destructuring and symmetric naming of useState hook value and setter variables",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/hook-use-state.md",
    },
    messages: {
      useStateErrorMessage:
        "useState call is not destructured into value + setter pair",
      useStateErrorMessageOrAddOption:
        'useState call is not destructured into value + setter pair (you can allow destructuring by enabling "allowDestructuredState" option)',
      suggestPair: "Destructure useState call into value + setter pair",
      suggestMemo: "Replace useState call with useMemo",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowDestructuredState: {
            default: false,
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    type: "suggestion",
    hasSuggestions: true,
  },
  "react/iframe-missing-sandbox": {
    docs: {
      description: "Enforce sandbox attribute on iframe elements",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/iframe-missing-sandbox.md",
    },
    schema: [],
    messages: {
      attributeMissing: "An iframe element is missing a sandbox attribute",
      invalidValue:
        'An iframe element defines a sandbox attribute with invalid value "{{ value }}"',
      invalidCombination:
        "An iframe element defines a sandbox attribute with both allow-scripts and allow-same-origin which is invalid",
    },
  },
  "react/jsx-boolean-value": {
    docs: {
      description: "Enforce boolean attributes notation in JSX",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-boolean-value.md",
    },
    fixable: "code",
    messages: {
      omitBoolean:
        "Value must be omitted for boolean attributes{{exceptionsMessage}}",
      omitBoolean_noMessage: "Value must be omitted for boolean attributes",
      setBoolean:
        "Value must be set for boolean attributes{{exceptionsMessage}}",
      setBoolean_noMessage: "Value must be set for boolean attributes",
    },
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["always", "never"],
            },
          ],
          additionalItems: false,
        },
        {
          type: "array",
          items: [
            {
              enum: ["always"],
            },
            {
              type: "object",
              additionalProperties: false,
              properties: {
                never: {
                  type: "array",
                  items: {
                    type: "string",
                    minLength: 1,
                  },
                  uniqueItems: true,
                },
              },
            },
          ],
          additionalItems: false,
        },
        {
          type: "array",
          items: [
            {
              enum: ["never"],
            },
            {
              type: "object",
              additionalProperties: false,
              properties: {
                always: {
                  type: "array",
                  items: {
                    type: "string",
                    minLength: 1,
                  },
                  uniqueItems: true,
                },
              },
            },
          ],
          additionalItems: false,
        },
      ],
    },
  },
  "react/jsx-child-element-spacing": {
    docs: {
      description:
        "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-child-element-spacing.md",
    },
    fixable: null,
    messages: {
      spacingAfterPrev: "Ambiguous spacing after previous element {{element}}",
      spacingBeforeNext: "Ambiguous spacing before next element {{element}}",
    },
    schema: [],
  },
  "react/jsx-closing-bracket-location": {
    docs: {
      description: "Enforce closing bracket location in JSX",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-bracket-location.md",
    },
    fixable: "code",
    messages: {
      bracketLocation: "The closing bracket must be {{location}}{{details}}",
    },
    schema: [
      {
        anyOf: [
          {
            enum: [
              "after-props",
              "props-aligned",
              "tag-aligned",
              "line-aligned",
            ],
          },
          {
            type: "object",
            properties: {
              location: {
                enum: [
                  "after-props",
                  "props-aligned",
                  "tag-aligned",
                  "line-aligned",
                ],
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              nonEmpty: {
                enum: [
                  "after-props",
                  "props-aligned",
                  "tag-aligned",
                  "line-aligned",
                  false,
                ],
              },
              selfClosing: {
                enum: [
                  "after-props",
                  "props-aligned",
                  "tag-aligned",
                  "line-aligned",
                  false,
                ],
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
  },
  "react/jsx-closing-tag-location": {
    docs: {
      description: "Enforce closing tag location for multiline JSX",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-tag-location.md",
    },
    fixable: "whitespace",
    messages: {
      onOwnLine:
        "Closing tag of a multiline JSX expression must be on its own line.",
      matchIndent: "Expected closing tag to match indentation of opening.",
    },
  },
  "react/jsx-curly-spacing": {
    docs: {
      description:
        "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-spacing.md",
    },
    fixable: "code",
    messages: {
      noNewlineAfter: "There should be no newline after '{{token}}'",
      noNewlineBefore: "There should be no newline before '{{token}}'",
      noSpaceAfter: "There should be no space after '{{token}}'",
      noSpaceBefore: "There should be no space before '{{token}}'",
      spaceNeededAfter: "A space is required after '{{token}}'",
      spaceNeededBefore: "A space is required before '{{token}}'",
    },
    schema: {
      definitions: {
        basicConfig: {
          type: "object",
          properties: {
            when: {
              enum: ["always", "never"],
            },
            allowMultiline: {
              type: "boolean",
            },
            spacing: {
              type: "object",
              properties: {
                objectLiterals: {
                  enum: ["always", "never"],
                },
              },
            },
          },
        },
        basicConfigOrBoolean: {
          anyOf: [
            {
              $ref: "#/definitions/basicConfig",
            },
            {
              type: "boolean",
            },
          ],
        },
      },
      type: "array",
      items: [
        {
          anyOf: [
            {
              allOf: [
                {
                  $ref: "#/definitions/basicConfig",
                },
                {
                  type: "object",
                  properties: {
                    attributes: {
                      $ref: "#/definitions/basicConfigOrBoolean",
                    },
                    children: {
                      $ref: "#/definitions/basicConfigOrBoolean",
                    },
                  },
                },
              ],
            },
            {
              enum: ["always", "never"],
            },
          ],
        },
        {
          type: "object",
          properties: {
            allowMultiline: {
              type: "boolean",
            },
            spacing: {
              type: "object",
              properties: {
                objectLiterals: {
                  enum: ["always", "never"],
                },
              },
            },
          },
          additionalProperties: false,
        },
      ],
    },
  },
  "react/jsx-curly-newline": {
    type: "layout",
    docs: {
      description:
        "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-newline.md",
    },
    fixable: "whitespace",
    schema: [
      {
        anyOf: [
          {
            enum: ["consistent", "never"],
          },
          {
            type: "object",
            properties: {
              singleline: {
                enum: ["consistent", "require", "forbid"],
              },
              multiline: {
                enum: ["consistent", "require", "forbid"],
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      expectedBefore: "Expected newline before '}'.",
      expectedAfter: "Expected newline after '{'.",
      unexpectedBefore: "Unexpected newline before '}'.",
      unexpectedAfter: "Unexpected newline after '{'.",
    },
  },
  "react/jsx-equals-spacing": {
    docs: {
      description:
        "Enforce or disallow spaces around equal signs in JSX attributes",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-equals-spacing.md",
    },
    fixable: "code",
    messages: {
      noSpaceBefore: "There should be no space before '='",
      noSpaceAfter: "There should be no space after '='",
      needSpaceBefore: "A space is required before '='",
      needSpaceAfter: "A space is required after '='",
    },
    schema: [
      {
        enum: ["always", "never"],
      },
    ],
  },
  "react/jsx-filename-extension": {
    docs: {
      description: "Disallow file extensions that may contain JSX",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-filename-extension.md",
    },
    messages: {
      noJSXWithExtension: "JSX not allowed in files with extension '{{ext}}'",
      extensionOnlyForJSX:
        "Only files containing JSX may use the extension '{{ext}}'",
    },
    schema: [
      {
        type: "object",
        properties: {
          allow: {
            enum: ["always", "as-needed"],
          },
          extensions: {
            type: "array",
            items: {
              type: "string",
            },
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-first-prop-new-line": {
    docs: {
      description: "Enforce proper position of the first property in JSX",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-first-prop-new-line.md",
    },
    fixable: "code",
    messages: {
      propOnNewLine: "Property should be placed on a new line",
      propOnSameLine:
        "Property should be placed on the same line as the component declaration",
    },
    schema: [
      {
        enum: [
          "always",
          "never",
          "multiline",
          "multiline-multiprop",
          "multiprop",
        ],
      },
    ],
  },
  "react/jsx-handler-names": {
    docs: {
      description: "Enforce event handler naming conventions in JSX",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-handler-names.md",
    },
    messages: {
      badHandlerName:
        "Handler function for {{propKey}} prop key must be a camelCase name beginning with '{{handlerPrefix}}' only",
      badPropKey:
        "Prop key for {{propValue}} must begin with '{{handlerPropPrefix}}'",
    },
    schema: [
      {
        anyOf: [
          {
            type: "object",
            properties: {
              eventHandlerPrefix: {
                type: "string",
              },
              eventHandlerPropPrefix: {
                type: "string",
              },
              checkLocalVariables: {
                type: "boolean",
              },
              checkInlineFunction: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              eventHandlerPrefix: {
                type: "string",
              },
              eventHandlerPropPrefix: {
                type: "boolean",
                enum: [false],
              },
              checkLocalVariables: {
                type: "boolean",
              },
              checkInlineFunction: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              eventHandlerPrefix: {
                type: "boolean",
                enum: [false],
              },
              eventHandlerPropPrefix: {
                type: "string",
              },
              checkLocalVariables: {
                type: "boolean",
              },
              checkInlineFunction: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              checkLocalVariables: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              checkInlineFunction: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
  },
  "react/jsx-indent": {
    docs: {
      description: "Enforce JSX indentation",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent.md",
    },
    fixable: "whitespace",
    messages: {
      wrongIndent:
        "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.",
    },
    schema: [
      {
        anyOf: [
          {
            enum: ["tab"],
          },
          {
            type: "integer",
          },
        ],
      },
      {
        type: "object",
        properties: {
          checkAttributes: {
            type: "boolean",
          },
          indentLogicalExpressions: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-indent-props": {
    docs: {
      description: "Enforce props indentation in JSX",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent-props.md",
    },
    fixable: "code",
    messages: {
      wrongIndent:
        "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.",
    },
    schema: [
      {
        anyOf: [
          {
            enum: ["tab", "first"],
          },
          {
            type: "integer",
          },
          {
            type: "object",
            properties: {
              indentMode: {
                anyOf: [
                  {
                    enum: ["tab", "first"],
                  },
                  {
                    type: "integer",
                  },
                ],
              },
              ignoreTernaryOperator: {
                type: "boolean",
              },
            },
          },
        ],
      },
    ],
  },
  "react/jsx-key": {
    docs: {
      description:
        "Disallow missing `key` props in iterators/collection literals",
      category: "Possible Errors",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-key.md",
    },
    messages: {
      missingIterKey: 'Missing "key" prop for element in iterator',
      missingIterKeyUsePrag:
        'Missing "key" prop for element in iterator. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead',
      missingArrayKey: 'Missing "key" prop for element in array',
      missingArrayKeyUsePrag:
        'Missing "key" prop for element in array. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead',
      keyBeforeSpread:
        "`key` prop must be placed before any `{...spread}, to avoid conflicting with React’s new JSX transform: https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html`",
      nonUniqueKeys: "`key` prop must be unique",
    },
    schema: [
      {
        type: "object",
        properties: {
          checkFragmentShorthand: {
            type: "boolean",
            default: false,
          },
          checkKeyMustBeforeSpread: {
            type: "boolean",
            default: false,
          },
          warnOnDuplicates: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-max-depth": {
    docs: {
      description: "Enforce JSX maximum depth",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-depth.md",
    },
    messages: {
      wrongDepth:
        "Expected the depth of nested jsx elements to be <= {{needed}}, but found {{found}}.",
    },
    schema: [
      {
        type: "object",
        properties: {
          max: {
            type: "integer",
            minimum: 0,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-max-props-per-line": {
    docs: {
      description: "Enforce maximum of props on a single line in JSX",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-props-per-line.md",
    },
    fixable: "code",
    messages: {
      newLine: "Prop `{{prop}}` must be placed on a new line",
    },
    schema: [
      {
        anyOf: [
          {
            type: "object",
            properties: {
              maximum: {
                type: "object",
                properties: {
                  single: {
                    type: "integer",
                    minimum: 1,
                  },
                  multi: {
                    type: "integer",
                    minimum: 1,
                  },
                },
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              maximum: {
                type: "number",
                minimum: 1,
              },
              when: {
                type: "string",
                enum: ["always", "multiline"],
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
  },
  "react/jsx-newline": {
    docs: {
      description:
        "Require or prevent a new line after jsx elements and expressions.",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-newline.md",
    },
    fixable: "code",
    messages: {
      require: "JSX element should start in a new line",
      prevent: "JSX element should not start in a new line",
      allowMultilines: "Multiline JSX elements should start in a new line",
    },
    schema: [
      {
        type: "object",
        properties: {
          prevent: {
            default: false,
            type: "boolean",
          },
          allowMultilines: {
            default: false,
            type: "boolean",
          },
        },
        additionalProperties: false,
        if: {
          properties: {
            allowMultilines: {
              const: true,
            },
          },
        },
        then: {
          properties: {
            prevent: {
              const: true,
            },
          },
          required: ["prevent"],
        },
      },
    ],
  },
  "react/jsx-no-bind": {
    docs: {
      description: "Disallow `.bind()` or arrow functions in JSX props",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-bind.md",
    },
    messages: {
      bindCall: "JSX props should not use .bind()",
      arrowFunc: "JSX props should not use arrow functions",
      bindExpression: "JSX props should not use ::",
      func: "JSX props should not use functions",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowArrowFunctions: {
            default: false,
            type: "boolean",
          },
          allowBind: {
            default: false,
            type: "boolean",
          },
          allowFunctions: {
            default: false,
            type: "boolean",
          },
          ignoreRefs: {
            default: false,
            type: "boolean",
          },
          ignoreDOMComponents: {
            default: false,
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-no-comment-textnodes": {
    docs: {
      description: "Disallow comments from being inserted as text nodes",
      category: "Possible Errors",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-comment-textnodes.md",
    },
    messages: {
      putCommentInBraces:
        "Comments inside children section of tag should be placed inside braces",
    },
    schema: [],
  },
  "react/jsx-no-constructed-context-values": {
    docs: {
      description:
        "Disallows JSX context provider values from taking values that will cause needless rerenders",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-constructed-context-values.md",
    },
    messages: {
      withIdentifierMsg:
        "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
      withIdentifierMsgFunc:
        "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useCallback hook.",
      defaultMsg:
        "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
      defaultMsgFunc:
        "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useCallback hook.",
    },
    schema: {},
  },
  "react/jsx-no-duplicate-props": {
    docs: {
      description: "Disallow duplicate properties in JSX",
      category: "Possible Errors",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-duplicate-props.md",
    },
    messages: {
      noDuplicateProps: "No duplicate props allowed",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreCase: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-no-leaked-render": {
    docs: {
      description: "Disallow problematic leaked values from being rendered",
      category: "Possible Errors",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-leaked-render.md",
    },
    messages: {
      noPotentialLeakedRender:
        "Potential leaked value that might cause unintentionally rendered values or rendering crashes",
    },
    fixable: "code",
    schema: [
      {
        type: "object",
        properties: {
          validStrategies: {
            type: "array",
            items: {
              enum: ["ternary", "coerce"],
            },
            uniqueItems: true,
            default: ["ternary", "coerce"],
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-no-literals": {
    docs: {
      description: "Disallow usage of string literals in JSX",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-literals.md",
    },
    messages: {
      invalidPropValue: 'Invalid prop value: "{{text}}"',
      noStringsInAttributes: 'Strings not allowed in attributes: "{{text}}"',
      noStringsInJSX: 'Strings not allowed in JSX files: "{{text}}"',
      literalNotInJSXExpression:
        'Missing JSX expression container around literal string: "{{text}}"',
    },
    schema: [
      {
        type: "object",
        properties: {
          noStrings: {
            type: "boolean",
          },
          allowedStrings: {
            type: "array",
            uniqueItems: true,
            items: {
              type: "string",
            },
          },
          ignoreProps: {
            type: "boolean",
          },
          noAttributeStrings: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-no-script-url": {
    docs: {
      description: "Disallow usage of `javascript:` URLs",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-script-url.md",
    },
    messages: {
      noScriptURL:
        "A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML, try using dangerouslySetInnerHTML instead.",
    },
    schema: [
      {
        type: "array",
        uniqueItems: true,
        items: {
          type: "object",
          properties: {
            name: {
              type: "string",
            },
            props: {
              type: "array",
              items: {
                type: "string",
                uniqueItems: true,
              },
            },
          },
          required: ["name", "props"],
          additionalProperties: false,
        },
      },
    ],
  },
  "react/jsx-no-target-blank": {
    fixable: "code",
    docs: {
      description:
        'Disallow `target="_blank"` attribute without `rel="noreferrer"`',
      category: "Best Practices",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md",
    },
    messages: {
      noTargetBlankWithoutNoreferrer:
        'Using target="_blank" without rel="noreferrer" (which implies rel="noopener") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations',
      noTargetBlankWithoutNoopener:
        'Using target="_blank" without rel="noreferrer" or rel="noopener" (the former implies the latter and is preferred due to wider support) is a security risk: see https://mathiasbynens.github.io/rel-noopener/#recommendations',
    },
    schema: [
      {
        type: "object",
        properties: {
          allowReferrer: {
            type: "boolean",
          },
          enforceDynamicLinks: {
            enum: ["always", "never"],
          },
          warnOnSpreadAttributes: {
            type: "boolean",
          },
          links: {
            type: "boolean",
            default: true,
          },
          forms: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-no-useless-fragment": {
    type: "suggestion",
    fixable: "code",
    docs: {
      description: "Disallow unnecessary fragments",
      category: "Possible Errors",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-useless-fragment.md",
    },
    messages: {
      NeedsMoreChildren:
        "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
      ChildOfHtmlElement: "Passing a fragment to an HTML element is useless.",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowExpressions: {
            type: "boolean",
          },
        },
      },
    ],
  },
  "react/jsx-one-expression-per-line": {
    docs: {
      description: "Require one JSX element per line",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-one-expression-per-line.md",
    },
    fixable: "whitespace",
    messages: {
      moveToNewLine: "`{{descriptor}}` must be placed on a new line",
    },
    schema: [
      {
        type: "object",
        properties: {
          allow: {
            enum: ["none", "literal", "single-child"],
          },
        },
        default: {
          allow: "none",
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-no-undef": {
    docs: {
      description: "Disallow undeclared variables in JSX",
      category: "Possible Errors",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-undef.md",
    },
    messages: {
      undefined: "'{{identifier}}' is not defined.",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowGlobals: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-curly-brace-presence": {
    docs: {
      description:
        "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-brace-presence.md",
    },
    fixable: "code",
    messages: {
      unnecessaryCurly: "Curly braces are unnecessary here.",
      missingCurly: "Need to wrap this literal in a JSX expression.",
    },
    schema: [
      {
        anyOf: [
          {
            type: "object",
            properties: {
              props: {
                enum: ["always", "never", "ignore"],
              },
              children: {
                enum: ["always", "never", "ignore"],
              },
              propElementValues: {
                enum: ["always", "never", "ignore"],
              },
            },
            additionalProperties: false,
          },
          {
            enum: ["always", "never", "ignore"],
          },
        ],
      },
    ],
  },
  "react/jsx-pascal-case": {
    docs: {
      description: "Enforce PascalCase for user-defined JSX components",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-pascal-case.md",
    },
    messages: {
      usePascalCase: "Imported JSX component {{name}} must be in PascalCase",
      usePascalOrSnakeCase:
        "Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowAllCaps: {
            type: "boolean",
          },
          allowLeadingUnderscore: {
            type: "boolean",
          },
          allowNamespace: {
            type: "boolean",
          },
          ignore: {
            items: [
              {
                type: "string",
              },
            ],
            minItems: 0,
            type: "array",
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-fragments": {
    docs: {
      description: "Enforce shorthand or standard form for React fragments",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-fragments.md",
    },
    fixable: "code",
    messages: {
      fragmentsNotSupported:
        "Fragments are only supported starting from React v16.2. Please disable the `react/jsx-fragments` rule in `eslint` settings or upgrade your version of React.",
      preferPragma: "Prefer {{react}}.{{fragment}} over fragment shorthand",
      preferFragment: "Prefer fragment shorthand over {{react}}.{{fragment}}",
    },
    schema: [
      {
        enum: ["syntax", "element"],
      },
    ],
  },
  "react/jsx-props-no-multi-spaces": {
    docs: {
      description: "Disallow multiple spaces between inline JSX props",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-multi-spaces.md",
    },
    fixable: "code",
    messages: {
      noLineGap: "Expected no line gap between “{{prop1}}” and “{{prop2}}”",
      onlyOneSpace:
        "Expected only one space between “{{prop1}}” and “{{prop2}}”",
    },
    schema: [],
  },
  "react/jsx-props-no-spreading": {
    docs: {
      description: "Disallow JSX prop spreading",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spreading.md",
    },
    messages: {
      noSpreading: "Prop spreading is forbidden",
    },
    schema: [
      {
        allOf: [
          {
            type: "object",
            properties: {
              html: {
                enum: ["enforce", "ignore"],
              },
              custom: {
                enum: ["enforce", "ignore"],
              },
              exceptions: {
                type: "array",
                items: {
                  type: "string",
                  uniqueItems: true,
                },
              },
            },
          },
          {
            not: {
              type: "object",
              required: ["html", "custom"],
              properties: {
                html: {
                  enum: ["ignore"],
                },
                custom: {
                  enum: ["ignore"],
                },
                exceptions: {
                  type: "array",
                  minItems: 0,
                  maxItems: 0,
                },
              },
            },
          },
        ],
      },
    ],
  },
  "react/jsx-sort-default-props": {
    deprecated: true,
    replacedBy: ["sort-default-props"],
    docs: {
      description: "Enforce defaultProps declarations alphabetical sorting",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md",
    },
    messages: {
      propsNotSorted:
        "Default prop types declarations should be sorted alphabetically",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreCase: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-sort-props": {
    docs: {
      description: "Enforce props alphabetical sorting",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-props.md",
    },
    fixable: "code",
    messages: {
      noUnreservedProps:
        "A customized reserved first list must only contain a subset of React reserved props. Remove: {{unreservedWords}}",
      listIsEmpty: "A customized reserved first list must not be empty",
      listReservedPropsFirst:
        "Reserved props must be listed before all other props",
      listCallbacksLast: "Callbacks must be listed after all other props",
      listShorthandFirst:
        "Shorthand props must be listed before all other props",
      listShorthandLast: "Shorthand props must be listed after all other props",
      listMultilineFirst:
        "Multiline props must be listed before all other props",
      listMultilineLast: "Multiline props must be listed after all other props",
      sortPropsByAlpha: "Props should be sorted alphabetically",
    },
    schema: [
      {
        type: "object",
        properties: {
          callbacksLast: {
            type: "boolean",
          },
          shorthandFirst: {
            type: "boolean",
          },
          shorthandLast: {
            type: "boolean",
          },
          multiline: {
            enum: ["ignore", "first", "last"],
            default: "ignore",
          },
          ignoreCase: {
            type: "boolean",
          },
          noSortAlphabetically: {
            type: "boolean",
          },
          reservedFirst: {
            type: ["array", "boolean"],
          },
          locale: {
            type: "string",
            default: "auto",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-space-before-closing": {
    deprecated: true,
    replacedBy: ["jsx-tag-spacing"],
    docs: {
      description: "Enforce spacing before closing bracket in JSX",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md",
    },
    fixable: "code",
    messages: {
      noSpaceBeforeClose: "A space is forbidden before closing bracket",
      needSpaceBeforeClose: "A space is required before closing bracket",
    },
    schema: [
      {
        enum: ["always", "never"],
      },
    ],
  },
  "react/jsx-tag-spacing": {
    docs: {
      description:
        "Enforce whitespace in and around the JSX opening and closing brackets",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-tag-spacing.md",
    },
    fixable: "whitespace",
    messages: {
      selfCloseSlashNoSpace:
        "Whitespace is forbidden between `/` and `>`; write `/>`",
      selfCloseSlashNeedSpace:
        "Whitespace is required between `/` and `>`; write `/ >`",
      closeSlashNoSpace:
        "Whitespace is forbidden between `<` and `/`; write `</`",
      closeSlashNeedSpace:
        "Whitespace is required between `<` and `/`; write `< /`",
      beforeSelfCloseNoSpace: "A space is forbidden before closing bracket",
      beforeSelfCloseNeedSpace: "A space is required before closing bracket",
      beforeSelfCloseNeedNewline:
        "A newline is required before closing bracket",
      afterOpenNoSpace: "A space is forbidden after opening bracket",
      afterOpenNeedSpace: "A space is required after opening bracket",
      beforeCloseNoSpace: "A space is forbidden before closing bracket",
      beforeCloseNeedSpace: "Whitespace is required before closing bracket",
      beforeCloseNeedNewline: "A newline is required before closing bracket",
    },
    schema: [
      {
        type: "object",
        properties: {
          closingSlash: {
            enum: ["always", "never", "allow"],
          },
          beforeSelfClosing: {
            enum: ["always", "proportional-always", "never", "allow"],
          },
          afterOpening: {
            enum: ["always", "allow-multiline", "never", "allow"],
          },
          beforeClosing: {
            enum: ["always", "proportional-always", "never", "allow"],
          },
        },
        default: {
          closingSlash: "never",
          beforeSelfClosing: "always",
          afterOpening: "never",
          beforeClosing: "allow",
        },
        additionalProperties: false,
      },
    ],
  },
  "react/jsx-uses-react": {
    docs: {
      description: "Disallow React to be incorrectly marked as unused",
      category: "Best Practices",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-react.md",
    },
    schema: [],
  },
  "react/jsx-uses-vars": {
    docs: {
      description:
        "Disallow variables used in JSX to be incorrectly marked as unused",
      category: "Best Practices",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-vars.md",
    },
    schema: [],
  },
  "react/jsx-wrap-multilines": {
    docs: {
      description: "Disallow missing parentheses around multiline JSX",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-wrap-multilines.md",
    },
    fixable: "code",
    messages: {
      missingParens: "Missing parentheses around multilines JSX",
      parensOnNewLines: "Parentheses around JSX should be on separate lines",
    },
    schema: [
      {
        type: "object",
        properties: {
          declaration: {
            enum: [true, false, "ignore", "parens", "parens-new-line"],
          },
          assignment: {
            enum: [true, false, "ignore", "parens", "parens-new-line"],
          },
          return: {
            enum: [true, false, "ignore", "parens", "parens-new-line"],
          },
          arrow: {
            enum: [true, false, "ignore", "parens", "parens-new-line"],
          },
          condition: {
            enum: [true, false, "ignore", "parens", "parens-new-line"],
          },
          logical: {
            enum: [true, false, "ignore", "parens", "parens-new-line"],
          },
          prop: {
            enum: [true, false, "ignore", "parens", "parens-new-line"],
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/no-invalid-html-attribute": {
    docs: {
      description: "Disallow usage of invalid attributes",
      category: "Possible Errors",
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-invalid-html-attribute.md",
    },
    messages: {
      emptyIsMeaningless:
        "An empty “{{attributeName}}” attribute is meaningless.",
      neverValid:
        "“{{reportingValue}}” is never a valid “{{attributeName}}” attribute value.",
      noEmpty: "An empty “{{attributeName}}” attribute is meaningless.",
      noMethod: "The ”{{attributeName}}“ attribute cannot be a method.",
      notAlone:
        "“{{reportingValue}}” must be directly followed by “{{missingValue}}”.",
      notPaired:
        "“{{reportingValue}}” can not be directly followed by “{{secondValue}}” without “{{missingValue}}”.",
      notValidFor:
        "“{{reportingValue}}” is not a valid “{{attributeName}}” attribute value for <{{elementName}}>.",
      onlyMeaningfulFor:
        "The ”{{attributeName}}“ attribute only has meaning on the tags: {{tagNames}}",
      onlyStrings: "“{{attributeName}}” attribute only supports strings.",
      spaceDelimited:
        "”{{attributeName}}“ attribute values should be space delimited.",
      suggestRemoveDefault: '"remove {{attributeName}}"',
      suggestRemoveEmpty: '"remove empty attribute {{attributeName}}"',
      suggestRemoveInvalid: "“remove invalid attribute {{reportingValue}}”",
      suggestRemoveWhitespaces: "remove whitespaces in “{{reportingValue}}”",
      suggestRemoveNonString: "remove non-string value in “{{reportingValue}}”",
    },
    schema: [
      {
        type: "array",
        uniqueItems: true,
        items: {
          enum: ["rel"],
        },
      },
    ],
    type: "suggestion",
    hasSuggestions: true,
  },
  "react/no-access-state-in-setstate": {
    docs: {
      description: "Disallow when this.state is accessed within setState",
      category: "Possible Errors",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-access-state-in-setstate.md",
    },
    messages: {
      useCallback:
        "Use callback in setState when referencing the previous state.",
    },
  },
  "react/no-adjacent-inline-elements": {
    docs: {
      description:
        "Disallow adjacent inline elements not separated by whitespace.",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-adjacent-inline-elements.md",
    },
    schema: [],
    messages: {
      inlineElement:
        "Child elements which render as inline HTML elements should be separated by a space or wrapped in block level elements.",
    },
  },
  "react/no-array-index-key": {
    docs: {
      description: "Disallow usage of Array index in keys",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-array-index-key.md",
    },
    messages: {
      noArrayIndex: "Do not use Array index in keys",
    },
    schema: [],
  },
  "react/no-arrow-function-lifecycle": {
    docs: {
      description:
        "Lifecycle methods should be methods on the prototype, not class fields",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-arrow-function-lifecycle.md",
    },
    messages: {
      lifecycle:
        "{{propertyName}} is a React lifecycle method, and should not be an arrow function or in a class field. Use an instance method instead.",
    },
    schema: [],
    fixable: "code",
  },
  "react/no-children-prop": {
    docs: {
      description: "Disallow passing of children as props",
      category: "Best Practices",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-children-prop.md",
    },
    messages: {
      nestChildren:
        "Do not pass children as props. Instead, nest children between the opening and closing tags.",
      passChildrenAsArgs:
        "Do not pass children as props. Instead, pass them as additional arguments to React.createElement.",
      nestFunction:
        "Do not nest a function between the opening and closing tags. Instead, pass it as a prop.",
      passFunctionAsArgs:
        "Do not pass a function as an additional argument to React.createElement. Instead, pass it as a prop.",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowFunctions: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/no-danger": {
    docs: {
      description: "Disallow usage of dangerous JSX properties",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger.md",
    },
    messages: {
      dangerousProp: "Dangerous property '{{name}}' found",
    },
    schema: [],
  },
  "react/no-danger-with-children": {
    docs: {
      description:
        "Disallow when a DOM element is using both children and dangerouslySetInnerHTML",
      category: "Possible Errors",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger-with-children.md",
    },
    messages: {
      dangerWithChildren:
        "Only set one of `children` or `props.dangerouslySetInnerHTML`",
    },
    schema: [],
  },
  "react/no-deprecated": {
    docs: {
      description: "Disallow usage of deprecated methods",
      category: "Best Practices",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-deprecated.md",
    },
    messages: {
      deprecated:
        "{{oldMethod}} is deprecated since React {{version}}{{newMethod}}{{refs}}",
    },
    schema: [],
  },
  "react/no-did-mount-set-state": {
    docs: {
      description: "Disallow usage of setState in componentDidMount",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-mount-set-state.md",
    },
    messages: {
      noSetState: "Do not use setState in {{name}}",
    },
    schema: [
      {
        enum: ["disallow-in-func"],
      },
    ],
  },
  "react/no-did-update-set-state": {
    docs: {
      description: "Disallow usage of setState in componentDidUpdate",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-update-set-state.md",
    },
    messages: {
      noSetState: "Do not use setState in {{name}}",
    },
    schema: [
      {
        enum: ["disallow-in-func"],
      },
    ],
  },
  "react/no-direct-mutation-state": {
    docs: {
      description: "Disallow direct mutation of this.state",
      category: "Possible Errors",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-direct-mutation-state.md",
    },
    messages: {
      noDirectMutation: "Do not mutate state directly. Use setState().",
    },
  },
  "react/no-find-dom-node": {
    docs: {
      description: "Disallow usage of findDOMNode",
      category: "Best Practices",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-find-dom-node.md",
    },
    messages: {
      noFindDOMNode:
        "Do not use findDOMNode. It doesn’t work with function components and is deprecated in StrictMode. See https://reactjs.org/docs/react-dom.html#finddomnode",
    },
    schema: [],
  },
  "react/no-is-mounted": {
    docs: {
      description: "Disallow usage of isMounted",
      category: "Best Practices",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-is-mounted.md",
    },
    messages: {
      noIsMounted: "Do not use isMounted",
    },
    schema: [],
  },
  "react/no-multi-comp": {
    docs: {
      description: "Disallow multiple component definition per file",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-multi-comp.md",
    },
    messages: {
      onlyOneComponent: "Declare only one React component per file",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreStateless: {
            default: false,
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/no-namespace": {
    docs: {
      description: "Enforce that namespaces are not used in React elements",
      category: "Possible Errors",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-namespace.md",
    },
    messages: {
      noNamespace:
        "React component {{name}} must not be in a namespace, as React does not support them",
    },
    schema: [],
  },
  "react/no-set-state": {
    docs: {
      description: "Disallow usage of setState",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-set-state.md",
    },
    messages: {
      noSetState: "Do not use setState",
    },
    schema: [],
  },
  "react/no-string-refs": {
    docs: {
      description: "Disallow using string references",
      category: "Best Practices",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-string-refs.md",
    },
    messages: {
      thisRefsDeprecated: "Using this.refs is deprecated.",
      stringInRefDeprecated:
        "Using string literals in ref attributes is deprecated.",
    },
    schema: [
      {
        type: "object",
        properties: {
          noTemplateLiterals: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/no-redundant-should-component-update": {
    docs: {
      description:
        "Disallow usage of shouldComponentUpdate when extending React.PureComponent",
      category: "Possible Errors",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-redundant-should-component-update.md",
    },
    messages: {
      noShouldCompUpdate:
        "{{component}} does not need shouldComponentUpdate when extending React.PureComponent.",
    },
    schema: [],
  },
  "react/no-render-return-value": {
    docs: {
      description: "Disallow usage of the return value of ReactDOM.render",
      category: "Best Practices",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-render-return-value.md",
    },
    messages: {
      noReturnValue: "Do not depend on the return value from {{node}}.render",
    },
    schema: [],
  },
  "react/no-this-in-sfc": {
    docs: {
      description:
        "Disallow `this` from being used in stateless functional components",
      category: "Possible Errors",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-this-in-sfc.md",
    },
    messages: {
      noThisInSFC: "Stateless functional components should not use `this`",
    },
    schema: [],
  },
  "react/no-typos": {
    docs: {
      description: "Disallow common typos",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-typos.md",
    },
    messages: {
      typoPropTypeChain: "Typo in prop type chain qualifier: {{name}}",
      typoPropType: "Typo in declared prop type: {{name}}",
      typoStaticClassProp: "Typo in static class property declaration",
      typoPropDeclaration: "Typo in property declaration",
      typoLifecycleMethod:
        "Typo in component lifecycle method declaration: {{actual}} should be {{expected}}",
      staticLifecycleMethod: "Lifecycle method should be static: {{method}}",
      noPropTypesBinding:
        "`'prop-types'` imported without a local `PropTypes` binding.",
      noReactBinding: "`'react'` imported without a local `React` binding.",
    },
    schema: [],
  },
  "react/no-unescaped-entities": {
    docs: {
      description: "Disallow unescaped HTML entities from appearing in markup",
      category: "Possible Errors",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unescaped-entities.md",
    },
    messages: {
      unescapedEntity: "HTML entity, `{{entity}}` , must be escaped.",
      unescapedEntityAlts: "`{{entity}}` can be escaped with {{alts}}.",
    },
    schema: [
      {
        type: "object",
        properties: {
          forbid: {
            type: "array",
            items: {
              anyOf: [
                {
                  type: "string",
                },
                {
                  type: "object",
                  properties: {
                    char: {
                      type: "string",
                    },
                    alternatives: {
                      type: "array",
                      uniqueItems: true,
                      items: {
                        type: "string",
                      },
                    },
                  },
                },
              ],
            },
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/no-unknown-property": {
    docs: {
      description: "Disallow usage of unknown DOM property",
      category: "Possible Errors",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unknown-property.md",
    },
    fixable: "code",
    messages: {
      invalidPropOnTag:
        "Invalid property '{{name}}' found on tag '{{tagName}}', but it is only allowed on: {{allowedTags}}",
      unknownPropWithStandardName:
        "Unknown property '{{name}}' found, use '{{standardName}}' instead",
      unknownProp: "Unknown property '{{name}}' found",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignore: {
            type: "array",
            items: {
              type: "string",
            },
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/no-unsafe": {
    docs: {
      description: "Disallow usage of unsafe lifecycle methods",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unsafe.md",
    },
    messages: {
      unsafeMethod:
        "{{method}} is unsafe for use in async rendering. Update the component to use {{newMethod}} instead. {{details}}",
    },
    schema: [
      {
        type: "object",
        properties: {
          checkAliases: {
            default: false,
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/no-unstable-nested-components": {
    docs: {
      description: "Disallow creating unstable components inside components",
      category: "Possible Errors",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unstable-nested-components.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          customValidators: {
            type: "array",
            items: {
              type: "string",
            },
          },
          allowAsProps: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/no-unused-class-component-methods": {
    docs: {
      description: "Disallow declaring unused methods of component class",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-class-component-methods.md",
    },
    messages: {
      unused: 'Unused method or property "{{name}}"',
      unusedWithClass:
        'Unused method or property "{{name}}" of class "{{className}}"',
    },
    schema: [],
  },
  "react/no-unused-prop-types": {
    docs: {
      description: "Disallow definitions of unused propTypes",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-prop-types.md",
    },
    messages: {
      unusedPropType: "'{{name}}' PropType is defined but prop is never used",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignore: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
          },
          customValidators: {
            type: "array",
            items: {
              type: "string",
            },
          },
          skipShapeProps: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/no-unused-state": {
    docs: {
      description: "Disallow definitions of unused state",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-state.md",
    },
    messages: {
      unusedStateField: "Unused state field: '{{name}}'",
    },
    schema: [],
  },
  "react/no-object-type-as-default-prop": {
    docs: {
      description:
        "Disallow usage of referential-type variables as default param in functional component",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-object-type-as-default-prop.md",
    },
    messages: {
      forbiddenTypeDefaultParam:
        "{{propName}} has a/an {{forbiddenType}} as default prop. This could lead to potential infinite render loop in React. Use a variable reference instead of {{forbiddenType}}.",
    },
  },
  "react/no-will-update-set-state": {
    docs: {
      description: "Disallow usage of setState in componentWillUpdate",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-will-update-set-state.md",
    },
    messages: {
      noSetState: "Do not use setState in {{name}}",
    },
    schema: [
      {
        enum: ["disallow-in-func"],
      },
    ],
  },
  "react/prefer-es6-class": {
    docs: {
      description: "Enforce ES5 or ES6 class for React Components",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-es6-class.md",
    },
    messages: {
      shouldUseES6Class:
        "Component should use es6 class instead of createClass",
      shouldUseCreateClass:
        "Component should use createClass instead of es6 class",
    },
    schema: [
      {
        enum: ["always", "never"],
      },
    ],
  },
  "react/prefer-exact-props": {
    docs: {
      description: "Prefer exact proptype definitions",
      category: "Possible Errors",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-exact-props.md",
    },
    messages: {
      propTypes:
        "Component propTypes should be exact by using {{exactPropWrappers}}.",
      flow: "Component flow props should be set with exact objects.",
    },
    schema: [],
  },
  "react/prefer-read-only-props": {
    docs: {
      description: "Enforce that props are read-only",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-read-only-props.md",
    },
    fixable: "code",
    messages: {
      readOnlyProp: "Prop '{{name}}' should be read-only.",
    },
    schema: [],
  },
  "react/prefer-stateless-function": {
    docs: {
      description:
        "Enforce stateless components to be written as a pure function",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-stateless-function.md",
    },
    messages: {
      componentShouldBePure: "Component should be written as a pure function",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignorePureComponents: {
            default: false,
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/prop-types": {
    docs: {
      description:
        "Disallow missing props validation in a React component definition",
      category: "Best Practices",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prop-types.md",
    },
    messages: {
      missingPropType: "'{{name}}' is missing in props validation",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignore: {
            type: "array",
            items: {
              type: "string",
            },
          },
          customValidators: {
            type: "array",
            items: {
              type: "string",
            },
          },
          skipUndeclared: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/react-in-jsx-scope": {
    docs: {
      description: "Disallow missing React when using JSX",
      category: "Possible Errors",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md",
    },
    messages: {
      notInScope: "'{{name}}' must be in scope when using JSX",
    },
    schema: [],
  },
  "react/require-default-props": {
    docs: {
      description:
        "Enforce a defaultProps definition for every prop that is not a required prop",
      category: "Best Practices",
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-default-props.md",
    },
    messages: {
      noDefaultWithRequired:
        'propType "{{name}}" is required and should not have a defaultProps declaration.',
      shouldHaveDefault:
        'propType "{{name}}" is not required, but has no corresponding defaultProps declaration.',
      noDefaultPropsWithFunction:
        "Don’t use defaultProps with function components.",
      shouldAssignObjectDefault:
        'propType "{{name}}" is not required, but has no corresponding default argument value.',
      destructureInSignature:
        "Must destructure props in the function signature to initialize an optional prop.",
    },
    schema: [
      {
        type: "object",
        properties: {
          forbidDefaultForRequired: {
            type: "boolean",
          },
          classes: {
            enum: ["defaultProps", "ignore"],
          },
          functions: {
            enum: ["defaultArguments", "defaultProps", "ignore"],
          },
          ignoreFunctionalComponents: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/require-optimization": {
    docs: {
      description:
        "Enforce React components to have a shouldComponentUpdate method",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-optimization.md",
    },
    messages: {
      noShouldComponentUpdate:
        "Component is not optimized. Please add a shouldComponentUpdate method.",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowDecorators: {
            type: "array",
            items: {
              type: "string",
            },
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/require-render-return": {
    docs: {
      description:
        "Enforce ES5 or ES6 class for returning value in render function",
      category: "Possible Errors",
      recommended: true,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-render-return.md",
    },
    messages: {
      noRenderReturn: "Your render method should have a return statement",
    },
    schema: [],
  },
  "react/self-closing-comp": {
    docs: {
      description:
        "Disallow extra closing tags for components without children",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/self-closing-comp.md",
    },
    fixable: "code",
    messages: {
      notSelfClosing: "Empty components are self-closing",
    },
    schema: [
      {
        type: "object",
        properties: {
          component: {
            default: true,
            type: "boolean",
          },
          html: {
            default: true,
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/sort-comp": {
    docs: {
      description: "Enforce component methods order",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-comp.md",
    },
    messages: {
      unsortedProps: "{{propA}} should be placed {{position}} {{propB}}",
    },
    schema: [
      {
        type: "object",
        properties: {
          order: {
            type: "array",
            items: {
              type: "string",
            },
          },
          groups: {
            type: "object",
            patternProperties: {
              "^.*$": {
                type: "array",
                items: {
                  type: "string",
                },
              },
            },
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/sort-default-props": {
    docs: {
      description: "Enforce defaultProps declarations alphabetical sorting",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-default-props.md",
    },
    messages: {
      propsNotSorted:
        "Default prop types declarations should be sorted alphabetically",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreCase: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/sort-prop-types": {
    docs: {
      description: "Enforce propTypes declarations alphabetical sorting",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-prop-types.md",
    },
    fixable: "code",
    messages: {
      requiredPropsFirst:
        "Required prop types must be listed before all other prop types",
      callbackPropsLast:
        "Callback prop types must be listed after all other prop types",
      propsNotSorted: "Prop types declarations should be sorted alphabetically",
    },
    schema: [
      {
        type: "object",
        properties: {
          requiredFirst: {
            type: "boolean",
          },
          callbacksLast: {
            type: "boolean",
          },
          ignoreCase: {
            type: "boolean",
          },
          noSortAlphabetically: {
            type: "boolean",
          },
          sortShapeProp: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/state-in-constructor": {
    docs: {
      description: "Enforce class component state initialization style",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/state-in-constructor.md",
    },
    messages: {
      stateInitConstructor: "State initialization should be in a constructor",
      stateInitClassProp: "State initialization should be in a class property",
    },
    schema: [
      {
        enum: ["always", "never"],
      },
    ],
  },
  "react/static-property-placement": {
    docs: {
      description:
        "Enforces where React component static properties should be positioned.",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/static-property-placement.md",
    },
    fixable: null,
    messages: {
      notStaticClassProp:
        "'{{name}}' should be declared as a static class property.",
      notGetterClassFunc:
        "'{{name}}' should be declared as a static getter class function.",
      declareOutsideClass:
        "'{{name}}' should be declared outside the class body.",
    },
    schema: [
      {
        enum: ["static public field", "static getter", "property assignment"],
      },
      {
        type: "object",
        properties: {
          propTypes: {
            enum: [
              "static public field",
              "static getter",
              "property assignment",
            ],
          },
          defaultProps: {
            enum: [
              "static public field",
              "static getter",
              "property assignment",
            ],
          },
          childContextTypes: {
            enum: [
              "static public field",
              "static getter",
              "property assignment",
            ],
          },
          contextTypes: {
            enum: [
              "static public field",
              "static getter",
              "property assignment",
            ],
          },
          contextType: {
            enum: [
              "static public field",
              "static getter",
              "property assignment",
            ],
          },
          displayName: {
            enum: [
              "static public field",
              "static getter",
              "property assignment",
            ],
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "react/style-prop-object": {
    docs: {
      description: "Enforce style prop value is an object",
      category: "Possible Errors",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/style-prop-object.md",
    },
    messages: {
      stylePropNotObject: "Style prop value must be an object",
    },
    schema: [
      {
        type: "object",
        properties: {
          allow: {
            type: "array",
            items: {
              type: "string",
            },
            additionalItems: false,
            uniqueItems: true,
          },
        },
      },
    ],
  },
  "react/void-dom-elements-no-children": {
    docs: {
      description:
        "Disallow void DOM elements (e.g. `<img />`, `<br />`) from receiving children",
      category: "Best Practices",
      recommended: false,
      url: "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/void-dom-elements-no-children.md",
    },
    messages: {
      noChildrenInVoidEl:
        "Void DOM element <{{element}} /> cannot receive children.",
    },
    schema: [],
  },
  "jsx-a11y/accessible-emoji": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md",
    },
    deprecated: true,
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/alt-text": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          elements: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          img: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          object: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          area: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          'input[type="image"]': {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/anchor-has-content": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          components: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/anchor-is-valid": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          components: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          specialLink: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          aspects: {
            type: "array",
            items: {
              type: "string",
              enum: ["noHref", "invalidHref", "preferButton"],
            },
            uniqueItems: true,
            additionalItems: false,
            minItems: 1,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/aria-activedescendant-has-tabindex": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/aria-props": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-props.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/aria-proptypes": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/aria-role": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-role.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreNonDOM: {
            type: "boolean",
            default: false,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/aria-unsupported-elements": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/autocomplete-valid": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          inputComponents: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/click-events-have-key-events": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/click-events-have-key-events.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/control-has-associated-label": {
    docs: {},
    schema: [
      {
        type: "object",
        properties: {
          labelAttributes: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          controlComponents: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          ignoreElements: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          ignoreRoles: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          depth: {
            description: "JSX tree depth limit to check for accessible label",
            type: "integer",
            minimum: 0,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/heading-has-content": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/heading-has-content.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          components: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/html-has-lang": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/html-has-lang.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/iframe-has-title": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/iframe-has-title.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/img-redundant-alt": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          components: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          words: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/interactive-supports-focus": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/interactive-supports-focus.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          tabbable: {
            type: "array",
            items: {
              type: "string",
              enum: [
                "button",
                "checkbox",
                "columnheader",
                "combobox",
                "grid",
                "gridcell",
                "link",
                "listbox",
                "menu",
                "menubar",
                "menuitem",
                "menuitemcheckbox",
                "menuitemradio",
                "option",
                "progressbar",
                "radio",
                "radiogroup",
                "row",
                "rowheader",
                "scrollbar",
                "searchbox",
                "slider",
                "spinbutton",
                "switch",
                "tab",
                "tablist",
                "textbox",
                "tree",
                "treegrid",
                "treeitem",
                "doc-backlink",
                "doc-biblioref",
                "doc-glossref",
                "doc-noteref",
              ],
            },
            uniqueItems: true,
            additionalItems: false,
            minItems: 0,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/label-has-associated-control": {
    docs: {},
    schema: [
      {
        type: "object",
        properties: {
          labelComponents: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          labelAttributes: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          controlComponents: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          assert: {
            description:
              "Assert that the label has htmlFor, a nested label, both or either",
            type: "string",
            enum: ["htmlFor", "nesting", "both", "either"],
          },
          depth: {
            description: "JSX tree depth limit to check for accessible label",
            type: "integer",
            minimum: 0,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/label-has-for": {
    deprecated: true,
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/label-has-for.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          components: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          required: {
            oneOf: [
              {
                type: "string",
                enum: ["nesting", "id"],
              },
              {
                type: "object",
                properties: {
                  some: {
                    type: "array",
                    items: {
                      type: "string",
                      enum: ["nesting", "id"],
                    },
                    uniqueItems: true,
                    additionalItems: false,
                    minItems: 0,
                  },
                },
                required: ["some"],
              },
              {
                type: "object",
                properties: {
                  every: {
                    type: "array",
                    items: {
                      type: "string",
                      enum: ["nesting", "id"],
                    },
                    uniqueItems: true,
                    additionalItems: false,
                    minItems: 0,
                  },
                },
                required: ["every"],
              },
            ],
          },
          allowChildren: {
            type: "boolean",
          },
        },
      },
    ],
  },
  "jsx-a11y/lang": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/lang.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/media-has-caption": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/media-has-caption.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          audio: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          video: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
          track: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/mouse-events-have-key-events": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/mouse-events-have-key-events.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/no-access-key": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-access-key.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/no-autofocus": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-autofocus.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreNonDOM: {
            type: "boolean",
            default: false,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/no-distracting-elements": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-distracting-elements.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          elements: {
            type: "array",
            items: {
              type: "string",
              enum: ["marquee", "blink"],
            },
            uniqueItems: true,
            additionalItems: false,
            minItems: 0,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/no-interactive-element-to-noninteractive-role": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-interactive-element-to-noninteractive-role.md",
    },
    schema: [
      {
        type: "object",
        additionalProperties: {
          type: "array",
          items: {
            type: "string",
          },
          uniqueItems: true,
        },
      },
    ],
  },
  "jsx-a11y/no-noninteractive-element-interactions": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-interactions.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          handlers: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/no-noninteractive-element-to-interactive-role": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-to-interactive-role.md",
    },
    schema: [
      {
        type: "object",
        additionalProperties: {
          type: "array",
          items: {
            type: "string",
          },
          uniqueItems: true,
        },
      },
    ],
  },
  "jsx-a11y/no-noninteractive-tabindex": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-tabindex.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          roles: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
            description: "An array of ARIA roles",
          },
          tags: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
            description: "An array of HTML tag names",
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/no-onchange": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-onchange.md",
    },
    deprecated: true,
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/no-redundant-roles": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-redundant-roles.md",
    },
    schema: [
      {
        type: "object",
        additionalProperties: {
          type: "array",
          items: {
            type: "string",
          },
          uniqueItems: true,
        },
      },
    ],
  },
  "jsx-a11y/no-static-element-interactions": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-static-element-interactions.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          handlers: {
            type: "array",
            items: {
              type: "string",
            },
            uniqueItems: true,
            additionalItems: false,
          },
        },
        required: undefined,
      },
    ],
  },
  "jsx-a11y/role-has-required-aria-props": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-has-required-aria-props.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/role-supports-aria-props": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/scope": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/scope.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "jsx-a11y/tabindex-no-positive": {
    docs: {
      url: "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/tabindex-no-positive.md",
    },
    schema: [
      {
        type: "object",
        properties: {},
        required: undefined,
      },
    ],
  },
  "react-hooks/rules-of-hooks": {
    type: "problem",
    docs: {
      description: "enforces the Rules of Hooks",
      recommended: true,
      url: "https://reactjs.org/docs/hooks-rules.html",
    },
  },
  "react-hooks/exhaustive-deps": {
    type: "suggestion",
    docs: {
      description:
        "verifies the list of dependencies for Hooks like useEffect and similar",
      recommended: true,
      url: "https://github.com/facebook/react/issues/14920",
    },
    fixable: "code",
    hasSuggestions: true,
    schema: [
      {
        type: "object",
        additionalProperties: false,
        enableDangerousAutofixThisMayCauseInfiniteLoops: false,
        properties: {
          additionalHooks: {
            type: "string",
          },
          enableDangerousAutofixThisMayCauseInfiniteLoops: {
            type: "boolean",
          },
        },
      },
    ],
  },
  "prettier/prettier": {
    docs: {
      url: "https://github.com/prettier/eslint-plugin-prettier#options",
    },
    type: "layout",
    fixable: "code",
    schema: [
      {
        type: "object",
        properties: {},
        additionalProperties: true,
      },
      {
        type: "object",
        properties: {
          usePrettierrc: {
            type: "boolean",
          },
          fileInfoOptions: {
            type: "object",
            properties: {},
            additionalProperties: true,
          },
        },
        additionalProperties: true,
      },
    ],
    messages: {
      insert: "Insert `{{ insertText }}`",
      delete: "Delete `{{ deleteText }}`",
      replace: "Replace `{{ deleteText }}` with `{{ insertText }}`",
    },
  },
  "storybook/await-interactions": {
    docs: {
      description: "Interactions should be awaited",
      categories: ["addon-interactions", "recommended"],
      recommended: "error",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/await-interactions.md",
    },
    messages: {
      interactionShouldBeAwaited: "Interaction should be awaited: {{method}}",
      fixSuggestion: "Add `await` to method",
    },
    type: "problem",
    fixable: "code",
    hasSuggestions: true,
    schema: [],
  },
  "storybook/context-in-play-function": {
    type: "problem",
    docs: {
      description:
        "Pass a context when invoking play function of another story",
      categories: ["recommended", "addon-interactions"],
      recommended: "error",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/context-in-play-function.md",
    },
    messages: {
      passContextToPlayFunction:
        "Pass a context when invoking play function of another story",
    },
    fixable: null,
    schema: [],
  },
  "storybook/csf-component": {
    type: "suggestion",
    docs: {
      description: "The component property should be set",
      categories: ["csf"],
      recommended: "warn",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/csf-component.md",
    },
    messages: {
      missingComponentProperty: "Missing component property.",
    },
    schema: [],
  },
  "storybook/default-exports": {
    type: "problem",
    docs: {
      description: "Story files should have a default export",
      categories: ["csf", "recommended"],
      recommended: "error",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/default-export.md",
    },
    messages: {
      shouldHaveDefaultExport: "The file should have a default export.",
      fixSuggestion: "Add default export",
    },
    fixable: "code",
    hasSuggestions: true,
    schema: [],
  },
  "storybook/hierarchy-separator": {
    type: "problem",
    fixable: "code",
    hasSuggestions: true,
    docs: {
      description: "Deprecated hierachy separator in title property",
      categories: ["csf", "recommended"],
      recommended: "warn",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/hierarchy-separator.md",
    },
    messages: {
      useCorrectSeparators: "Use correct separators",
      deprecatedHierarchySeparator:
        "Deprecated hierachy separator in title property: {{metaTitle}}.",
    },
    schema: [],
  },
  "storybook/meta-inline-properties": {
    type: "problem",
    docs: {
      description: "Meta should only have inline properties",
      categories: ["csf", "recommended"],
      excludeFromConfig: true,
      recommended: "error",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/meta-inline-properties.md",
    },
    messages: {
      metaShouldHaveInlineProperties:
        "Meta should only have inline properties: {{property}}",
    },
    schema: [
      {
        type: "object",
        properties: {
          csfVersion: {
            type: "number",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "storybook/no-redundant-story-name": {
    type: "suggestion",
    fixable: "code",
    hasSuggestions: true,
    docs: {
      description: "A story should not have a redundant name property",
      categories: ["csf", "recommended"],
      recommended: "warn",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/no-redundant-story-name.md",
    },
    messages: {
      removeRedundantName: "Remove redundant name",
      storyNameIsRedundant:
        "Named exports should not use the name annotation if it is redundant to the name that would be generated by the export name",
    },
    schema: [],
  },
  "storybook/no-stories-of": {
    type: "problem",
    docs: {
      description: "storiesOf is deprecated and should not be used",
      categories: ["csf-strict"],
      recommended: "error",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/no-stories-of.md",
    },
    messages: {
      doNotUseStoriesOf: "storiesOf is deprecated and should not be used",
    },
    schema: [],
  },
  "storybook/no-title-property-in-meta": {
    type: "problem",
    fixable: "code",
    hasSuggestions: true,
    docs: {
      description: "Do not define a title in meta",
      categories: ["csf-strict"],
      recommended: "error",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/no-title-property-in-meta.md",
    },
    messages: {
      removeTitleInMeta: "Remove title property from meta",
      noTitleInMeta: "CSF3 does not need a title in meta",
    },
    schema: [],
  },
  "storybook/prefer-pascal-case": {
    type: "suggestion",
    fixable: "code",
    hasSuggestions: true,
    docs: {
      description: "Stories should use PascalCase",
      categories: ["recommended"],
      recommended: "warn",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/prefer-pascal-case.md",
    },
    messages: {
      convertToPascalCase: "Use pascal case",
      usePascalCase: "The story should use PascalCase notation: {{name}}",
    },
    schema: [],
  },
  "storybook/story-exports": {
    type: "problem",
    docs: {
      description: "A story file must contain at least one story export",
      categories: ["recommended", "csf"],
      recommended: "error",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/story-exports.md",
    },
    messages: {
      shouldHaveStoryExport: "The file should have at least one story export",
      addStoryExport: "Add a story export",
    },
    fixable: null,
    schema: [],
  },
  "storybook/use-storybook-expect": {
    type: "suggestion",
    fixable: "code",
    hasSuggestions: true,
    schema: [],
    docs: {
      description: "Use expect from `@storybook/jest`",
      categories: ["addon-interactions", "recommended"],
      recommended: "error",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/use-storybook-expect.md",
    },
    messages: {
      updateImports: "Update imports",
      useExpectFromStorybook:
        "Do not use expect from jest directly in the story. You should use from `@storybook/jest` instead.",
    },
  },
  "storybook/use-storybook-testing-library": {
    type: "suggestion",
    fixable: "code",
    hasSuggestions: true,
    docs: {
      description: "Do not use testing-library directly on stories",
      categories: ["addon-interactions", "recommended"],
      recommended: "error",
      url: "https://github.com/storybookjs/eslint-plugin-storybook/blob/main/docs/rules/use-storybook-testing-library.md",
    },
    schema: [],
    messages: {
      updateImports: "Update imports",
      dontUseTestingLibraryDirectly:
        "Do not use `{{library}}` directly in the story. You should import the functions from `@storybook/testing-library` instead.",
    },
  },
  "@emotion/import-from-emotion": {
    fixable: "code",
  },
  "@emotion/no-vanilla": {
    fixable: "code",
  },
  "@emotion/syntax-preference": {
    docs: {
      description: "Choose between string or object styles",
      category: "Stylistic Issues",
      recommended: false,
    },
    fixable: null,
    schema: [
      {
        enum: ["string", "object"],
      },
    ],
  },
  "@emotion/styled-import": {
    fixable: "code",
  },
  "@emotion/jsx-import": {
    fixable: "code",
    schema: {
      type: "array",
      items: {
        oneOf: [
          {
            type: "string",
          },
          {
            type: "object",
            properties: {
              runtime: {
                type: "string",
              },
              importSource: {
                type: "string",
              },
            },
            required: ["runtime"],
            additionalProperties: false,
          },
        ],
      },
      uniqueItems: true,
      minItems: 0,
    },
  },
  "@emotion/pkg-renaming": {
    fixable: "code",
  },
  "sonarjs/cognitive-complexity": {
    messages: {
      refactorFunction:
        "Refactor this function to reduce its Cognitive Complexity from {{complexityAmount}} to the {{threshold}} allowed.",
      sonarRuntime: "{{sonarRuntimeData}}",
      fileComplexity: "{{complexityAmount}}",
    },
    type: "suggestion",
    docs: {
      description: "Cognitive Complexity of functions should not be too high",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/cognitive-complexity.md",
    },
    schema: [
      {
        type: "integer",
        minimum: 0,
      },
      {
        enum: ["sonar-runtime", "metric"],
      },
    ],
  },
  "sonarjs/elseif-without-else": {
    messages: {
      addMissingElseClause: 'Add the missing "else" clause.',
    },
    schema: [],
    type: "suggestion",
    docs: {
      description: '"if ... else if" constructs should end with "else" clauses',
      recommended: false,
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/elseif-without-else.md",
    },
  },
  "sonarjs/max-switch-cases": {
    messages: {
      reduceNumberOfNonEmptySwitchCases:
        "Reduce the number of non-empty switch cases from {{numSwitchCases}} to at most {{maxSwitchCases}}.",
    },
    type: "suggestion",
    docs: {
      description:
        '"switch" statements should not have too many "case" clauses',
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/max-switch-cases.md",
    },
    schema: [
      {
        type: "integer",
        minimum: 0,
      },
    ],
  },
  "sonarjs/no-all-duplicated-branches": {
    messages: {
      removeOrEditConditionalStructure:
        "Remove this conditional structure or edit its code blocks so that they're not all the same.",
      returnsTheSameValue:
        'This conditional operation returns the same value whether the condition is "true" or "false".',
    },
    schema: [],
    type: "problem",
    docs: {
      description:
        "All branches in a conditional structure should not have exactly the same implementation",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-all-duplicated-branches.md",
    },
  },
  "sonarjs/no-collapsible-if": {
    messages: {
      mergeNestedIfStatement: "Merge this if statement with the nested one.",
      sonarRuntime: "{{sonarRuntimeData}}",
    },
    type: "suggestion",
    docs: {
      description: 'Collapsible "if" statements should be merged',
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-collapsible-if.md",
    },
    schema: [
      {
        enum: ["sonar-runtime"],
      },
    ],
  },
  "sonarjs/no-collection-size-mischeck": {
    messages: {
      fixCollectionSizeCheck:
        'Fix this expression; {{propertyName}} of "{{objectName}}" is always greater or equal to zero.',
      suggestFixedSizeCheck: 'Use "{{operator}}" for {{operation}} check',
    },
    schema: [],
    type: "problem",
    hasSuggestions: true,
    docs: {
      description:
        "Collection sizes and array length comparisons should make sense",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-collection-size-mischeck.md",
    },
  },
  "sonarjs/no-duplicate-string": {
    messages: {
      defineConstant:
        "Define a constant instead of duplicating this literal {{times}} times.",
      sonarRuntime: "{{sonarRuntimeData}}",
    },
    type: "suggestion",
    docs: {
      description: "String literals should not be duplicated",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-duplicate-string.md",
    },
    schema: [
      {
        type: "object",
        properties: {
          threshold: {
            type: "integer",
            minimum: 2,
          },
          ignoreStrings: {
            type: "string",
            default: "application/json",
          },
        },
      },
      {
        enum: ["sonar-runtime"],
      },
    ],
  },
  "sonarjs/no-duplicated-branches": {
    messages: {
      sameConditionalBlock:
        "This {{type}}'s code block is the same as the block for the {{type}} on line {{line}}.",
      sonarRuntime: "{{sonarRuntimeData}}",
    },
    type: "problem",
    docs: {
      description:
        "Two branches in a conditional structure should not have exactly the same implementation",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-duplicated-branches.md",
    },
    schema: [
      {
        enum: ["sonar-runtime"],
      },
    ],
  },
  "sonarjs/no-element-overwrite": {
    messages: {
      verifyIntendedIndex:
        'Verify this is the index that was intended; "{{index}}" was already set on line {{line}}.',
      sonarRuntime: "{{sonarRuntimeData}}",
    },
    type: "problem",
    docs: {
      description: "Collection elements should not be replaced unconditionally",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-element-overwrite.md",
    },
    schema: [
      {
        enum: ["sonar-runtime"],
      },
    ],
  },
  "sonarjs/no-empty-collection": {
    messages: {
      reviewUsageOfIdentifier:
        'Review this usage of "{{identifierName}}" as it can only be empty here.',
    },
    schema: [],
    type: "problem",
    docs: {
      description: "Empty collections should not be accessed or iterated",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-empty-collection.md",
    },
  },
  "sonarjs/no-extra-arguments": {
    messages: {
      tooManyArguments:
        "This function expects {{expectedArguments}}, but {{providedArguments}} provided.",
      sonarRuntime: "{{sonarRuntimeData}}",
    },
    type: "problem",
    docs: {
      description: "Function calls should not pass extra arguments",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-extra-arguments.md",
    },
    schema: [
      {
        enum: ["sonar-runtime"],
      },
    ],
  },
  "sonarjs/no-gratuitous-expressions": {
    messages: {
      refactorBooleanExpression:
        "This always evaluates to {{value}}. Consider refactoring this code.",
      sonarRuntime: "{{sonarRuntimeData}}",
    },
    type: "suggestion",
    docs: {
      description: "Boolean expressions should not be gratuitous",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-gratuitous-expressions.md",
    },
    schema: [
      {
        enum: ["sonar-runtime"],
      },
    ],
  },
  "sonarjs/no-identical-conditions": {
    messages: {
      duplicatedCondition:
        "This condition is covered by the one on line {{line}}",
      duplicatedCase: "This case duplicates the one on line {{line}}",
      sonarRuntime: "{{sonarRuntimeData}}",
    },
    type: "problem",
    docs: {
      description:
        'Related "if-else-if" and "switch-case" statements should not have the same condition',
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-identical-conditions.md",
    },
    schema: [
      {
        enum: ["sonar-runtime"],
      },
    ],
  },
  "sonarjs/no-identical-expressions": {
    messages: {
      correctIdenticalSubExpressions:
        'Correct one of the identical sub-expressions on both sides of operator "{{operator}}"',
      sonarRuntime: "{{sonarRuntimeData}}",
    },
    type: "problem",
    docs: {
      description:
        "Identical expressions should not be used on both sides of a binary operator",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-identical-expressions.md",
    },
    schema: [
      {
        enum: ["sonar-runtime"],
      },
    ],
  },
  "sonarjs/no-identical-functions": {
    messages: {
      identicalFunctions:
        "Update this function so that its implementation is not identical to the one on line {{line}}.",
      sonarRuntime: "{{sonarRuntimeData}}",
    },
    type: "problem",
    docs: {
      description: "Functions should not have identical implementations",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-identical-functions.md",
    },
    schema: [
      {
        type: "integer",
        minimum: 3,
      },
      {
        enum: ["sonar-runtime"],
      },
    ],
  },
  "sonarjs/no-ignored-return": {
    messages: {
      useForEach:
        'Consider using "forEach" instead of "map" as its return value is not being used here.',
      returnValueMustBeUsed:
        'The return value of "{{methodName}}" must be used.',
    },
    schema: [],
    type: "problem",
    docs: {
      description:
        "Return values from functions without side effects should not be ignored",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-ignored-return.md",
    },
  },
  "sonarjs/no-inverted-boolean-check": {
    messages: {
      useOppositeOperator:
        "Use the opposite operator ({{invertedOperator}}) instead.",
      suggestOperationInversion:
        "Invert inner operation (apply if NaN is not expected)",
    },
    schema: [],
    type: "suggestion",
    docs: {
      description: "Boolean checks should not be inverted",
      recommended: false,
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-inverted-boolean-check.md",
    },
    hasSuggestions: true,
    fixable: "code",
  },
  "sonarjs/no-nested-switch": {
    messages: {
      removeNestedSwitch:
        'Refactor the code to eliminate this nested "switch".',
    },
    schema: [],
    type: "suggestion",
    docs: {
      description: '"switch" statements should not be nested',
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-nested-switch.md",
    },
  },
  "sonarjs/no-nested-template-literals": {
    messages: {
      nestedTemplateLiterals:
        "Refactor this code to not use nested template literals.",
    },
    schema: [],
    type: "suggestion",
    docs: {
      description: "Template literals should not be nested",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-nested-template-literals.md",
    },
  },
  "sonarjs/no-one-iteration-loop": {
    messages: {
      refactorLoop: "Refactor this loop to do more than one iteration.",
    },
    schema: [],
    type: "problem",
    docs: {
      description: "Loops with at most one iteration should be refactored",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-one-iteration-loop.md",
    },
  },
  "sonarjs/no-redundant-boolean": {
    messages: {
      removeUnnecessaryBoolean:
        "Refactor the code to avoid using this boolean literal.",
    },
    schema: [],
    type: "suggestion",
    docs: {
      description: "Boolean literals should not be redundant",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-redundant-boolean.md",
    },
  },
  "sonarjs/no-redundant-jump": {
    messages: {
      removeRedundantJump: "Remove this redundant jump.",
      suggestJumpRemoval: "Remove this redundant jump",
    },
    schema: [],
    type: "suggestion",
    hasSuggestions: true,
    docs: {
      description: "Jump statements should not be redundant",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-redundant-jump.md",
    },
  },
  "sonarjs/no-same-line-conditional": {
    messages: {
      sameLineCondition:
        'Move this "if" to a new line or add the missing "else".',
      sonarRuntime: "{{sonarRuntimeData}}",
      suggestAddingElse: 'Add "else" keyword',
      suggestAddingNewline: 'Move this "if" to a new line',
    },
    type: "problem",
    hasSuggestions: true,
    docs: {
      description: "Conditionals should start on new lines",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-same-line-conditional.md",
    },
    schema: [
      {
        enum: ["sonar-runtime"],
      },
    ],
  },
  "sonarjs/no-small-switch": {
    messages: {
      smallSwitch: '"switch" statements should have at least 3 "case" clauses',
    },
    schema: [],
    type: "suggestion",
    docs: {
      description: '"switch" statements should have at least 3 "case" clauses',
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-small-switch.md",
    },
  },
  "sonarjs/no-unused-collection": {
    messages: {
      unusedCollection:
        "Either use this collection's contents or remove the collection.",
    },
    schema: [],
    type: "problem",
    docs: {
      description: "Collection and array contents should be used",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-unused-collection.md",
    },
  },
  "sonarjs/no-use-of-empty-return-value": {
    messages: {
      removeUseOfOutput:
        'Remove this use of the output from "{{name}}"; "{{name}}" doesn\'t return anything.',
    },
    schema: [],
    type: "problem",
    docs: {
      description:
        "The output of functions that don't return anything should not be used",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-use-of-empty-return-value.md",
    },
  },
  "sonarjs/no-useless-catch": {
    messages: {
      uselessCatch:
        "Add logic to this catch clause or eliminate it and rethrow the exception automatically.",
    },
    schema: [],
    type: "suggestion",
    docs: {
      description: '"catch" clauses should do more than rethrow',
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/no-useless-catch.md",
    },
  },
  "sonarjs/non-existent-operator": {
    messages: {
      useExistingOperator: 'Was "{{operator}}=" meant instead?',
      suggestExistingOperator: 'Replace with "{{operator}}" operator',
    },
    schema: [],
    type: "problem",
    hasSuggestions: true,
    docs: {
      description:
        'Non-existent operators "=+", "=-" and "=!" should not be used',
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/non-existent-operator.md",
    },
  },
  "sonarjs/prefer-immediate-return": {
    messages: {
      doImmediateAction:
        'Immediately {{action}} this expression instead of assigning it to the temporary variable "{{variable}}".',
    },
    schema: [],
    type: "suggestion",
    docs: {
      description:
        "Local variables should not be declared and then immediately returned or thrown",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/prefer-immediate-return.md",
    },
    fixable: "code",
  },
  "sonarjs/prefer-object-literal": {
    messages: {
      declarePropertiesInsideObject:
        "Declare one or more properties of this object inside of the object literal syntax instead of using separate statements.",
    },
    schema: [],
    type: "suggestion",
    docs: {
      description: "Object literal syntax should be used",
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/prefer-object-literal.md",
    },
  },
  "sonarjs/prefer-single-boolean-return": {
    messages: {
      replaceIfThenElseByReturn:
        "Replace this if-then-else flow by a single return statement.",
      suggest: "Replace with single return statement",
      suggestCast: 'Replace with single return statement using "!!" cast',
      suggestBoolean:
        "Replace with single return statement without cast (condition should be boolean!)",
    },
    schema: [],
    type: "suggestion",
    hasSuggestions: true,
    docs: {
      description:
        'Return of boolean expressions should not be wrapped into an "if-then-else" statement',
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/prefer-single-boolean-return.md",
    },
  },
  "sonarjs/prefer-while": {
    messages: {
      replaceForWithWhileLoop: 'Replace this "for" loop with a "while" loop.',
    },
    schema: [],
    type: "suggestion",
    docs: {
      description: 'A "while" loop should be used instead of a "for" loop',
      recommended: "error",
      url: "https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/docs/rules/prefer-while.md",
    },
    fixable: "code",
  },
  "@typescript-eslint/adjacent-overload-signatures": {
    type: "suggestion",
    docs: {
      description: "Require that function overload signatures be consecutive",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/adjacent-overload-signatures",
    },
    schema: [],
    messages: {
      adjacentSignature: "All {{name}} signatures should be adjacent.",
    },
  },
  "@typescript-eslint/array-type": {
    type: "suggestion",
    docs: {
      description:
        "Require consistently using either `T[]` or `Array<T>` for arrays",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/array-type",
    },
    fixable: "code",
    messages: {
      errorStringGeneric:
        "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.",
      errorStringArray:
        "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.",
      errorStringArraySimple:
        "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.",
      errorStringGenericSimple:
        "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead.",
    },
    schema: [
      {
        $defs: {
          arrayOption: {
            type: "string",
            enum: ["array", "generic", "array-simple"],
          },
        },
        additionalProperties: false,
        properties: {
          default: {
            $ref: "#/items/0/$defs/arrayOption",
            description: "The array type expected for mutable cases.",
          },
          readonly: {
            $ref: "#/items/0/$defs/arrayOption",
            description:
              "The array type expected for readonly cases. If omitted, the value for `default` will be used.",
          },
        },
        type: "object",
      },
    ],
  },
  "@typescript-eslint/await-thenable": {
    docs: {
      description: "Disallow awaiting a value that is not a Thenable",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/await-thenable",
    },
    hasSuggestions: true,
    messages: {
      await: 'Unexpected `await` of a non-Promise (non-"Thenable") value.',
      removeAwait: "Remove unnecessary `await`.",
    },
    schema: [],
    type: "problem",
  },
  "@typescript-eslint/ban-ts-comment": {
    type: "problem",
    docs: {
      description:
        "Disallow `@ts-<directive>` comments or require descriptions after directives",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/ban-ts-comment",
    },
    messages: {
      tsDirectiveComment:
        'Do not use "@ts-{{directive}}" because it alters compilation errors.',
      tsIgnoreInsteadOfExpectError:
        'Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.',
      tsDirectiveCommentRequiresDescription:
        'Include a description after the "@ts-{{directive}}" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.',
      tsDirectiveCommentDescriptionNotMatchPattern:
        'The description for the "@ts-{{directive}}" directive must match the {{format}} format.',
      replaceTsIgnoreWithTsExpectError:
        'Replace "@ts-ignore" with "@ts-expect-error".',
    },
    hasSuggestions: true,
    schema: [
      {
        $defs: {
          directiveConfigSchema: {
            oneOf: [
              {
                type: "boolean",
                default: true,
              },
              {
                type: "string",
                enum: ["allow-with-description"],
              },
              {
                type: "object",
                additionalProperties: false,
                properties: {
                  descriptionFormat: {
                    type: "string",
                  },
                },
              },
            ],
          },
        },
        properties: {
          "ts-expect-error": {
            $ref: "#/items/0/$defs/directiveConfigSchema",
          },
          "ts-ignore": {
            $ref: "#/items/0/$defs/directiveConfigSchema",
          },
          "ts-nocheck": {
            $ref: "#/items/0/$defs/directiveConfigSchema",
          },
          "ts-check": {
            $ref: "#/items/0/$defs/directiveConfigSchema",
          },
          minimumDescriptionLength: {
            type: "number",
            default: 3,
          },
        },
        type: "object",
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/ban-tslint-comment": {
    type: "suggestion",
    docs: {
      description: "Disallow `// tslint:<rule-flag>` comments",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/ban-tslint-comment",
    },
    messages: {
      commentDetected: 'tslint comment detected: "{{ text }}"',
    },
    schema: [],
    fixable: "code",
  },
  "@typescript-eslint/ban-types": {
    type: "suggestion",
    docs: {
      description: "Disallow certain types",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/ban-types",
    },
    fixable: "code",
    hasSuggestions: true,
    messages: {
      bannedTypeMessage: "Don't use `{{name}}` as a type.{{customMessage}}",
      bannedTypeReplacement: "Replace `{{name}}` with `{{replacement}}`.",
    },
    schema: [
      {
        $defs: {
          banConfig: {
            oneOf: [
              {
                type: "null",
                description: "Bans the type with the default message",
              },
              {
                type: "boolean",
                enum: [false],
                description:
                  "Un-bans the type (useful when paired with `extendDefaults`)",
              },
              {
                type: "boolean",
                enum: [true],
                description: "Bans the type with the default message",
              },
              {
                type: "string",
                description: "Bans the type with a custom message",
              },
              {
                type: "object",
                description: "Bans a type",
                properties: {
                  message: {
                    type: "string",
                    description: "Custom error message",
                  },
                  fixWith: {
                    type: "string",
                    description:
                      "Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option.",
                  },
                  suggest: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                    description: "Types to suggest replacing with.",
                    additionalItems: false,
                  },
                },
                additionalProperties: false,
              },
            ],
          },
        },
        type: "object",
        properties: {
          types: {
            type: "object",
            additionalProperties: {
              $ref: "#/items/0/$defs/banConfig",
            },
          },
          extendDefaults: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/block-spacing": {
    type: "layout",
    docs: {
      description:
        "Disallow or enforce spaces inside of blocks after opening block and before closing block",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/block-spacing",
    },
    fixable: "whitespace",
    hasSuggestions: undefined,
    schema: [
      {
        enum: ["always", "never"],
      },
    ],
    messages: {
      missing: "Requires a space {{location}} '{{token}}'.",
      extra: "Unexpected space(s) {{location}} '{{token}}'.",
    },
  },
  "@typescript-eslint/brace-style": {
    type: "layout",
    docs: {
      description: "Enforce consistent brace style for blocks",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/brace-style",
    },
    messages: {
      nextLineOpen:
        "Opening curly brace does not appear on the same line as controlling statement.",
      sameLineOpen:
        "Opening curly brace appears on the same line as controlling statement.",
      blockSameLine: "Statement inside of curly braces should be on next line.",
      nextLineClose:
        "Closing curly brace does not appear on the same line as the subsequent block.",
      singleLineClose:
        "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
      sameLineClose:
        "Closing curly brace appears on the same line as the subsequent block.",
    },
    fixable: "whitespace",
    hasSuggestions: undefined,
    schema: [
      {
        enum: ["1tbs", "stroustrup", "allman"],
      },
      {
        type: "object",
        properties: {
          allowSingleLine: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/class-literal-property-style": {
    type: "problem",
    docs: {
      description:
        "Enforce that literals on classes are exposed in a consistent style",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/class-literal-property-style",
    },
    hasSuggestions: true,
    messages: {
      preferFieldStyle: "Literals should be exposed using readonly fields.",
      preferFieldStyleSuggestion: "Replace the literals with readonly fields.",
      preferGetterStyle: "Literals should be exposed using getters.",
      preferGetterStyleSuggestion: "Replace the literals with getters.",
    },
    schema: [
      {
        type: "string",
        enum: ["fields", "getters"],
      },
    ],
  },
  "@typescript-eslint/class-methods-use-this": {
    type: "suggestion",
    docs: {
      description: "Enforce that class methods utilize `this`",
      extendsBaseRule: true,
      requiresTypeChecking: false,
      url: "https://typescript-eslint.io/rules/class-methods-use-this",
    },
    fixable: "code",
    hasSuggestions: false,
    schema: [
      {
        type: "object",
        properties: {
          exceptMethods: {
            type: "array",
            description:
              "Allows specified method names to be ignored with this rule",
            items: {
              type: "string",
            },
          },
          enforceForClassFields: {
            type: "boolean",
            description:
              "Enforces that functions used as instance field initializers utilize `this`",
            default: true,
          },
          ignoreOverrideMethods: {
            type: "boolean",
            description: "Ingore members marked with the `override` modifier",
          },
          ignoreClassesThatImplementAnInterface: {
            type: "boolean",
            description:
              "Ignore classes that specifically implement some interface",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      missingThis: "Expected 'this' to be used by class {{name}}.",
    },
  },
  "@typescript-eslint/comma-dangle": {
    type: "layout",
    docs: {
      description: "Require or disallow trailing commas",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/comma-dangle",
    },
    schema: {
      $defs: {
        value: {
          type: "string",
          enum: ["always-multiline", "always", "never", "only-multiline"],
        },
        valueWithIgnore: {
          type: "string",
          enum: [
            "always-multiline",
            "always",
            "never",
            "only-multiline",
            "ignore",
          ],
        },
      },
      type: "array",
      items: [
        {
          oneOf: [
            {
              $ref: "#/$defs/value",
            },
            {
              type: "object",
              properties: {
                arrays: {
                  $ref: "#/$defs/valueWithIgnore",
                },
                objects: {
                  $ref: "#/$defs/valueWithIgnore",
                },
                imports: {
                  $ref: "#/$defs/valueWithIgnore",
                },
                exports: {
                  $ref: "#/$defs/valueWithIgnore",
                },
                functions: {
                  $ref: "#/$defs/valueWithIgnore",
                },
                enums: {
                  $ref: "#/$defs/valueWithIgnore",
                },
                generics: {
                  $ref: "#/$defs/valueWithIgnore",
                },
                tuples: {
                  $ref: "#/$defs/valueWithIgnore",
                },
              },
              additionalProperties: false,
            },
          ],
        },
      ],
      additionalItems: false,
    },
    fixable: "code",
    hasSuggestions: undefined,
    messages: {
      unexpected: "Unexpected trailing comma.",
      missing: "Missing trailing comma.",
    },
  },
  "@typescript-eslint/comma-spacing": {
    type: "layout",
    docs: {
      description: "Enforce consistent spacing before and after commas",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/comma-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        type: "object",
        properties: {
          before: {
            type: "boolean",
            default: false,
          },
          after: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpected: "There should be no space {{loc}} ','.",
      missing: "A space is required {{loc}} ','.",
    },
  },
  "@typescript-eslint/consistent-generic-constructors": {
    type: "suggestion",
    docs: {
      description:
        "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/consistent-generic-constructors",
    },
    messages: {
      preferTypeAnnotation:
        "The generic type arguments should be specified as part of the type annotation.",
      preferConstructor:
        "The generic type arguments should be specified as part of the constructor type arguments.",
    },
    fixable: "code",
    schema: [
      {
        type: "string",
        enum: ["type-annotation", "constructor"],
      },
    ],
  },
  "@typescript-eslint/consistent-indexed-object-style": {
    type: "suggestion",
    docs: {
      description: "Require or disallow the `Record` type",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/consistent-indexed-object-style",
    },
    messages: {
      preferRecord: "A record is preferred over an index signature.",
      preferIndexSignature: "An index signature is preferred over a record.",
    },
    fixable: "code",
    schema: [
      {
        type: "string",
        enum: ["record", "index-signature"],
      },
    ],
  },
  "@typescript-eslint/consistent-type-assertions": {
    type: "suggestion",
    fixable: "code",
    hasSuggestions: true,
    docs: {
      description: "Enforce consistent usage of type assertions",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/consistent-type-assertions",
    },
    messages: {
      as: "Use 'as {{cast}}' instead of '<{{cast}}>'.",
      "angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
      never: "Do not use any type assertions.",
      unexpectedObjectTypeAssertion: "Always prefer const x: T = { ... }.",
      replaceObjectTypeAssertionWithAnnotation:
        "Use const x: {{cast}} = { ... } instead.",
      replaceObjectTypeAssertionWithSatisfies:
        "Use const x = { ... } satisfies {{cast}} instead.",
    },
    schema: [
      {
        oneOf: [
          {
            type: "object",
            properties: {
              assertionStyle: {
                type: "string",
                enum: ["never"],
              },
            },
            additionalProperties: false,
            required: ["assertionStyle"],
          },
          {
            type: "object",
            properties: {
              assertionStyle: {
                type: "string",
                enum: ["as", "angle-bracket"],
              },
              objectLiteralTypeAssertions: {
                type: "string",
                enum: ["allow", "allow-as-parameter", "never"],
              },
            },
            additionalProperties: false,
            required: ["assertionStyle"],
          },
        ],
      },
    ],
  },
  "@typescript-eslint/consistent-type-definitions": {
    type: "suggestion",
    docs: {
      description:
        "Enforce type definitions to consistently use either `interface` or `type`",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/consistent-type-definitions",
    },
    messages: {
      interfaceOverType: "Use an `interface` instead of a `type`.",
      typeOverInterface: "Use a `type` instead of an `interface`.",
    },
    schema: [
      {
        type: "string",
        enum: ["interface", "type"],
      },
    ],
    fixable: "code",
  },
  "@typescript-eslint/consistent-type-exports": {
    type: "suggestion",
    docs: {
      description: "Enforce consistent usage of type exports",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/consistent-type-exports",
    },
    messages: {
      typeOverValue:
        "All exports in the declaration are only used as types. Use `export type`.",
      singleExportIsType:
        "Type export {{exportNames}} is not a value and should be exported using `export type`.",
      multipleExportsAreTypes:
        "Type exports {{exportNames}} are not values and should be exported using `export type`.",
    },
    schema: [
      {
        type: "object",
        properties: {
          fixMixedExportsWithInlineTypeSpecifier: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
  },
  "@typescript-eslint/consistent-type-imports": {
    type: "suggestion",
    docs: {
      description: "Enforce consistent usage of type imports",
      url: "https://typescript-eslint.io/rules/consistent-type-imports",
    },
    messages: {
      typeOverValue:
        "All imports in the declaration are only used as types. Use `import type`.",
      someImportsAreOnlyTypes:
        "Imports {{typeImports}} are only used as types.",
      aImportIsOnlyTypes: "Import {{typeImports}} is only used as types.",
      someImportsInDecoMeta:
        "Type imports {{typeImports}} are used by decorator metadata.",
      aImportInDecoMeta:
        "Type import {{typeImports}} is used by decorator metadata.",
      valueOverType: "Use an `import` instead of an `import type`.",
      noImportTypeAnnotations: "`import()` type annotations are forbidden.",
    },
    schema: [
      {
        type: "object",
        properties: {
          prefer: {
            type: "string",
            enum: ["type-imports", "no-type-imports"],
          },
          disallowTypeAnnotations: {
            type: "boolean",
          },
          fixStyle: {
            type: "string",
            enum: ["separate-type-imports", "inline-type-imports"],
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
  },
  "@typescript-eslint/default-param-last": {
    type: "suggestion",
    docs: {
      description: "Enforce default parameters to be last",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/default-param-last",
    },
    schema: [],
    messages: {
      shouldBeLast: "Default parameters should be last.",
    },
  },
  "@typescript-eslint/dot-notation": {
    type: "suggestion",
    docs: {
      description: "Enforce dot notation whenever possible",
      recommended: "stylistic",
      extendsBaseRule: true,
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/dot-notation",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowKeywords: {
            type: "boolean",
            default: true,
          },
          allowPattern: {
            type: "string",
            default: "",
          },
          allowPrivateClassPropertyAccess: {
            type: "boolean",
            default: false,
          },
          allowProtectedClassPropertyAccess: {
            type: "boolean",
            default: false,
          },
          allowIndexSignaturePropertyAccess: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    hasSuggestions: undefined,
    messages: {
      useDot: "[{{key}}] is better written in dot notation.",
      useBrackets: ".{{key}} is a syntax error.",
    },
  },
  "@typescript-eslint/explicit-function-return-type": {
    type: "problem",
    docs: {
      description:
        "Require explicit return types on functions and class methods",
      url: "https://typescript-eslint.io/rules/explicit-function-return-type",
    },
    messages: {
      missingReturnType: "Missing return type on function.",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowConciseArrowFunctionExpressionsStartingWithVoid: {
            description:
              "Whether to allow arrow functions that start with the `void` keyword.",
            type: "boolean",
          },
          allowExpressions: {
            description:
              "Whether to ignore function expressions (functions which are not part of a declaration).",
            type: "boolean",
          },
          allowHigherOrderFunctions: {
            description:
              "Whether to ignore functions immediately returning another function expression.",
            type: "boolean",
          },
          allowTypedFunctionExpressions: {
            description:
              "Whether to ignore type annotations on the variable of function expressions.",
            type: "boolean",
          },
          allowDirectConstAssertionInArrowFunctions: {
            description:
              "Whether to ignore arrow functions immediately returning a `as const` value.",
            type: "boolean",
          },
          allowFunctionsWithoutTypeParameters: {
            description:
              "Whether to ignore functions that don't have generic type parameters.",
            type: "boolean",
          },
          allowedNames: {
            description:
              "An array of function/method names that will not have their arguments or return values checked.",
            items: {
              type: "string",
            },
            type: "array",
          },
          allowIIFEs: {
            description:
              "Whether to ignore immediately invoked function expressions (IIFEs).",
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/explicit-member-accessibility": {
    hasSuggestions: true,
    type: "problem",
    docs: {
      description:
        "Require explicit accessibility modifiers on class properties and methods",
      url: "https://typescript-eslint.io/rules/explicit-member-accessibility",
    },
    fixable: "code",
    messages: {
      missingAccessibility:
        "Missing accessibility modifier on {{type}} {{name}}.",
      unwantedPublicAccessibility:
        "Public accessibility modifier on {{type}} {{name}}.",
      addExplicitAccessibility: "Add '{{ type }}' accessibility modifier",
    },
    schema: [
      {
        $defs: {
          accessibilityLevel: {
            oneOf: [
              {
                type: "string",
                enum: ["explicit"],
                description: "Always require an accessor.",
              },
              {
                type: "string",
                enum: ["no-public"],
                description: "Require an accessor except when public.",
              },
              {
                type: "string",
                enum: ["off"],
                description: "Never check whether there is an accessor.",
              },
            ],
          },
        },
        type: "object",
        properties: {
          accessibility: {
            $ref: "#/items/0/$defs/accessibilityLevel",
          },
          overrides: {
            type: "object",
            properties: {
              accessors: {
                $ref: "#/items/0/$defs/accessibilityLevel",
              },
              constructors: {
                $ref: "#/items/0/$defs/accessibilityLevel",
              },
              methods: {
                $ref: "#/items/0/$defs/accessibilityLevel",
              },
              properties: {
                $ref: "#/items/0/$defs/accessibilityLevel",
              },
              parameterProperties: {
                $ref: "#/items/0/$defs/accessibilityLevel",
              },
            },
            additionalProperties: false,
          },
          ignoredMethodNames: {
            type: "array",
            items: {
              type: "string",
            },
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/explicit-module-boundary-types": {
    type: "problem",
    docs: {
      description:
        "Require explicit return and argument types on exported functions' and classes' public class methods",
      url: "https://typescript-eslint.io/rules/explicit-module-boundary-types",
    },
    messages: {
      missingReturnType: "Missing return type on function.",
      missingArgType: "Argument '{{name}}' should be typed.",
      missingArgTypeUnnamed: "{{type}} argument should be typed.",
      anyTypedArg: "Argument '{{name}}' should be typed with a non-any type.",
      anyTypedArgUnnamed:
        "{{type}} argument should be typed with a non-any type.",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowArgumentsExplicitlyTypedAsAny: {
            description:
              "Whether to ignore arguments that are explicitly typed as `any`.",
            type: "boolean",
          },
          allowDirectConstAssertionInArrowFunctions: {
            description:
              "Whether to ignore return type annotations on body-less arrow functions that return an `as const` type assertion.\nYou must still type the parameters of the function.",
            type: "boolean",
          },
          allowedNames: {
            description:
              "An array of function/method names that will not have their arguments or return values checked.",
            items: {
              type: "string",
            },
            type: "array",
          },
          allowHigherOrderFunctions: {
            description:
              "Whether to ignore return type annotations on functions immediately returning another function expression.\nYou must still type the parameters of the function.",
            type: "boolean",
          },
          allowTypedFunctionExpressions: {
            description:
              "Whether to ignore type annotations on the variable of a function expresion.",
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/func-call-spacing": {
    type: "layout",
    docs: {
      description:
        "Require or disallow spacing between function identifiers and their invocations",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/func-call-spacing",
    },
    fixable: "whitespace",
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              type: "string",
              enum: ["never"],
            },
          ],
          minItems: 0,
          maxItems: 1,
        },
        {
          type: "array",
          items: [
            {
              type: "string",
              enum: ["always"],
            },
            {
              type: "object",
              properties: {
                allowNewlines: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
      ],
    },
    messages: {
      unexpectedWhitespace:
        "Unexpected whitespace between function name and paren.",
      unexpectedNewline: "Unexpected newline between function name and paren.",
      missing: "Missing space between function name and paren.",
    },
  },
  "@typescript-eslint/indent": {
    type: "layout",
    docs: {
      description: "Enforce consistent indentation",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/indent",
    },
    fixable: "whitespace",
    hasSuggestions: undefined,
    schema: [
      {
        oneOf: [
          {
            enum: ["tab"],
          },
          {
            type: "integer",
            minimum: 0,
          },
        ],
      },
      {
        type: "object",
        properties: {
          SwitchCase: {
            type: "integer",
            minimum: 0,
            default: 0,
          },
          VariableDeclarator: {
            oneOf: [
              {
                oneOf: [
                  {
                    type: "integer",
                    minimum: 0,
                  },
                  {
                    enum: ["first", "off"],
                  },
                ],
              },
              {
                type: "object",
                properties: {
                  var: {
                    oneOf: [
                      {
                        type: "integer",
                        minimum: 0,
                      },
                      {
                        enum: ["first", "off"],
                      },
                    ],
                  },
                  let: {
                    oneOf: [
                      {
                        type: "integer",
                        minimum: 0,
                      },
                      {
                        enum: ["first", "off"],
                      },
                    ],
                  },
                  const: {
                    oneOf: [
                      {
                        type: "integer",
                        minimum: 0,
                      },
                      {
                        enum: ["first", "off"],
                      },
                    ],
                  },
                },
                additionalProperties: false,
              },
            ],
          },
          outerIIFEBody: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                enum: ["off"],
              },
            ],
          },
          MemberExpression: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                enum: ["off"],
              },
            ],
          },
          FunctionDeclaration: {
            type: "object",
            properties: {
              parameters: {
                oneOf: [
                  {
                    type: "integer",
                    minimum: 0,
                  },
                  {
                    enum: ["first", "off"],
                  },
                ],
              },
              body: {
                type: "integer",
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
          FunctionExpression: {
            type: "object",
            properties: {
              parameters: {
                oneOf: [
                  {
                    type: "integer",
                    minimum: 0,
                  },
                  {
                    enum: ["first", "off"],
                  },
                ],
              },
              body: {
                type: "integer",
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
          StaticBlock: {
            type: "object",
            properties: {
              body: {
                type: "integer",
                minimum: 0,
              },
            },
            additionalProperties: false,
          },
          CallExpression: {
            type: "object",
            properties: {
              arguments: {
                oneOf: [
                  {
                    type: "integer",
                    minimum: 0,
                  },
                  {
                    enum: ["first", "off"],
                  },
                ],
              },
            },
            additionalProperties: false,
          },
          ArrayExpression: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                enum: ["first", "off"],
              },
            ],
          },
          ObjectExpression: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                enum: ["first", "off"],
              },
            ],
          },
          ImportDeclaration: {
            oneOf: [
              {
                type: "integer",
                minimum: 0,
              },
              {
                enum: ["first", "off"],
              },
            ],
          },
          flatTernaryExpressions: {
            type: "boolean",
            default: false,
          },
          offsetTernaryExpressions: {
            type: "boolean",
            default: false,
          },
          ignoredNodes: {
            type: "array",
            items: {
              type: "string",
              not: {
                pattern: ":exit$",
              },
            },
          },
          ignoreComments: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      wrongIndentation:
        "Expected indentation of {{expected}} but found {{actual}}.",
    },
  },
  "@typescript-eslint/init-declarations": {
    type: "suggestion",
    docs: {
      description:
        "Require or disallow initialization in variable declarations",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/init-declarations",
    },
    hasSuggestions: undefined,
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["always"],
            },
          ],
          minItems: 0,
          maxItems: 1,
        },
        {
          type: "array",
          items: [
            {
              enum: ["never"],
            },
            {
              type: "object",
              properties: {
                ignoreForLoopInit: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
      ],
    },
    messages: {
      initialized:
        "Variable '{{idName}}' should be initialized on declaration.",
      notInitialized:
        "Variable '{{idName}}' should not be initialized on declaration.",
    },
  },
  "@typescript-eslint/key-spacing": {
    type: "layout",
    docs: {
      description:
        "Enforce consistent spacing between property names and type annotations in types and interfaces",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/key-spacing",
    },
    fixable: "whitespace",
    hasSuggestions: undefined,
    schema: [
      {
        anyOf: [
          {
            type: "object",
            properties: {
              align: {
                anyOf: [
                  {
                    enum: ["colon", "value"],
                  },
                  {
                    type: "object",
                    properties: {
                      mode: {
                        enum: ["strict", "minimum"],
                      },
                      on: {
                        enum: ["colon", "value"],
                      },
                      beforeColon: {
                        type: "boolean",
                      },
                      afterColon: {
                        type: "boolean",
                      },
                    },
                    additionalProperties: false,
                  },
                ],
              },
              mode: {
                enum: ["strict", "minimum"],
              },
              beforeColon: {
                type: "boolean",
              },
              afterColon: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              singleLine: {
                type: "object",
                properties: {
                  mode: {
                    enum: ["strict", "minimum"],
                  },
                  beforeColon: {
                    type: "boolean",
                  },
                  afterColon: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              multiLine: {
                type: "object",
                properties: {
                  align: {
                    anyOf: [
                      {
                        enum: ["colon", "value"],
                      },
                      {
                        type: "object",
                        properties: {
                          mode: {
                            enum: ["strict", "minimum"],
                          },
                          on: {
                            enum: ["colon", "value"],
                          },
                          beforeColon: {
                            type: "boolean",
                          },
                          afterColon: {
                            type: "boolean",
                          },
                        },
                        additionalProperties: false,
                      },
                    ],
                  },
                  mode: {
                    enum: ["strict", "minimum"],
                  },
                  beforeColon: {
                    type: "boolean",
                  },
                  afterColon: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              singleLine: {
                type: "object",
                properties: {
                  mode: {
                    enum: ["strict", "minimum"],
                  },
                  beforeColon: {
                    type: "boolean",
                  },
                  afterColon: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              multiLine: {
                type: "object",
                properties: {
                  mode: {
                    enum: ["strict", "minimum"],
                  },
                  beforeColon: {
                    type: "boolean",
                  },
                  afterColon: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              align: {
                type: "object",
                properties: {
                  mode: {
                    enum: ["strict", "minimum"],
                  },
                  on: {
                    enum: ["colon", "value"],
                  },
                  beforeColon: {
                    type: "boolean",
                  },
                  afterColon: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      extraKey: "Extra space after {{computed}}key '{{key}}'.",
      extraValue: "Extra space before value for {{computed}}key '{{key}}'.",
      missingKey: "Missing space after {{computed}}key '{{key}}'.",
      missingValue: "Missing space before value for {{computed}}key '{{key}}'.",
    },
  },
  "@typescript-eslint/keyword-spacing": {
    type: "layout",
    docs: {
      description: "Enforce consistent spacing before and after keywords",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/keyword-spacing",
    },
    fixable: "whitespace",
    hasSuggestions: undefined,
    schema: [
      {
        type: "object",
        properties: {
          before: {
            type: "boolean",
            default: true,
          },
          after: {
            type: "boolean",
            default: true,
          },
          overrides: {
            type: "object",
            properties: {
              abstract: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              as: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              async: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              await: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              boolean: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              break: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              byte: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              case: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              catch: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              char: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              class: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              const: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              continue: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              debugger: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              default: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              delete: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              do: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              double: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              else: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              enum: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              export: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              extends: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              false: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              final: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              finally: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              float: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              for: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              from: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              function: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              get: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              goto: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              if: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              implements: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              import: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              in: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              instanceof: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              int: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              interface: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              let: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              long: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              native: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              new: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              null: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              of: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              package: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              private: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              protected: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              public: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              return: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              set: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              short: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              static: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              super: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              switch: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              synchronized: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              this: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              throw: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              throws: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              transient: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              true: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              try: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              typeof: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              var: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              void: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              volatile: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              while: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              with: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              yield: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              type: {
                type: "object",
                properties: {
                  before: {
                    type: "boolean",
                  },
                  after: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      expectedBefore: 'Expected space(s) before "{{value}}".',
      expectedAfter: 'Expected space(s) after "{{value}}".',
      unexpectedBefore: 'Unexpected space(s) before "{{value}}".',
      unexpectedAfter: 'Unexpected space(s) after "{{value}}".',
    },
  },
  "@typescript-eslint/lines-around-comment": {
    type: "layout",
    docs: {
      description: "Require empty lines around comments",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/lines-around-comment",
    },
    schema: [
      {
        type: "object",
        properties: {
          beforeBlockComment: {
            type: "boolean",
            default: true,
          },
          afterBlockComment: {
            type: "boolean",
            default: false,
          },
          beforeLineComment: {
            type: "boolean",
            default: false,
          },
          afterLineComment: {
            type: "boolean",
            default: false,
          },
          allowBlockStart: {
            type: "boolean",
            default: false,
          },
          allowBlockEnd: {
            type: "boolean",
            default: false,
          },
          allowClassStart: {
            type: "boolean",
          },
          allowClassEnd: {
            type: "boolean",
          },
          allowObjectStart: {
            type: "boolean",
          },
          allowObjectEnd: {
            type: "boolean",
          },
          allowArrayStart: {
            type: "boolean",
          },
          allowArrayEnd: {
            type: "boolean",
          },
          allowInterfaceStart: {
            type: "boolean",
          },
          allowInterfaceEnd: {
            type: "boolean",
          },
          allowTypeStart: {
            type: "boolean",
          },
          allowTypeEnd: {
            type: "boolean",
          },
          allowEnumStart: {
            type: "boolean",
          },
          allowEnumEnd: {
            type: "boolean",
          },
          allowModuleStart: {
            type: "boolean",
          },
          allowModuleEnd: {
            type: "boolean",
          },
          ignorePattern: {
            type: "string",
          },
          applyDefaultIgnorePatterns: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "whitespace",
    hasSuggestions: undefined,
    messages: {
      after: "Expected line after comment.",
      before: "Expected line before comment.",
    },
  },
  "@typescript-eslint/lines-between-class-members": {
    type: "layout",
    docs: {
      description: "Require or disallow an empty line between class members",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/lines-between-class-members",
    },
    fixable: "whitespace",
    hasSuggestions: undefined,
    schema: [
      {
        anyOf: [
          {
            type: "object",
            properties: {
              enforce: {
                type: "array",
                items: {
                  type: "object",
                  properties: {
                    blankLine: {
                      enum: ["always", "never"],
                    },
                    prev: {
                      enum: ["method", "field", "*"],
                    },
                    next: {
                      enum: ["method", "field", "*"],
                    },
                  },
                  additionalProperties: false,
                  required: ["blankLine", "prev", "next"],
                },
                minItems: 1,
              },
            },
            additionalProperties: false,
            required: ["enforce"],
          },
          {
            enum: ["always", "never"],
          },
        ],
      },
      {
        type: "object",
        properties: {
          exceptAfterSingleLine: {
            type: "boolean",
            default: false,
          },
          exceptAfterOverload: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      never: "Unexpected blank line between class members.",
      always: "Expected blank line between class members.",
    },
  },
  "@typescript-eslint/max-params": {
    type: "suggestion",
    docs: {
      description:
        "Enforce a maximum number of parameters in function definitions",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/max-params",
    },
    schema: [
      {
        type: "object",
        properties: {
          maximum: {
            type: "integer",
            minimum: 0,
          },
          max: {
            type: "integer",
            minimum: 0,
          },
          countVoidThis: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      exceed:
        "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.",
    },
  },
  "@typescript-eslint/member-delimiter-style": {
    type: "layout",
    docs: {
      description:
        "Require a specific member delimiter style for interfaces and type literals",
      url: "https://typescript-eslint.io/rules/member-delimiter-style",
    },
    fixable: "whitespace",
    messages: {
      unexpectedComma: "Unexpected separator (,).",
      unexpectedSemi: "Unexpected separator (;).",
      expectedComma: "Expected a comma.",
      expectedSemi: "Expected a semicolon.",
    },
    schema: [
      {
        $defs: {
          multiLineOption: {
            type: "string",
            enum: ["none", "semi", "comma"],
          },
          singleLineOption: {
            type: "string",
            enum: ["semi", "comma"],
          },
          delimiterConfig: {
            type: "object",
            properties: {
              multiline: {
                type: "object",
                properties: {
                  delimiter: {
                    $ref: "#/items/0/$defs/multiLineOption",
                  },
                  requireLast: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              singleline: {
                type: "object",
                properties: {
                  delimiter: {
                    $ref: "#/items/0/$defs/singleLineOption",
                  },
                  requireLast: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
        },
        type: "object",
        properties: {
          multiline: {
            type: "object",
            properties: {
              delimiter: {
                $ref: "#/items/0/$defs/multiLineOption",
              },
              requireLast: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          singleline: {
            type: "object",
            properties: {
              delimiter: {
                $ref: "#/items/0/$defs/singleLineOption",
              },
              requireLast: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
          overrides: {
            type: "object",
            properties: {
              interface: {
                $ref: "#/items/0/$defs/delimiterConfig",
              },
              typeLiteral: {
                $ref: "#/items/0/$defs/delimiterConfig",
              },
            },
            additionalProperties: false,
          },
          multilineDetection: {
            type: "string",
            enum: ["brackets", "last-member"],
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/member-ordering": {
    type: "suggestion",
    docs: {
      description: "Require a consistent member declaration order",
      url: "https://typescript-eslint.io/rules/member-ordering",
    },
    messages: {
      incorrectOrder:
        "Member {{member}} should be declared before member {{beforeMember}}.",
      incorrectGroupOrder:
        "Member {{name}} should be declared before all {{rank}} definitions.",
      incorrectRequiredMembersOrder:
        "Member {{member}} should be declared after all {{optionalOrRequired}} members.",
    },
    schema: [
      {
        $defs: {
          orderOptions: {
            type: "string",
            enum: [
              "alphabetically",
              "alphabetically-case-insensitive",
              "as-written",
              "natural",
              "natural-case-insensitive",
            ],
          },
          optionalityOrderOptions: {
            type: "string",
            enum: ["optional-first", "required-first"],
          },
          allItems: {
            type: "string",
            enum: [
              "readonly-signature",
              "signature",
              "readonly-field",
              "public-readonly-field",
              "public-decorated-readonly-field",
              "decorated-readonly-field",
              "static-readonly-field",
              "public-static-readonly-field",
              "instance-readonly-field",
              "public-instance-readonly-field",
              "abstract-readonly-field",
              "public-abstract-readonly-field",
              "protected-readonly-field",
              "protected-decorated-readonly-field",
              "protected-static-readonly-field",
              "protected-instance-readonly-field",
              "protected-abstract-readonly-field",
              "private-readonly-field",
              "private-decorated-readonly-field",
              "private-static-readonly-field",
              "private-instance-readonly-field",
              "#private-readonly-field",
              "#private-static-readonly-field",
              "#private-instance-readonly-field",
              "field",
              "public-field",
              "public-decorated-field",
              "decorated-field",
              "static-field",
              "public-static-field",
              "instance-field",
              "public-instance-field",
              "abstract-field",
              "public-abstract-field",
              "protected-field",
              "protected-decorated-field",
              "protected-static-field",
              "protected-instance-field",
              "protected-abstract-field",
              "private-field",
              "private-decorated-field",
              "private-static-field",
              "private-instance-field",
              "#private-field",
              "#private-static-field",
              "#private-instance-field",
              "method",
              "public-method",
              "public-decorated-method",
              "decorated-method",
              "static-method",
              "public-static-method",
              "instance-method",
              "public-instance-method",
              "abstract-method",
              "public-abstract-method",
              "protected-method",
              "protected-decorated-method",
              "protected-static-method",
              "protected-instance-method",
              "protected-abstract-method",
              "private-method",
              "private-decorated-method",
              "private-static-method",
              "private-instance-method",
              "#private-method",
              "#private-static-method",
              "#private-instance-method",
              "call-signature",
              "constructor",
              "public-constructor",
              "protected-constructor",
              "private-constructor",
              "get",
              "public-get",
              "public-decorated-get",
              "decorated-get",
              "static-get",
              "public-static-get",
              "instance-get",
              "public-instance-get",
              "abstract-get",
              "public-abstract-get",
              "protected-get",
              "protected-decorated-get",
              "protected-static-get",
              "protected-instance-get",
              "protected-abstract-get",
              "private-get",
              "private-decorated-get",
              "private-static-get",
              "private-instance-get",
              "#private-get",
              "#private-static-get",
              "#private-instance-get",
              "set",
              "public-set",
              "public-decorated-set",
              "decorated-set",
              "static-set",
              "public-static-set",
              "instance-set",
              "public-instance-set",
              "abstract-set",
              "public-abstract-set",
              "protected-set",
              "protected-decorated-set",
              "protected-static-set",
              "protected-instance-set",
              "protected-abstract-set",
              "private-set",
              "private-decorated-set",
              "private-static-set",
              "private-instance-set",
              "#private-set",
              "#private-static-set",
              "#private-instance-set",
              "static-initialization",
              "static-static-initialization",
              "public-static-static-initialization",
              "instance-static-initialization",
              "public-instance-static-initialization",
              "abstract-static-initialization",
              "public-abstract-static-initialization",
              "protected-static-static-initialization",
              "protected-instance-static-initialization",
              "protected-abstract-static-initialization",
              "private-static-static-initialization",
              "private-instance-static-initialization",
              "#private-static-static-initialization",
              "#private-instance-static-initialization",
            ],
          },
          typeItems: {
            type: "string",
            enum: [
              "readonly-signature",
              "signature",
              "readonly-field",
              "field",
              "method",
              "constructor",
            ],
          },
          baseConfig: {
            oneOf: [
              {
                type: "string",
                enum: ["never"],
              },
              {
                type: "array",
                items: {
                  oneOf: [
                    {
                      $ref: "#/items/0/$defs/allItems",
                    },
                    {
                      type: "array",
                      items: {
                        $ref: "#/items/0/$defs/allItems",
                      },
                    },
                  ],
                },
              },
              {
                type: "object",
                properties: {
                  memberTypes: {
                    oneOf: [
                      {
                        type: "array",
                        items: {
                          oneOf: [
                            {
                              $ref: "#/items/0/$defs/allItems",
                            },
                            {
                              type: "array",
                              items: {
                                $ref: "#/items/0/$defs/allItems",
                              },
                            },
                          ],
                        },
                      },
                      {
                        type: "string",
                        enum: ["never"],
                      },
                    ],
                  },
                  order: {
                    $ref: "#/items/0/$defs/orderOptions",
                  },
                  optionalityOrder: {
                    $ref: "#/items/0/$defs/optionalityOrderOptions",
                  },
                },
                additionalProperties: false,
              },
            ],
          },
          typesConfig: {
            oneOf: [
              {
                type: "string",
                enum: ["never"],
              },
              {
                type: "array",
                items: {
                  oneOf: [
                    {
                      $ref: "#/items/0/$defs/typeItems",
                    },
                    {
                      type: "array",
                      items: {
                        $ref: "#/items/0/$defs/typeItems",
                      },
                    },
                  ],
                },
              },
              {
                type: "object",
                properties: {
                  memberTypes: {
                    oneOf: [
                      {
                        type: "array",
                        items: {
                          oneOf: [
                            {
                              $ref: "#/items/0/$defs/typeItems",
                            },
                            {
                              type: "array",
                              items: {
                                $ref: "#/items/0/$defs/typeItems",
                              },
                            },
                          ],
                        },
                      },
                      {
                        type: "string",
                        enum: ["never"],
                      },
                    ],
                  },
                  order: {
                    $ref: "#/items/0/$defs/orderOptions",
                  },
                  optionalityOrder: {
                    $ref: "#/items/0/$defs/optionalityOrderOptions",
                  },
                },
                additionalProperties: false,
              },
            ],
          },
        },
        type: "object",
        properties: {
          default: {
            $ref: "#/items/0/$defs/baseConfig",
          },
          classes: {
            $ref: "#/items/0/$defs/baseConfig",
          },
          classExpressions: {
            $ref: "#/items/0/$defs/baseConfig",
          },
          interfaces: {
            $ref: "#/items/0/$defs/typesConfig",
          },
          typeLiterals: {
            $ref: "#/items/0/$defs/typesConfig",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/method-signature-style": {
    type: "suggestion",
    docs: {
      description: "Enforce using a particular method signature syntax",
      url: "https://typescript-eslint.io/rules/method-signature-style",
    },
    fixable: "code",
    messages: {
      errorMethod:
        "Shorthand method signature is forbidden. Use a function property instead.",
      errorProperty:
        "Function property signature is forbidden. Use a method shorthand instead.",
    },
    schema: [
      {
        type: "string",
        enum: ["property", "method"],
      },
    ],
  },
  "@typescript-eslint/naming-convention": {
    docs: {
      description:
        "Enforce naming conventions for everything across a codebase",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/naming-convention",
    },
    type: "suggestion",
    messages: {
      unexpectedUnderscore:
        "{{type}} name `{{name}}` must not have a {{position}} underscore.",
      missingUnderscore:
        "{{type}} name `{{name}}` must have {{count}} {{position}} underscore(s).",
      missingAffix:
        "{{type}} name `{{name}}` must have one of the following {{position}}es: {{affixes}}",
      satisfyCustom:
        "{{type}} name `{{name}}` must {{regexMatch}} the RegExp: {{regex}}",
      doesNotMatchFormat:
        "{{type}} name `{{name}}` must match one of the following formats: {{formats}}",
      doesNotMatchFormatTrimmed:
        "{{type}} name `{{name}}` trimmed as `{{processedName}}` must match one of the following formats: {{formats}}",
    },
    schema: {
      $defs: {
        underscoreOptions: {
          type: "string",
          enum: [
            "forbid",
            "allow",
            "require",
            "requireDouble",
            "allowDouble",
            "allowSingleOrDouble",
          ],
        },
        predefinedFormats: {
          type: "string",
          enum: [
            "camelCase",
            "strictCamelCase",
            "PascalCase",
            "StrictPascalCase",
            "snake_case",
            "UPPER_CASE",
          ],
        },
        typeModifiers: {
          type: "string",
          enum: ["boolean", "string", "number", "function", "array"],
        },
        prefixSuffixConfig: {
          type: "array",
          items: {
            type: "string",
            minLength: 1,
          },
          additionalItems: false,
        },
        matchRegexConfig: {
          type: "object",
          additionalProperties: false,
          properties: {
            match: {
              type: "boolean",
            },
            regex: {
              type: "string",
            },
          },
          required: ["match", "regex"],
        },
        formatOptionsConfig: {
          oneOf: [
            {
              type: "array",
              items: {
                $ref: "#/$defs/predefinedFormats",
              },
              additionalItems: false,
            },
            {
              type: "null",
            },
          ],
        },
      },
      type: "array",
      items: {
        oneOf: [
          {
            type: "object",
            description: "Multiple selectors in one config",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "array",
                items: {
                  type: "string",
                  enum: [
                    "default",
                    "variableLike",
                    "memberLike",
                    "typeLike",
                    "method",
                    "property",
                    "variable",
                    "function",
                    "parameter",
                    "parameterProperty",
                    "accessor",
                    "enumMember",
                    "classMethod",
                    "objectLiteralMethod",
                    "typeMethod",
                    "classProperty",
                    "objectLiteralProperty",
                    "typeProperty",
                    "class",
                    "interface",
                    "typeAlias",
                    "enum",
                    "typeParameter",
                    "import",
                  ],
                },
                additionalItems: false,
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: [
                    "const",
                    "readonly",
                    "static",
                    "public",
                    "protected",
                    "private",
                    "#private",
                    "abstract",
                    "destructured",
                    "global",
                    "exported",
                    "unused",
                    "requiresQuotes",
                    "override",
                    "async",
                    "default",
                    "namespace",
                  ],
                },
                additionalItems: false,
              },
              types: {
                type: "array",
                items: {
                  $ref: "#/$defs/typeModifiers",
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'default'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["default"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: [
                    "const",
                    "readonly",
                    "static",
                    "public",
                    "protected",
                    "private",
                    "#private",
                    "abstract",
                    "destructured",
                    "global",
                    "exported",
                    "unused",
                    "requiresQuotes",
                    "override",
                    "async",
                    "default",
                    "namespace",
                  ],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'variableLike'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["variableLike"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["unused", "async"],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'variable'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["variable"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: [
                    "const",
                    "destructured",
                    "exported",
                    "global",
                    "unused",
                    "async",
                  ],
                },
                additionalItems: false,
              },
              types: {
                type: "array",
                items: {
                  $ref: "#/$defs/typeModifiers",
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'function'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["function"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["exported", "global", "unused", "async"],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'parameter'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["parameter"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["destructured", "unused"],
                },
                additionalItems: false,
              },
              types: {
                type: "array",
                items: {
                  $ref: "#/$defs/typeModifiers",
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'memberLike'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["memberLike"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: [
                    "abstract",
                    "private",
                    "#private",
                    "protected",
                    "public",
                    "readonly",
                    "requiresQuotes",
                    "static",
                    "override",
                    "async",
                  ],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'classProperty'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["classProperty"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: [
                    "abstract",
                    "private",
                    "#private",
                    "protected",
                    "public",
                    "readonly",
                    "requiresQuotes",
                    "static",
                    "override",
                  ],
                },
                additionalItems: false,
              },
              types: {
                type: "array",
                items: {
                  $ref: "#/$defs/typeModifiers",
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'objectLiteralProperty'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["objectLiteralProperty"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["public", "requiresQuotes"],
                },
                additionalItems: false,
              },
              types: {
                type: "array",
                items: {
                  $ref: "#/$defs/typeModifiers",
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'typeProperty'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["typeProperty"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["public", "readonly", "requiresQuotes"],
                },
                additionalItems: false,
              },
              types: {
                type: "array",
                items: {
                  $ref: "#/$defs/typeModifiers",
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'parameterProperty'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["parameterProperty"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["private", "protected", "public", "readonly"],
                },
                additionalItems: false,
              },
              types: {
                type: "array",
                items: {
                  $ref: "#/$defs/typeModifiers",
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'property'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["property"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: [
                    "abstract",
                    "private",
                    "#private",
                    "protected",
                    "public",
                    "readonly",
                    "requiresQuotes",
                    "static",
                    "override",
                    "async",
                  ],
                },
                additionalItems: false,
              },
              types: {
                type: "array",
                items: {
                  $ref: "#/$defs/typeModifiers",
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'classMethod'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["classMethod"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: [
                    "abstract",
                    "private",
                    "#private",
                    "protected",
                    "public",
                    "requiresQuotes",
                    "static",
                    "override",
                    "async",
                  ],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'objectLiteralMethod'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["objectLiteralMethod"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["public", "requiresQuotes", "async"],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'typeMethod'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["typeMethod"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["public", "requiresQuotes"],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'method'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["method"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: [
                    "abstract",
                    "private",
                    "#private",
                    "protected",
                    "public",
                    "requiresQuotes",
                    "static",
                    "override",
                    "async",
                  ],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'accessor'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["accessor"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: [
                    "abstract",
                    "private",
                    "protected",
                    "public",
                    "requiresQuotes",
                    "static",
                    "override",
                  ],
                },
                additionalItems: false,
              },
              types: {
                type: "array",
                items: {
                  $ref: "#/$defs/typeModifiers",
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'enumMember'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["enumMember"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["requiresQuotes"],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'typeLike'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["typeLike"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["abstract", "exported", "unused"],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'class'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["class"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["abstract", "exported", "unused"],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'interface'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["interface"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["exported", "unused"],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'typeAlias'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["typeAlias"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["exported", "unused"],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'enum'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["enum"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["exported", "unused"],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'typeParameter'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["typeParameter"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["unused"],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
          {
            type: "object",
            description: "Selector 'import'",
            properties: {
              format: {
                $ref: "#/$defs/formatOptionsConfig",
              },
              custom: {
                $ref: "#/$defs/matchRegexConfig",
              },
              leadingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              trailingUnderscore: {
                $ref: "#/$defs/underscoreOptions",
              },
              prefix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              suffix: {
                $ref: "#/$defs/prefixSuffixConfig",
              },
              failureMessage: {
                type: "string",
              },
              filter: {
                oneOf: [
                  {
                    type: "string",
                    minLength: 1,
                  },
                  {
                    $ref: "#/$defs/matchRegexConfig",
                  },
                ],
              },
              selector: {
                type: "string",
                enum: ["import"],
              },
              modifiers: {
                type: "array",
                items: {
                  type: "string",
                  enum: ["default", "namespace"],
                },
                additionalItems: false,
              },
            },
            required: ["selector", "format"],
            additionalProperties: false,
          },
        ],
      },
      additionalItems: false,
    },
  },
  "@typescript-eslint/no-array-constructor": {
    type: "suggestion",
    docs: {
      description: "Disallow generic `Array` constructors",
      recommended: "recommended",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-array-constructor",
    },
    fixable: "code",
    messages: {
      useLiteral: "The array literal notation [] is preferable.",
    },
    schema: [],
  },
  "@typescript-eslint/no-base-to-string": {
    docs: {
      description:
        "Require `.toString()` to only be called on objects which provide useful information when stringified",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-base-to-string",
    },
    messages: {
      baseToString:
        "'{{name}}' {{certainty}} evaluate to '[object Object]' when stringified.",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoredTypeNames: {
            type: "array",
            items: {
              type: "string",
            },
          },
        },
        additionalProperties: false,
      },
    ],
    type: "suggestion",
  },
  "@typescript-eslint/no-confusing-non-null-assertion": {
    type: "problem",
    docs: {
      description:
        "Disallow non-null assertion in locations that may be confusing",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/no-confusing-non-null-assertion",
    },
    fixable: "code",
    hasSuggestions: true,
    messages: {
      confusingEqual:
        'Confusing combinations of non-null assertion and equal test like "a! == b", which looks very similar to not equal "a !== b".',
      confusingAssign:
        'Confusing combinations of non-null assertion and equal test like "a! = b", which looks very similar to not equal "a != b".',
      notNeedInEqualTest: "Unnecessary non-null assertion (!) in equal test.",
      notNeedInAssign:
        "Unnecessary non-null assertion (!) in assignment left hand.",
      wrapUpLeft:
        'Wrap up left hand to avoid putting non-null assertion "!" and "=" together.',
    },
    schema: [],
  },
  "@typescript-eslint/no-confusing-void-expression": {
    docs: {
      description:
        "Require expressions of type void to appear in statement position",
      recommended: "strict",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-confusing-void-expression",
    },
    messages: {
      invalidVoidExpr:
        "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
      invalidVoidExprWrapVoid:
        "Void expressions used inside another expression must be moved to its own statement or marked explicitly with the `void` operator.",
      invalidVoidExprArrow:
        "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
      invalidVoidExprArrowWrapVoid:
        "Void expressions returned from an arrow function shorthand must be marked explicitly with the `void` operator.",
      invalidVoidExprReturn:
        "Returning a void expression from a function is forbidden. Please move it before the `return` statement.",
      invalidVoidExprReturnLast:
        "Returning a void expression from a function is forbidden. Please remove the `return` statement.",
      invalidVoidExprReturnWrapVoid:
        "Void expressions returned from a function must be marked explicitly with the `void` operator.",
      voidExprWrapVoid: "Mark with an explicit `void` operator.",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreArrowShorthand: {
            type: "boolean",
          },
          ignoreVoidOperator: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    type: "problem",
    fixable: "code",
    hasSuggestions: true,
  },
  "@typescript-eslint/no-dupe-class-members": {
    type: "problem",
    docs: {
      description: "Disallow duplicate class members",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-dupe-class-members",
    },
    hasSuggestions: undefined,
    schema: [],
    messages: {
      unexpected: "Duplicate name '{{name}}'.",
    },
  },
  "@typescript-eslint/no-duplicate-enum-values": {
    type: "problem",
    docs: {
      description: "Disallow duplicate enum member values",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/no-duplicate-enum-values",
    },
    hasSuggestions: false,
    messages: {
      duplicateValue: "Duplicate enum member value {{value}}.",
    },
    schema: [],
  },
  "@typescript-eslint/no-duplicate-type-constituents": {
    type: "suggestion",
    docs: {
      description:
        "Disallow duplicate constituents of union or intersection types",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-duplicate-type-constituents",
    },
    fixable: "code",
    messages: {
      duplicate: "{{type}} type constituent is duplicated with {{previous}}.",
    },
    schema: [
      {
        additionalProperties: false,
        type: "object",
        properties: {
          ignoreIntersections: {
            type: "boolean",
          },
          ignoreUnions: {
            type: "boolean",
          },
        },
      },
    ],
  },
  "@typescript-eslint/no-dynamic-delete": {
    docs: {
      description:
        "Disallow using the `delete` operator on computed key expressions",
      recommended: "strict",
      url: "https://typescript-eslint.io/rules/no-dynamic-delete",
    },
    fixable: "code",
    messages: {
      dynamicDelete: "Do not delete dynamically computed property keys.",
    },
    schema: [],
    type: "suggestion",
  },
  "@typescript-eslint/no-empty-function": {
    type: "suggestion",
    docs: {
      description: "Disallow empty functions",
      recommended: "stylistic",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-empty-function",
    },
    hasSuggestions: undefined,
    schema: [
      {
        type: "object",
        properties: {
          allow: {
            type: "array",
            items: {
              enum: [
                "functions",
                "arrowFunctions",
                "generatorFunctions",
                "methods",
                "generatorMethods",
                "getters",
                "setters",
                "constructors",
                "private-constructors",
                "protected-constructors",
                "asyncFunctions",
                "asyncMethods",
                "decoratedFunctions",
                "overrideMethods",
              ],
              type: "string",
            },
            uniqueItems: true,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpected: "Unexpected empty {{name}}.",
    },
  },
  "@typescript-eslint/no-empty-interface": {
    type: "suggestion",
    docs: {
      description: "Disallow the declaration of empty interfaces",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/no-empty-interface",
    },
    fixable: "code",
    hasSuggestions: true,
    messages: {
      noEmpty: "An empty interface is equivalent to `{}`.",
      noEmptyWithSuper:
        "An interface declaring no members is equivalent to its supertype.",
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          allowSingleExtends: {
            type: "boolean",
          },
        },
      },
    ],
  },
  "@typescript-eslint/no-explicit-any": {
    type: "suggestion",
    docs: {
      description: "Disallow the `any` type",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/no-explicit-any",
    },
    fixable: "code",
    hasSuggestions: true,
    messages: {
      unexpectedAny: "Unexpected any. Specify a different type.",
      suggestUnknown:
        "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
      suggestNever:
        "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          fixToUnknown: {
            description:
              "Whether to enable auto-fixing in which the `any` type is converted to the `unknown` type.",
            type: "boolean",
          },
          ignoreRestArgs: {
            description: "Whether to ignore rest parameter arrays.",
            type: "boolean",
          },
        },
      },
    ],
  },
  "@typescript-eslint/no-extra-non-null-assertion": {
    type: "problem",
    docs: {
      description: "Disallow extra non-null assertions",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/no-extra-non-null-assertion",
    },
    fixable: "code",
    schema: [],
    messages: {
      noExtraNonNullAssertion: "Forbidden extra non-null assertion.",
    },
  },
  "@typescript-eslint/no-extra-parens": {
    type: "layout",
    docs: {
      description: "Disallow unnecessary parentheses",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-extra-parens",
    },
    fixable: "code",
    hasSuggestions: undefined,
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["functions"],
            },
          ],
          minItems: 0,
          maxItems: 1,
        },
        {
          type: "array",
          items: [
            {
              enum: ["all"],
            },
            {
              type: "object",
              properties: {
                conditionalAssign: {
                  type: "boolean",
                },
                ternaryOperandBinaryExpressions: {
                  type: "boolean",
                },
                nestedBinaryExpressions: {
                  type: "boolean",
                },
                returnAssign: {
                  type: "boolean",
                },
                ignoreJSX: {
                  enum: ["none", "all", "single-line", "multi-line"],
                },
                enforceForArrowConditionals: {
                  type: "boolean",
                },
                enforceForSequenceExpressions: {
                  type: "boolean",
                },
                enforceForNewInMemberExpressions: {
                  type: "boolean",
                },
                enforceForFunctionPrototypeMethods: {
                  type: "boolean",
                },
                allowParensAfterCommentPattern: {
                  type: "string",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
      ],
    },
    messages: {
      unexpected: "Unnecessary parentheses around expression.",
    },
  },
  "@typescript-eslint/no-extra-semi": {
    type: "suggestion",
    docs: {
      description: "Disallow unnecessary semicolons",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-extra-semi",
    },
    fixable: "code",
    hasSuggestions: undefined,
    schema: [],
    messages: {
      unexpected: "Unnecessary semicolon.",
    },
  },
  "@typescript-eslint/no-extraneous-class": {
    type: "suggestion",
    docs: {
      description: "Disallow classes used as namespaces",
      recommended: "strict",
      url: "https://typescript-eslint.io/rules/no-extraneous-class",
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          allowConstructorOnly: {
            description:
              "Whether to allow extraneous classes that contain only a constructor.",
            type: "boolean",
          },
          allowEmpty: {
            description:
              "Whether to allow extraneous classes that have no body (i.e. are empty).",
            type: "boolean",
          },
          allowStaticOnly: {
            description:
              "Whether to allow extraneous classes that only contain static members.",
            type: "boolean",
          },
          allowWithDecorator: {
            description:
              "Whether to allow extraneous classes that include a decorator.",
            type: "boolean",
          },
        },
      },
    ],
    messages: {
      empty: "Unexpected empty class.",
      onlyStatic: "Unexpected class with only static properties.",
      onlyConstructor: "Unexpected class with only a constructor.",
    },
  },
  "@typescript-eslint/no-floating-promises": {
    docs: {
      description:
        "Require Promise-like statements to be handled appropriately",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-floating-promises",
    },
    hasSuggestions: true,
    messages: {
      floating:
        "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler.",
      floatingFixAwait: "Add await operator.",
      floatingVoid:
        "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
      floatingFixVoid: "Add void operator to ignore.",
      floatingUselessRejectionHandler:
        "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler. A rejection handler that is not a function will be ignored.",
      floatingUselessRejectionHandlerVoid:
        "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator. A rejection handler that is not a function will be ignored.",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreVoid: {
            description: "Whether to ignore `void` expressions.",
            type: "boolean",
          },
          ignoreIIFE: {
            description:
              "Whether to ignore async IIFEs (Immediately Invoked Function Expressions).",
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    type: "problem",
  },
  "@typescript-eslint/no-for-in-array": {
    docs: {
      description: "Disallow iterating over an array with a for-in loop",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-for-in-array",
    },
    messages: {
      forInViolation:
        "For-in loops over arrays are forbidden. Use for-of or array.forEach instead.",
    },
    schema: [],
    type: "problem",
  },
  "@typescript-eslint/no-implied-eval": {
    docs: {
      description: "Disallow the use of `eval()`-like methods",
      recommended: "recommended",
      extendsBaseRule: true,
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-implied-eval",
    },
    messages: {
      noImpliedEvalError: "Implied eval. Consider passing a function.",
      noFunctionConstructor:
        "Implied eval. Do not use the Function constructor to create functions.",
    },
    schema: [],
    type: "suggestion",
  },
  "@typescript-eslint/no-import-type-side-effects": {
    type: "problem",
    docs: {
      description:
        "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
      url: "https://typescript-eslint.io/rules/no-import-type-side-effects",
    },
    fixable: "code",
    messages: {
      useTopLevelQualifier:
        "TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import.",
    },
    schema: [],
  },
  "@typescript-eslint/no-inferrable-types": {
    type: "suggestion",
    docs: {
      description:
        "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/no-inferrable-types",
    },
    fixable: "code",
    messages: {
      noInferrableType:
        "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation.",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreParameters: {
            type: "boolean",
          },
          ignoreProperties: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/no-invalid-this": {
    type: "suggestion",
    docs: {
      description:
        "Disallow `this` keywords outside of classes or class-like objects",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-invalid-this",
    },
    messages: {
      unexpectedThis: "Unexpected 'this'.",
    },
    hasSuggestions: undefined,
    schema: [
      {
        type: "object",
        properties: {
          capIsConstructor: {
            type: "boolean",
            default: true,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/no-invalid-void-type": {
    type: "problem",
    docs: {
      description: "Disallow `void` type outside of generic or return types",
      recommended: "strict",
      url: "https://typescript-eslint.io/rules/no-invalid-void-type",
    },
    messages: {
      invalidVoidForGeneric:
        "{{ generic }} may not have void as a type argument.",
      invalidVoidNotReturnOrGeneric:
        "void is only valid as a return type or generic type argument.",
      invalidVoidNotReturn: "void is only valid as a return type.",
      invalidVoidNotReturnOrThisParam:
        "void is only valid as return type or type of `this` parameter.",
      invalidVoidNotReturnOrThisParamOrGeneric:
        "void is only valid as a return type or generic type argument or the type of a `this` parameter.",
      invalidVoidUnionConstituent:
        "void is not valid as a constituent in a union type",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowInGenericTypeArguments: {
            oneOf: [
              {
                type: "boolean",
              },
              {
                type: "array",
                items: {
                  type: "string",
                },
                minItems: 1,
              },
            ],
          },
          allowAsThisParameter: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/no-loop-func": {
    type: "suggestion",
    docs: {
      description:
        "Disallow function declarations that contain unsafe references inside loop statements",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-loop-func",
    },
    hasSuggestions: undefined,
    schema: [],
    messages: {
      unsafeRefs:
        "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}.",
    },
  },
  "@typescript-eslint/no-loss-of-precision": {
    type: "problem",
    docs: {
      description: "Disallow literal numbers that lose precision",
      recommended: "recommended",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-loss-of-precision",
    },
    hasSuggestions: undefined,
    schema: [],
    messages: {
      noLossOfPrecision: "This number literal will lose precision at runtime.",
    },
  },
  "@typescript-eslint/no-magic-numbers": {
    type: "suggestion",
    docs: {
      description: "Disallow magic numbers",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-magic-numbers",
    },
    schema: [
      {
        type: "object",
        properties: {
          detectObjects: {
            type: "boolean",
            default: false,
          },
          enforceConst: {
            type: "boolean",
            default: false,
          },
          ignore: {
            type: "array",
            items: {
              anyOf: [
                {
                  type: "number",
                },
                {
                  type: "string",
                  pattern: "^[+-]?(?:0|[1-9][0-9]*)n$",
                },
              ],
            },
            uniqueItems: true,
          },
          ignoreArrayIndexes: {
            type: "boolean",
            default: false,
          },
          ignoreDefaultValues: {
            type: "boolean",
            default: false,
          },
          ignoreClassFieldInitialValues: {
            type: "boolean",
            default: false,
          },
          ignoreNumericLiteralTypes: {
            type: "boolean",
          },
          ignoreEnums: {
            type: "boolean",
          },
          ignoreReadonlyClassProperties: {
            type: "boolean",
          },
          ignoreTypeIndexes: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      useConst: "Number constants declarations must use 'const'.",
      noMagic: "No magic number: {{raw}}.",
    },
  },
  "@typescript-eslint/no-meaningless-void-operator": {
    type: "suggestion",
    docs: {
      description:
        "Disallow the `void` operator except when used to discard a value",
      recommended: "strict",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-meaningless-void-operator",
    },
    fixable: "code",
    hasSuggestions: true,
    messages: {
      meaninglessVoidOperator:
        "void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored",
      removeVoid: "Remove 'void'",
    },
    schema: [
      {
        type: "object",
        properties: {
          checkNever: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/no-misused-new": {
    type: "problem",
    docs: {
      description: "Enforce valid definition of `new` and `constructor`",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/no-misused-new",
    },
    schema: [],
    messages: {
      errorMessageInterface: "Interfaces cannot be constructed, only classes.",
      errorMessageClass: "Class cannot have method named `new`.",
    },
  },
  "@typescript-eslint/no-misused-promises": {
    docs: {
      description: "Disallow Promises in places not designed to handle them",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-misused-promises",
    },
    messages: {
      voidReturnArgument:
        "Promise returned in function argument where a void return was expected.",
      voidReturnVariable:
        "Promise-returning function provided to variable where a void return was expected.",
      voidReturnProperty:
        "Promise-returning function provided to property where a void return was expected.",
      voidReturnReturnValue:
        "Promise-returning function provided to return value where a void return was expected.",
      voidReturnAttribute:
        "Promise-returning function provided to attribute where a void return was expected.",
      conditional: "Expected non-Promise value in a boolean conditional.",
      spread: "Expected a non-Promise value to be spreaded in an object.",
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          checksConditionals: {
            type: "boolean",
          },
          checksVoidReturn: {
            oneOf: [
              {
                type: "boolean",
              },
              {
                additionalProperties: false,
                properties: {
                  arguments: {
                    type: "boolean",
                  },
                  attributes: {
                    type: "boolean",
                  },
                  properties: {
                    type: "boolean",
                  },
                  returns: {
                    type: "boolean",
                  },
                  variables: {
                    type: "boolean",
                  },
                },
                type: "object",
              },
            ],
          },
          checksSpreads: {
            type: "boolean",
          },
        },
      },
    ],
    type: "problem",
  },
  "@typescript-eslint/no-mixed-enums": {
    docs: {
      description: "Disallow enums from having both number and string members",
      recommended: "strict",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-mixed-enums",
    },
    messages: {
      mixed: "Mixing number and string enums can be confusing.",
    },
    schema: [],
    type: "problem",
  },
  "@typescript-eslint/no-namespace": {
    type: "suggestion",
    docs: {
      description: "Disallow TypeScript namespaces",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/no-namespace",
    },
    messages: {
      moduleSyntaxIsPreferred:
        "ES2015 module syntax is preferred over namespaces.",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowDeclarations: {
            description:
              "Whether to allow `declare` with custom TypeScript namespaces.",
            type: "boolean",
          },
          allowDefinitionFiles: {
            description:
              "Whether to allow `declare` with custom TypeScript namespaces inside definition files.",
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/no-non-null-asserted-nullish-coalescing": {
    type: "problem",
    docs: {
      description:
        "Disallow non-null assertions in the left operand of a nullish coalescing operator",
      recommended: "strict",
      url: "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing",
    },
    messages: {
      noNonNullAssertedNullishCoalescing:
        "The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.",
      suggestRemovingNonNull: "Remove the non-null assertion.",
    },
    schema: [],
    hasSuggestions: true,
  },
  "@typescript-eslint/no-non-null-asserted-optional-chain": {
    type: "problem",
    docs: {
      description:
        "Disallow non-null assertions after an optional chain expression",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain",
    },
    hasSuggestions: true,
    messages: {
      noNonNullOptionalChain:
        "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
      suggestRemovingNonNull: "You should remove the non-null assertion.",
    },
    schema: [],
  },
  "@typescript-eslint/no-non-null-assertion": {
    type: "problem",
    docs: {
      description:
        "Disallow non-null assertions using the `!` postfix operator",
      recommended: "strict",
      url: "https://typescript-eslint.io/rules/no-non-null-assertion",
    },
    hasSuggestions: true,
    messages: {
      noNonNull: "Forbidden non-null assertion.",
      suggestOptionalChain:
        "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",
    },
    schema: [],
  },
  "@typescript-eslint/no-redeclare": {
    type: "suggestion",
    docs: {
      description: "Disallow variable redeclaration",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-redeclare",
    },
    schema: [
      {
        type: "object",
        properties: {
          builtinGlobals: {
            type: "boolean",
          },
          ignoreDeclarationMerge: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      redeclared: "'{{id}}' is already defined.",
      redeclaredAsBuiltin:
        "'{{id}}' is already defined as a built-in global variable.",
      redeclaredBySyntax:
        "'{{id}}' is already defined by a variable declaration.",
    },
  },
  "@typescript-eslint/no-redundant-type-constituents": {
    docs: {
      description:
        "Disallow members of unions and intersections that do nothing or override type information",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-redundant-type-constituents",
    },
    messages: {
      literalOverridden:
        "{{literal}} is overridden by {{primitive}} in this union type.",
      primitiveOverridden:
        "{{primitive}} is overridden by the {{literal}} in this intersection type.",
      overridden:
        "'{{typeName}}' is overridden by other types in this {{container}} type.",
      overrides:
        "'{{typeName}}' overrides all other types in this {{container}} type.",
    },
    schema: [],
    type: "suggestion",
  },
  "@typescript-eslint/no-require-imports": {
    type: "problem",
    docs: {
      description: "Disallow invocation of `require()`",
      url: "https://typescript-eslint.io/rules/no-require-imports",
    },
    schema: [],
    messages: {
      noRequireImports: "A `require()` style import is forbidden.",
    },
  },
  "@typescript-eslint/no-restricted-imports": {
    type: "suggestion",
    docs: {
      description: "Disallow specified modules when loaded by `import`",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-restricted-imports",
    },
    messages: {
      path: "'{{importSource}}' import is restricted from being used.",
      pathWithCustomMessage:
        "'{{importSource}}' import is restricted from being used. {{customMessage}}",
      patterns:
        "'{{importSource}}' import is restricted from being used by a pattern.",
      patternWithCustomMessage:
        "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
      patternAndImportName:
        "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
      patternAndImportNameWithCustomMessage:
        "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
      patternAndEverything:
        "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
      patternAndEverythingWithRegexImportName:
        "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
      patternAndEverythingWithCustomMessage:
        "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
      patternAndEverythingWithRegexImportNameAndCustomMessage:
        "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}",
      everything:
        "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
      everythingWithCustomMessage:
        "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
      importName:
        "'{{importName}}' import from '{{importSource}}' is restricted.",
      importNameWithCustomMessage:
        "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}",
    },
    fixable: undefined,
    schema: {
      anyOf: [
        {
          type: "array",
          items: {
            anyOf: [
              {
                type: "string",
              },
              {
                type: "object",
                additionalProperties: false,
                properties: {
                  name: {
                    type: "string",
                  },
                  message: {
                    type: "string",
                    minLength: 1,
                  },
                  importNames: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                  },
                  allowTypeImports: {
                    type: "boolean",
                    description:
                      "Disallow value imports, but allow type-only imports.",
                  },
                },
                required: ["name"],
              },
            ],
          },
          uniqueItems: true,
        },
        {
          type: "array",
          items: [
            {
              type: "object",
              properties: {
                paths: {
                  type: "array",
                  items: {
                    anyOf: [
                      {
                        type: "string",
                      },
                      {
                        type: "object",
                        additionalProperties: false,
                        properties: {
                          name: {
                            type: "string",
                          },
                          message: {
                            type: "string",
                            minLength: 1,
                          },
                          importNames: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                          allowTypeImports: {
                            type: "boolean",
                            description:
                              "Disallow value imports, but allow type-only imports.",
                          },
                        },
                        required: ["name"],
                      },
                    ],
                  },
                  uniqueItems: true,
                },
                patterns: {
                  anyOf: [
                    {
                      type: "array",
                      items: {
                        type: "string",
                      },
                      uniqueItems: true,
                    },
                    {
                      type: "array",
                      items: {
                        type: "object",
                        additionalProperties: false,
                        properties: {
                          importNames: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            minItems: 1,
                            uniqueItems: true,
                          },
                          group: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            minItems: 1,
                            uniqueItems: true,
                          },
                          importNamePattern: {
                            type: "string",
                          },
                          message: {
                            type: "string",
                            minLength: 1,
                          },
                          caseSensitive: {
                            type: "boolean",
                          },
                          allowTypeImports: {
                            type: "boolean",
                            description:
                              "Disallow value imports, but allow type-only imports.",
                          },
                        },
                        required: ["group"],
                      },
                      uniqueItems: true,
                    },
                  ],
                },
              },
              additionalProperties: false,
            },
          ],
          additionalItems: false,
        },
      ],
    },
  },
  "@typescript-eslint/no-shadow": {
    type: "suggestion",
    docs: {
      description:
        "Disallow variable declarations from shadowing variables declared in the outer scope",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-shadow",
    },
    schema: [
      {
        type: "object",
        properties: {
          builtinGlobals: {
            type: "boolean",
          },
          hoist: {
            type: "string",
            enum: ["all", "functions", "never"],
          },
          allow: {
            type: "array",
            items: {
              type: "string",
            },
          },
          ignoreOnInitialization: {
            type: "boolean",
          },
          ignoreTypeValueShadow: {
            type: "boolean",
          },
          ignoreFunctionTypeParameterNameValueShadow: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      noShadow:
        "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
      noShadowGlobal: "'{{name}}' is already a global variable.",
    },
  },
  "@typescript-eslint/no-this-alias": {
    type: "suggestion",
    docs: {
      description: "Disallow aliasing `this`",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/no-this-alias",
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          allowDestructuring: {
            description:
              "Whether to ignore destructurings, such as `const { props, state } = this`.",
            type: "boolean",
          },
          allowedNames: {
            description:
              'Names to ignore, such as ["self"] for `const self = this;`.',
            type: "array",
            items: {
              type: "string",
            },
          },
        },
      },
    ],
    messages: {
      thisAssignment: "Unexpected aliasing of 'this' to local variable.",
      thisDestructure:
        "Unexpected aliasing of members of 'this' to local variables.",
    },
  },
  "@typescript-eslint/no-throw-literal": {
    type: "problem",
    docs: {
      description: "Disallow throwing literals as exceptions",
      recommended: "strict",
      extendsBaseRule: true,
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-throw-literal",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowThrowingAny: {
            type: "boolean",
          },
          allowThrowingUnknown: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      object: "Expected an error object to be thrown.",
      undef: "Do not throw undefined.",
    },
  },
  "@typescript-eslint/no-type-alias": {
    deprecated: true,
    type: "suggestion",
    docs: {
      description: "Disallow type aliases",
      url: "https://typescript-eslint.io/rules/no-type-alias",
    },
    messages: {
      noTypeAlias: "Type {{alias}} are not allowed.",
      noCompositionAlias:
        "{{typeName}} in {{compositionType}} types are not allowed.",
    },
    schema: [
      {
        $defs: {
          expandedOptions: {
            type: "string",
            enum: [
              "always",
              "never",
              "in-unions",
              "in-intersections",
              "in-unions-and-intersections",
            ],
          },
          simpleOptions: {
            type: "string",
            enum: ["always", "never"],
          },
        },
        type: "object",
        properties: {
          allowAliases: {
            description: "Whether to allow direct one-to-one type aliases.",
            $ref: "#/items/0/$defs/expandedOptions",
          },
          allowCallbacks: {
            description: "Whether to allow type aliases for callbacks.",
            $ref: "#/items/0/$defs/simpleOptions",
          },
          allowConditionalTypes: {
            description: "Whether to allow type aliases for conditional types.",
            $ref: "#/items/0/$defs/simpleOptions",
          },
          allowConstructors: {
            description: "Whether to allow type aliases with constructors.",
            $ref: "#/items/0/$defs/simpleOptions",
          },
          allowLiterals: {
            description:
              "Whether to allow type aliases with object literal types.",
            $ref: "#/items/0/$defs/expandedOptions",
          },
          allowMappedTypes: {
            description: "Whether to allow type aliases with mapped types.",
            $ref: "#/items/0/$defs/expandedOptions",
          },
          allowTupleTypes: {
            description: "Whether to allow type aliases with tuple types.",
            $ref: "#/items/0/$defs/expandedOptions",
          },
          allowGenerics: {
            description: "Whether to allow type aliases with generic types.",
            $ref: "#/items/0/$defs/simpleOptions",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/no-unnecessary-boolean-literal-compare": {
    docs: {
      description:
        "Disallow unnecessary equality comparisons against boolean literals",
      recommended: "strict",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare",
    },
    fixable: "code",
    messages: {
      direct:
        "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
      negated:
        "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
      comparingNullableToTrueDirect:
        "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
      comparingNullableToTrueNegated:
        "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
      comparingNullableToFalse:
        "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default.",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowComparingNullableBooleansToTrue: {
            description:
              "Whether to allow comparisons between nullable boolean variables and `true`.",
            type: "boolean",
          },
          allowComparingNullableBooleansToFalse: {
            description:
              "Whether to allow comparisons between nullable boolean variables and `false`.",
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    type: "suggestion",
  },
  "@typescript-eslint/no-unnecessary-condition": {
    type: "suggestion",
    docs: {
      description:
        "Disallow conditionals where the type is always truthy or always falsy",
      recommended: "strict",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-unnecessary-condition",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowConstantLoopConditions: {
            description:
              "Whether to ignore constant loop conditions, such as `while (true)`.",
            type: "boolean",
          },
          allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: {
            description:
              "Whether to not error when running with a tsconfig that has strictNullChecks turned.",
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    fixable: "code",
    messages: {
      alwaysTruthy: "Unnecessary conditional, value is always truthy.",
      alwaysFalsy: "Unnecessary conditional, value is always falsy.",
      alwaysTruthyFunc:
        "This callback should return a conditional, but return is always truthy.",
      alwaysFalsyFunc:
        "This callback should return a conditional, but return is always falsy.",
      neverNullish:
        "Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.",
      alwaysNullish:
        "Unnecessary conditional, left-hand side of `??` operator is always `null` or `undefined`.",
      literalBooleanExpression:
        "Unnecessary conditional, both sides of the expression are literal values.",
      noOverlapBooleanExpression:
        "Unnecessary conditional, the types have no overlap.",
      never: "Unnecessary conditional, value is `never`.",
      neverOptionalChain: "Unnecessary optional chain on a non-nullish value.",
      noStrictNullCheck:
        "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
    },
  },
  "@typescript-eslint/no-unnecessary-qualifier": {
    docs: {
      description: "Disallow unnecessary namespace qualifiers",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-unnecessary-qualifier",
    },
    fixable: "code",
    messages: {
      unnecessaryQualifier:
        "Qualifier is unnecessary since '{{ name }}' is in scope.",
    },
    schema: [],
    type: "suggestion",
  },
  "@typescript-eslint/no-unnecessary-type-arguments": {
    docs: {
      description: "Disallow type arguments that are equal to the default",
      recommended: "strict",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-unnecessary-type-arguments",
    },
    fixable: "code",
    messages: {
      unnecessaryTypeParameter:
        "This is the default value for this type parameter, so it can be omitted.",
    },
    schema: [],
    type: "suggestion",
  },
  "@typescript-eslint/no-unnecessary-type-assertion": {
    docs: {
      description:
        "Disallow type assertions that do not change the type of an expression",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-unnecessary-type-assertion",
    },
    fixable: "code",
    messages: {
      unnecessaryAssertion:
        "This assertion is unnecessary since it does not change the type of the expression.",
      contextuallyUnnecessary:
        "This assertion is unnecessary since the receiver accepts the original type of the expression.",
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          typesToIgnore: {
            description: "A list of type names to ignore.",
            type: "array",
            items: {
              type: "string",
            },
          },
        },
      },
    ],
    type: "suggestion",
  },
  "@typescript-eslint/no-unnecessary-type-constraint": {
    docs: {
      description: "Disallow unnecessary constraints on generic types",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/no-unnecessary-type-constraint",
    },
    hasSuggestions: true,
    messages: {
      unnecessaryConstraint:
        "Constraining the generic type `{{name}}` to `{{constraint}}` does nothing and is unnecessary.",
      removeUnnecessaryConstraint:
        "Remove the unnecessary `{{constraint}}` constraint.",
    },
    schema: [],
    type: "suggestion",
  },
  "@typescript-eslint/no-unsafe-argument": {
    type: "problem",
    docs: {
      description: "Disallow calling a function with a value with type `any`",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-unsafe-argument",
    },
    messages: {
      unsafeArgument:
        "Unsafe argument of type `{{sender}}` assigned to a parameter of type `{{receiver}}`.",
      unsafeTupleSpread:
        "Unsafe spread of a tuple type. The argument is of type `{{sender}}` and is assigned to a parameter of type `{{receiver}}`.",
      unsafeArraySpread: "Unsafe spread of an `any` array type.",
      unsafeSpread: "Unsafe spread of an `any` type.",
    },
    schema: [],
  },
  "@typescript-eslint/no-unsafe-assignment": {
    type: "problem",
    docs: {
      description:
        "Disallow assigning a value with type `any` to variables and properties",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-unsafe-assignment",
    },
    messages: {
      anyAssignment: "Unsafe assignment of an `any` value.",
      anyAssignmentThis:
        "Unsafe assignment of an `any` value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
      unsafeArrayPattern: "Unsafe array destructuring of an `any` array value.",
      unsafeArrayPatternFromTuple:
        "Unsafe array destructuring of a tuple element with an `any` value.",
      unsafeAssignment:
        "Unsafe assignment of type {{sender}} to a variable of type {{receiver}}.",
      unsafeArraySpread: "Unsafe spread of an `any` value in an array.",
    },
    schema: [],
  },
  "@typescript-eslint/no-unsafe-call": {
    type: "problem",
    docs: {
      description: "Disallow calling a value with type `any`",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-unsafe-call",
    },
    messages: {
      unsafeCall: "Unsafe call of an `any` typed value.",
      unsafeCallThis:
        "Unsafe call of an `any` typed value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
      unsafeNew: "Unsafe construction of an any type value.",
      unsafeTemplateTag: "Unsafe any typed template tag.",
    },
    schema: [],
  },
  "@typescript-eslint/no-unsafe-declaration-merging": {
    type: "problem",
    docs: {
      description: "Disallow unsafe declaration merging",
      recommended: "recommended",
      requiresTypeChecking: false,
      url: "https://typescript-eslint.io/rules/no-unsafe-declaration-merging",
    },
    messages: {
      unsafeMerging:
        "Unsafe declaration merging between classes and interfaces.",
    },
    schema: [],
  },
  "@typescript-eslint/no-unsafe-enum-comparison": {
    hasSuggestions: true,
    type: "suggestion",
    docs: {
      description: "Disallow comparing an enum value with a non-enum value",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-unsafe-enum-comparison",
    },
    messages: {
      mismatchedCase:
        "The case statement does not have a shared enum type with the switch predicate.",
      mismatchedCondition:
        "The two values in this comparison do not have a shared enum type.",
      replaceValueWithEnum: "Replace with an enum value comparison.",
    },
    schema: [],
  },
  "@typescript-eslint/no-unsafe-member-access": {
    type: "problem",
    docs: {
      description: "Disallow member access on a value with type `any`",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-unsafe-member-access",
    },
    messages: {
      unsafeMemberExpression:
        "Unsafe member access {{property}} on an `any` value.",
      unsafeThisMemberExpression:
        "Unsafe member access {{property}} on an `any` value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
      unsafeComputedMemberAccess:
        "Computed name {{property}} resolves to an any value.",
    },
    schema: [],
  },
  "@typescript-eslint/no-unsafe-return": {
    type: "problem",
    docs: {
      description: "Disallow returning a value with type `any` from a function",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-unsafe-return",
    },
    messages: {
      unsafeReturn: "Unsafe return of an `{{type}}` typed value.",
      unsafeReturnThis:
        "Unsafe return of an `{{type}}` typed value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
      unsafeReturnAssignment:
        "Unsafe return of type `{{sender}}` from function with return type `{{receiver}}`.",
    },
    schema: [],
  },
  "@typescript-eslint/no-unsafe-unary-minus": {
    type: "problem",
    docs: {
      description: "Require unary negation to take a number",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/no-unsafe-unary-minus",
    },
    messages: {
      unaryMinus: 'Invalid type "{{type}}" of template literal expression.',
    },
    schema: [],
  },
  "@typescript-eslint/no-unused-expressions": {
    type: "suggestion",
    docs: {
      description: "Disallow unused expressions",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-unused-expressions",
    },
    hasSuggestions: undefined,
    schema: [
      {
        type: "object",
        properties: {
          allowShortCircuit: {
            type: "boolean",
            default: false,
          },
          allowTernary: {
            type: "boolean",
            default: false,
          },
          allowTaggedTemplates: {
            type: "boolean",
            default: false,
          },
          enforceForJSX: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unusedExpression:
        "Expected an assignment or function call and instead saw an expression.",
    },
  },
  "@typescript-eslint/no-unused-vars": {
    type: "problem",
    docs: {
      description: "Disallow unused variables",
      recommended: "recommended",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-unused-vars",
    },
    schema: [
      {
        oneOf: [
          {
            type: "string",
            enum: ["all", "local"],
          },
          {
            type: "object",
            properties: {
              vars: {
                type: "string",
                enum: ["all", "local"],
              },
              varsIgnorePattern: {
                type: "string",
              },
              args: {
                type: "string",
                enum: ["all", "after-used", "none"],
              },
              ignoreRestSiblings: {
                type: "boolean",
              },
              argsIgnorePattern: {
                type: "string",
              },
              caughtErrors: {
                type: "string",
                enum: ["all", "none"],
              },
              caughtErrorsIgnorePattern: {
                type: "string",
              },
              destructuredArrayIgnorePattern: {
                type: "string",
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      unusedVar: "'{{varName}}' is {{action}} but never used{{additional}}.",
    },
  },
  "@typescript-eslint/no-use-before-define": {
    type: "problem",
    docs: {
      description: "Disallow the use of variables before they are defined",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-use-before-define",
    },
    messages: {
      noUseBeforeDefine: "'{{name}}' was used before it was defined.",
    },
    schema: [
      {
        oneOf: [
          {
            type: "string",
            enum: ["nofunc"],
          },
          {
            type: "object",
            properties: {
              functions: {
                type: "boolean",
              },
              classes: {
                type: "boolean",
              },
              enums: {
                type: "boolean",
              },
              variables: {
                type: "boolean",
              },
              typedefs: {
                type: "boolean",
              },
              ignoreTypeReferences: {
                type: "boolean",
              },
              allowNamedExports: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
  },
  "@typescript-eslint/no-useless-constructor": {
    type: "problem",
    docs: {
      description: "Disallow unnecessary constructors",
      recommended: "strict",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/no-useless-constructor",
    },
    hasSuggestions: undefined,
    schema: [],
    messages: {
      noUselessConstructor: "Useless constructor.",
    },
  },
  "@typescript-eslint/no-useless-empty-export": {
    docs: {
      description:
        "Disallow empty exports that don't change anything in a module file",
      url: "https://typescript-eslint.io/rules/no-useless-empty-export",
    },
    fixable: "code",
    hasSuggestions: false,
    messages: {
      uselessExport: "Empty export does nothing and can be removed.",
    },
    schema: [],
    type: "suggestion",
  },
  "@typescript-eslint/no-var-requires": {
    type: "problem",
    docs: {
      description: "Disallow `require` statements except in import statements",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/no-var-requires",
    },
    messages: {
      noVarReqs: "Require statement not part of import statement.",
    },
    schema: [],
  },
  "@typescript-eslint/non-nullable-type-assertion-style": {
    docs: {
      description: "Enforce non-null assertions over explicit type casts",
      recommended: "stylistic",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/non-nullable-type-assertion-style",
    },
    fixable: "code",
    messages: {
      preferNonNullAssertion:
        "Use a ! assertion to more succinctly remove null and undefined from the type.",
    },
    schema: [],
    type: "suggestion",
  },
  "@typescript-eslint/object-curly-spacing": {
    deprecated: true,
    replacedBy: [],
    type: "layout",
    docs: {
      description: "Enforce consistent spacing inside braces",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/object-curly-spacing",
    },
    fixable: "whitespace",
    schema: [
      {
        enum: ["always", "never"],
      },
      {
        type: "object",
        properties: {
          arraysInObjects: {
            type: "boolean",
          },
          objectsInObjects: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      requireSpaceBefore: "A space is required before '{{token}}'.",
      requireSpaceAfter: "A space is required after '{{token}}'.",
      unexpectedSpaceBefore: "There should be no space before '{{token}}'.",
      unexpectedSpaceAfter: "There should be no space after '{{token}}'.",
    },
  },
  "@typescript-eslint/padding-line-between-statements": {
    type: "layout",
    docs: {
      description: "Require or disallow padding lines between statements",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/padding-line-between-statements",
    },
    fixable: "whitespace",
    hasSuggestions: false,
    schema: {
      $defs: {
        paddingType: {
          type: "string",
          enum: ["any", "never", "always"],
        },
        statementType: {
          anyOf: [
            {
              type: "string",
              enum: [
                "*",
                "block-like",
                "exports",
                "require",
                "directive",
                "expression",
                "iife",
                "multiline-block-like",
                "multiline-expression",
                "multiline-const",
                "multiline-let",
                "multiline-var",
                "singleline-const",
                "singleline-let",
                "singleline-var",
                "block",
                "empty",
                "function",
                "break",
                "case",
                "class",
                "const",
                "continue",
                "debugger",
                "default",
                "do",
                "export",
                "for",
                "if",
                "import",
                "let",
                "return",
                "switch",
                "throw",
                "try",
                "var",
                "while",
                "with",
                "interface",
                "type",
              ],
            },
            {
              type: "array",
              items: {
                type: "string",
                enum: [
                  "*",
                  "block-like",
                  "exports",
                  "require",
                  "directive",
                  "expression",
                  "iife",
                  "multiline-block-like",
                  "multiline-expression",
                  "multiline-const",
                  "multiline-let",
                  "multiline-var",
                  "singleline-const",
                  "singleline-let",
                  "singleline-var",
                  "block",
                  "empty",
                  "function",
                  "break",
                  "case",
                  "class",
                  "const",
                  "continue",
                  "debugger",
                  "default",
                  "do",
                  "export",
                  "for",
                  "if",
                  "import",
                  "let",
                  "return",
                  "switch",
                  "throw",
                  "try",
                  "var",
                  "while",
                  "with",
                  "interface",
                  "type",
                ],
              },
              minItems: 1,
              uniqueItems: true,
              additionalItems: false,
            },
          ],
        },
      },
      type: "array",
      additionalItems: false,
      items: {
        type: "object",
        properties: {
          blankLine: {
            $ref: "#/$defs/paddingType",
          },
          prev: {
            $ref: "#/$defs/statementType",
          },
          next: {
            $ref: "#/$defs/statementType",
          },
        },
        additionalProperties: false,
        required: ["blankLine", "prev", "next"],
      },
    },
    messages: {
      unexpectedBlankLine: "Unexpected blank line before this statement.",
      expectedBlankLine: "Expected blank line before this statement.",
    },
  },
  "@typescript-eslint/parameter-properties": {
    type: "problem",
    docs: {
      description:
        "Require or disallow parameter properties in class constructors",
      url: "https://typescript-eslint.io/rules/parameter-properties",
    },
    messages: {
      preferClassProperty:
        "Property {{parameter}} should be declared as a class property.",
      preferParameterProperty:
        "Property {{parameter}} should be declared as a parameter property.",
    },
    schema: [
      {
        $defs: {
          modifier: {
            type: "string",
            enum: [
              "readonly",
              "private",
              "protected",
              "public",
              "private readonly",
              "protected readonly",
              "public readonly",
            ],
          },
        },
        type: "object",
        properties: {
          allow: {
            type: "array",
            items: {
              $ref: "#/items/0/$defs/modifier",
            },
          },
          prefer: {
            type: "string",
            enum: ["class-property", "parameter-property"],
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/prefer-as-const": {
    type: "suggestion",
    docs: {
      description: "Enforce the use of `as const` over literal type",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/prefer-as-const",
    },
    fixable: "code",
    hasSuggestions: true,
    messages: {
      preferConstAssertion:
        "Expected a `const` instead of a literal type assertion.",
      variableConstAssertion:
        "Expected a `const` assertion instead of a literal type annotation.",
      variableSuggest: "You should use `as const` instead of type annotation.",
    },
    schema: [],
  },
  "@typescript-eslint/prefer-destructuring": {
    type: "suggestion",
    docs: {
      description: "Require destructuring from arrays and/or objects",
      extendsBaseRule: true,
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/prefer-destructuring",
    },
    schema: [
      {
        oneOf: [
          {
            type: "object",
            properties: {
              VariableDeclarator: {
                type: "object",
                properties: {
                  array: {
                    type: "boolean",
                  },
                  object: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
              AssignmentExpression: {
                type: "object",
                properties: {
                  array: {
                    type: "boolean",
                  },
                  object: {
                    type: "boolean",
                  },
                },
                additionalProperties: false,
              },
            },
            additionalProperties: false,
          },
          {
            type: "object",
            properties: {
              array: {
                type: "boolean",
              },
              object: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
        ],
      },
      {
        type: "object",
        properties: {
          enforceForRenamedProperties: {
            type: "boolean",
          },
          enforceForDeclarationWithTypeAnnotation: {
            type: "boolean",
          },
        },
      },
    ],
    fixable: "code",
    hasSuggestions: undefined,
    messages: {
      preferDestructuring: "Use {{type}} destructuring.",
    },
  },
  "@typescript-eslint/prefer-enum-initializers": {
    type: "suggestion",
    docs: {
      description:
        "Require each enum member value to be explicitly initialized",
      url: "https://typescript-eslint.io/rules/prefer-enum-initializers",
    },
    hasSuggestions: true,
    messages: {
      defineInitializer:
        "The value of the member '{{ name }}' should be explicitly defined.",
      defineInitializerSuggestion:
        "Can be fixed to {{ name }} = {{ suggested }}",
    },
    schema: [],
  },
  "@typescript-eslint/prefer-for-of": {
    type: "suggestion",
    docs: {
      description:
        "Enforce the use of `for-of` loop over the standard `for` loop where possible",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/prefer-for-of",
    },
    messages: {
      preferForOf:
        "Expected a `for-of` loop instead of a `for` loop with this simple iteration.",
    },
    schema: [],
  },
  "@typescript-eslint/prefer-function-type": {
    docs: {
      description:
        "Enforce using function types instead of interfaces with call signatures",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/prefer-function-type",
    },
    fixable: "code",
    messages: {
      functionTypeOverCallableType:
        "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
      unexpectedThisOnFunctionOnlyInterface:
        "`this` refers to the function type '{{ interfaceName }}', did you intend to use a generic `this` parameter like `<Self>(this: Self, ...) => Self` instead?",
    },
    schema: [],
    type: "suggestion",
  },
  "@typescript-eslint/prefer-includes": {
    type: "suggestion",
    docs: {
      description: "Enforce `includes` method over `indexOf` method",
      recommended: "strict",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/prefer-includes",
    },
    fixable: "code",
    messages: {
      preferIncludes: "Use 'includes()' method instead.",
      preferStringIncludes:
        "Use `String#includes()` method with a string instead.",
    },
    schema: [],
  },
  "@typescript-eslint/prefer-literal-enum-member": {
    type: "suggestion",
    docs: {
      description: "Require all enum members to be literal values",
      recommended: "strict",
      requiresTypeChecking: false,
      url: "https://typescript-eslint.io/rules/prefer-literal-enum-member",
    },
    messages: {
      notLiteral:
        "Explicit enum value must only be a literal value (string, number, boolean, etc).",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowBitwiseExpressions: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/prefer-namespace-keyword": {
    type: "suggestion",
    docs: {
      description:
        "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
      recommended: "stylistic",
      url: "https://typescript-eslint.io/rules/prefer-namespace-keyword",
    },
    fixable: "code",
    messages: {
      useNamespace:
        "Use 'namespace' instead of 'module' to declare custom TypeScript modules.",
    },
    schema: [],
  },
  "@typescript-eslint/prefer-nullish-coalescing": {
    type: "suggestion",
    docs: {
      description:
        "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
      recommended: "stylistic",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/prefer-nullish-coalescing",
    },
    hasSuggestions: true,
    messages: {
      preferNullishOverOr:
        "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
      preferNullishOverTernary:
        "Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.",
      suggestNullish: "Fix to nullish coalescing operator (`??`).",
      noStrictNullCheck:
        "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: {
            type: "boolean",
          },
          ignoreConditionalTests: {
            type: "boolean",
          },
          ignoreMixedLogicalExpressions: {
            type: "boolean",
          },
          ignorePrimitives: {
            oneOf: [
              {
                type: "object",
                properties: {
                  bigint: {
                    type: "boolean",
                  },
                  boolean: {
                    type: "boolean",
                  },
                  number: {
                    type: "boolean",
                  },
                  string: {
                    type: "boolean",
                  },
                },
              },
              {
                type: "boolean",
                enum: [true],
              },
            ],
          },
          ignoreTernaryTests: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/prefer-optional-chain": {
    type: "suggestion",
    docs: {
      description:
        "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
      recommended: "stylistic",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/prefer-optional-chain",
    },
    fixable: "code",
    hasSuggestions: true,
    messages: {
      preferOptionalChain:
        "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
      optionalChainSuggest: "Change to an optional chain.",
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          checkAny: {
            type: "boolean",
            description:
              'Check operands that are typed as `any` when inspecting "loose boolean" operands.',
          },
          checkUnknown: {
            type: "boolean",
            description:
              'Check operands that are typed as `unknown` when inspecting "loose boolean" operands.',
          },
          checkString: {
            type: "boolean",
            description:
              'Check operands that are typed as `string` when inspecting "loose boolean" operands.',
          },
          checkNumber: {
            type: "boolean",
            description:
              'Check operands that are typed as `number` when inspecting "loose boolean" operands.',
          },
          checkBoolean: {
            type: "boolean",
            description:
              'Check operands that are typed as `boolean` when inspecting "loose boolean" operands.',
          },
          checkBigInt: {
            type: "boolean",
            description:
              'Check operands that are typed as `bigint` when inspecting "loose boolean" operands.',
          },
          requireNullish: {
            type: "boolean",
            description:
              'Skip operands that are not typed with `null` and/or `undefined` when inspecting "loose boolean" operands.',
          },
          allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing: {
            type: "boolean",
            description:
              "Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build.",
          },
        },
      },
    ],
  },
  "@typescript-eslint/prefer-readonly": {
    docs: {
      description:
        "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/prefer-readonly",
    },
    fixable: "code",
    messages: {
      preferReadonly:
        "Member '{{name}}' is never reassigned; mark it as `readonly`.",
    },
    schema: [
      {
        additionalProperties: false,
        properties: {
          onlyInlineLambdas: {
            type: "boolean",
          },
        },
        type: "object",
      },
    ],
    type: "suggestion",
  },
  "@typescript-eslint/prefer-readonly-parameter-types": {
    type: "suggestion",
    docs: {
      description:
        "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/prefer-readonly-parameter-types",
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          allow: {
            type: "array",
            items: {
              oneOf: [
                {
                  type: "string",
                },
                {
                  type: "object",
                  additionalProperties: false,
                  properties: {
                    from: {
                      type: "string",
                      enum: ["file"],
                    },
                    name: {
                      oneOf: [
                        {
                          type: "string",
                        },
                        {
                          type: "array",
                          minItems: 1,
                          uniqueItems: true,
                          items: {
                            type: "string",
                          },
                        },
                      ],
                    },
                    path: {
                      type: "string",
                    },
                  },
                  required: ["from", "name"],
                },
                {
                  type: "object",
                  additionalProperties: false,
                  properties: {
                    from: {
                      type: "string",
                      enum: ["lib"],
                    },
                    name: {
                      oneOf: [
                        {
                          type: "string",
                        },
                        {
                          type: "array",
                          minItems: 1,
                          uniqueItems: true,
                          items: {
                            type: "string",
                          },
                        },
                      ],
                    },
                  },
                  required: ["from", "name"],
                },
                {
                  type: "object",
                  additionalProperties: false,
                  properties: {
                    from: {
                      type: "string",
                      enum: ["package"],
                    },
                    name: {
                      oneOf: [
                        {
                          type: "string",
                        },
                        {
                          type: "array",
                          minItems: 1,
                          uniqueItems: true,
                          items: {
                            type: "string",
                          },
                        },
                      ],
                    },
                    package: {
                      type: "string",
                    },
                  },
                  required: ["from", "name", "package"],
                },
              ],
            },
          },
          checkParameterProperties: {
            type: "boolean",
          },
          ignoreInferredTypes: {
            type: "boolean",
          },
          treatMethodsAsReadonly: {
            type: "boolean",
          },
        },
      },
    ],
    messages: {
      shouldBeReadonly: "Parameter should be a read only type.",
    },
  },
  "@typescript-eslint/prefer-reduce-type-parameter": {
    type: "problem",
    docs: {
      description:
        "Enforce using type parameter when calling `Array#reduce` instead of casting",
      recommended: "strict",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/prefer-reduce-type-parameter",
    },
    messages: {
      preferTypeParameter:
        "Unnecessary cast: Array#reduce accepts a type parameter for the default value.",
    },
    fixable: "code",
    schema: [],
  },
  "@typescript-eslint/prefer-regexp-exec": {
    type: "suggestion",
    fixable: "code",
    docs: {
      description:
        "Enforce `RegExp#exec` over `String#match` if no global flag is provided",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/prefer-regexp-exec",
    },
    messages: {
      regExpExecOverStringMatch: "Use the `RegExp#exec()` method instead.",
    },
    schema: [],
  },
  "@typescript-eslint/prefer-return-this-type": {
    type: "suggestion",
    docs: {
      description:
        "Enforce that `this` is used when only `this` type is returned",
      recommended: "strict",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/prefer-return-this-type",
    },
    messages: {
      useThisType: "Use `this` type instead.",
    },
    schema: [],
    fixable: "code",
  },
  "@typescript-eslint/prefer-string-starts-ends-with": {
    type: "suggestion",
    docs: {
      description:
        "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
      recommended: "stylistic",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/prefer-string-starts-ends-with",
    },
    messages: {
      preferStartsWith: "Use 'String#startsWith' method instead.",
      preferEndsWith: "Use the 'String#endsWith' method instead.",
    },
    schema: [],
    fixable: "code",
  },
  "@typescript-eslint/prefer-ts-expect-error": {
    type: "problem",
    docs: {
      description: "Enforce using `@ts-expect-error` over `@ts-ignore`",
      recommended: "strict",
      url: "https://typescript-eslint.io/rules/prefer-ts-expect-error",
    },
    fixable: "code",
    messages: {
      preferExpectErrorComment:
        'Use "@ts-expect-error" to ensure an error is actually being suppressed.',
    },
    schema: [],
  },
  "@typescript-eslint/promise-function-async": {
    type: "suggestion",
    fixable: "code",
    docs: {
      description:
        "Require any function or method that returns a Promise to be marked async",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/promise-function-async",
    },
    messages: {
      missingAsync: "Functions that return promises must be async.",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowAny: {
            description:
              "Whether to consider `any` and `unknown` to be Promises.",
            type: "boolean",
          },
          allowedPromiseNames: {
            description:
              "Any extra names of classes or interfaces to be considered Promises.",
            type: "array",
            items: {
              type: "string",
            },
          },
          checkArrowFunctions: {
            type: "boolean",
          },
          checkFunctionDeclarations: {
            type: "boolean",
          },
          checkFunctionExpressions: {
            type: "boolean",
          },
          checkMethodDeclarations: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/quotes": {
    type: "layout",
    docs: {
      description:
        "Enforce the consistent use of either backticks, double, or single quotes",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/quotes",
    },
    fixable: "code",
    hasSuggestions: undefined,
    messages: {
      wrongQuotes: "Strings must use {{description}}.",
    },
    schema: [
      {
        enum: ["single", "double", "backtick"],
      },
      {
        anyOf: [
          {
            enum: ["avoid-escape"],
          },
          {
            type: "object",
            properties: {
              avoidEscape: {
                type: "boolean",
              },
              allowTemplateLiterals: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
  },
  "@typescript-eslint/require-array-sort-compare": {
    type: "problem",
    docs: {
      description:
        "Require `Array#sort` calls to always provide a `compareFunction`",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/require-array-sort-compare",
    },
    messages: {
      requireCompare: "Require 'compare' argument.",
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          ignoreStringArrays: {
            description:
              "Whether to ignore arrays in which all elements are strings.",
            type: "boolean",
          },
        },
      },
    ],
  },
  "@typescript-eslint/require-await": {
    type: "suggestion",
    docs: {
      description: "Disallow async functions which have no `await` expression",
      recommended: "recommended",
      requiresTypeChecking: true,
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/require-await",
    },
    schema: [],
    messages: {
      missingAwait: "{{name}} has no 'await' expression.",
    },
  },
  "@typescript-eslint/restrict-plus-operands": {
    type: "problem",
    docs: {
      description:
        "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/restrict-plus-operands",
    },
    messages: {
      bigintAndNumber:
        "Numeric '+' operations must either be both bigints or both numbers. Got `{{left}}` + `{{right}}`.",
      invalid:
        "Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got `{{type}}`.",
      mismatched:
        "Operands of '+' operations must be a number or {{stringLike}}. Got `{{left}}` + `{{right}}`.",
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          allowAny: {
            description: "Whether to allow `any` typed values.",
            type: "boolean",
          },
          allowBoolean: {
            description: "Whether to allow `boolean` typed values.",
            type: "boolean",
          },
          allowNullish: {
            description:
              "Whether to allow potentially `null` or `undefined` typed values.",
            type: "boolean",
          },
          allowNumberAndString: {
            description:
              "Whether to allow `bigint`/`number` typed values and `string` typed values to be added together.",
            type: "boolean",
          },
          allowRegExp: {
            description: "Whether to allow `regexp` typed values.",
            type: "boolean",
          },
          skipCompoundAssignments: {
            description: "Whether to skip compound assignments such as `+=`.",
            type: "boolean",
          },
        },
      },
    ],
  },
  "@typescript-eslint/restrict-template-expressions": {
    type: "problem",
    docs: {
      description:
        "Enforce template literal expressions to be of `string` type",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/restrict-template-expressions",
    },
    messages: {
      invalidType: 'Invalid type "{{type}}" of template literal expression.',
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          allowAny: {
            description:
              "Whether to allow `any` typed values in template expressions.",
            type: "boolean",
          },
          allowBoolean: {
            description:
              "Whether to allow `boolean` typed values in template expressions.",
            type: "boolean",
          },
          allowNullish: {
            description:
              "Whether to allow `nullish` typed values in template expressions.",
            type: "boolean",
          },
          allowNumber: {
            description:
              "Whether to allow `number` typed values in template expressions.",
            type: "boolean",
          },
          allowRegExp: {
            description:
              "Whether to allow `regexp` typed values in template expressions.",
            type: "boolean",
          },
          allowNever: {
            description:
              "Whether to allow `never` typed values in template expressions.",
            type: "boolean",
          },
        },
      },
    ],
  },
  "@typescript-eslint/return-await": {
    docs: {
      description: "Enforce consistent returning of awaited values",
      requiresTypeChecking: true,
      extendsBaseRule: "no-return-await",
      url: "https://typescript-eslint.io/rules/return-await",
    },
    fixable: "code",
    hasSuggestions: true,
    type: "problem",
    messages: {
      nonPromiseAwait:
        "Returning an awaited value that is not a promise is not allowed.",
      disallowedPromiseAwait:
        "Returning an awaited promise is not allowed in this context.",
      requiredPromiseAwait:
        "Returning an awaited promise is required in this context.",
    },
    schema: [
      {
        type: "string",
        enum: ["in-try-catch", "always", "never"],
      },
    ],
  },
  "@typescript-eslint/semi": {
    type: "layout",
    docs: {
      description: "Require or disallow semicolons instead of ASI",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/semi",
    },
    fixable: "code",
    hasSuggestions: undefined,
    schema: {
      anyOf: [
        {
          type: "array",
          items: [
            {
              enum: ["never"],
            },
            {
              type: "object",
              properties: {
                beforeStatementContinuationChars: {
                  enum: ["always", "any", "never"],
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
        {
          type: "array",
          items: [
            {
              enum: ["always"],
            },
            {
              type: "object",
              properties: {
                omitLastInOneLineBlock: {
                  type: "boolean",
                },
                omitLastInOneLineClassBody: {
                  type: "boolean",
                },
              },
              additionalProperties: false,
            },
          ],
          minItems: 0,
          maxItems: 2,
        },
      ],
    },
    messages: {
      missingSemi: "Missing semicolon.",
      extraSemi: "Extra semicolon.",
    },
  },
  "@typescript-eslint/sort-type-constituents": {
    type: "suggestion",
    docs: {
      description:
        "Enforce constituents of a type union/intersection to be sorted alphabetically",
      url: "https://typescript-eslint.io/rules/sort-type-constituents",
    },
    fixable: "code",
    hasSuggestions: true,
    messages: {
      notSorted: "{{type}} type constituents must be sorted.",
      notSortedNamed: "{{type}} type {{name}} constituents must be sorted.",
      suggestFix: "Sort constituents of type (removes all comments).",
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          checkIntersections: {
            description: "Whether to check intersection types.",
            type: "boolean",
          },
          checkUnions: {
            description: "Whether to check union types.",
            type: "boolean",
          },
          groupOrder: {
            description: "Ordering of the groups.",
            type: "array",
            items: {
              type: "string",
              enum: [
                "conditional",
                "function",
                "import",
                "intersection",
                "keyword",
                "nullish",
                "literal",
                "named",
                "object",
                "operator",
                "tuple",
                "union",
              ],
            },
          },
        },
      },
    ],
  },
  "@typescript-eslint/space-before-blocks": {
    type: "layout",
    docs: {
      description: "Enforce consistent spacing before blocks",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/space-before-blocks",
    },
    fixable: "whitespace",
    hasSuggestions: undefined,
    schema: [
      {
        oneOf: [
          {
            enum: ["always", "never"],
          },
          {
            type: "object",
            properties: {
              keywords: {
                enum: ["always", "never", "off"],
              },
              functions: {
                enum: ["always", "never", "off"],
              },
              classes: {
                enum: ["always", "never", "off"],
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      unexpectedSpace: "Unexpected space before opening brace.",
      missingSpace: "Missing space before opening brace.",
    },
  },
  "@typescript-eslint/space-before-function-paren": {
    type: "layout",
    docs: {
      description: "Enforce consistent spacing before function parenthesis",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/space-before-function-paren",
    },
    fixable: "whitespace",
    schema: [
      {
        oneOf: [
          {
            type: "string",
            enum: ["always", "never"],
          },
          {
            type: "object",
            properties: {
              anonymous: {
                type: "string",
                enum: ["always", "never", "ignore"],
              },
              named: {
                type: "string",
                enum: ["always", "never", "ignore"],
              },
              asyncArrow: {
                type: "string",
                enum: ["always", "never", "ignore"],
              },
            },
            additionalProperties: false,
          },
        ],
      },
    ],
    messages: {
      unexpected: "Unexpected space before function parentheses.",
      missing: "Missing space before function parentheses.",
    },
  },
  "@typescript-eslint/space-infix-ops": {
    type: "layout",
    docs: {
      description: "Require spacing around infix operators",
      extendsBaseRule: true,
      url: "https://typescript-eslint.io/rules/space-infix-ops",
    },
    fixable: "whitespace",
    hasSuggestions: undefined,
    schema: [
      {
        type: "object",
        properties: {
          int32Hint: {
            type: "boolean",
            default: false,
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      missingSpace: "Operator '{{operator}}' must be spaced.",
    },
  },
  "@typescript-eslint/strict-boolean-expressions": {
    type: "suggestion",
    fixable: "code",
    hasSuggestions: true,
    docs: {
      description: "Disallow certain types in boolean expressions",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/strict-boolean-expressions",
    },
    schema: [
      {
        type: "object",
        properties: {
          allowString: {
            type: "boolean",
          },
          allowNumber: {
            type: "boolean",
          },
          allowNullableObject: {
            type: "boolean",
          },
          allowNullableBoolean: {
            type: "boolean",
          },
          allowNullableString: {
            type: "boolean",
          },
          allowNullableNumber: {
            type: "boolean",
          },
          allowNullableEnum: {
            type: "boolean",
          },
          allowAny: {
            type: "boolean",
          },
          allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: {
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      conditionErrorOther:
        "Unexpected value in conditional. A boolean expression is required.",
      conditionErrorAny:
        "Unexpected any value in conditional. An explicit comparison or type cast is required.",
      conditionErrorNullish:
        "Unexpected nullish value in conditional. The condition is always false.",
      conditionErrorNullableBoolean:
        "Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.",
      conditionErrorString:
        "Unexpected string value in conditional. An explicit empty string check is required.",
      conditionErrorNullableString:
        "Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.",
      conditionErrorNumber:
        "Unexpected number value in conditional. An explicit zero/NaN check is required.",
      conditionErrorNullableNumber:
        "Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
      conditionErrorObject:
        "Unexpected object value in conditional. The condition is always true.",
      conditionErrorNullableObject:
        "Unexpected nullable object value in conditional. An explicit null check is required.",
      conditionErrorNullableEnum:
        "Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
      noStrictNullCheck:
        "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
      conditionFixDefaultFalse:
        "Explicitly treat nullish value the same as false (`value ?? false`)",
      conditionFixDefaultEmptyString:
        'Explicitly treat nullish value the same as an empty string (`value ?? ""`)',
      conditionFixDefaultZero:
        "Explicitly treat nullish value the same as 0 (`value ?? 0`)",
      conditionFixCompareNullish:
        "Change condition to check for null/undefined (`value != null`)",
      conditionFixCastBoolean:
        "Explicitly cast value to a boolean (`Boolean(value)`)",
      conditionFixCompareTrue:
        "Change condition to check if true (`value === true`)",
      conditionFixCompareFalse:
        "Change condition to check if false (`value === false`)",
      conditionFixCompareStringLength:
        "Change condition to check string's length (`value.length !== 0`)",
      conditionFixCompareEmptyString:
        'Change condition to check for empty string (`value !== ""`)',
      conditionFixCompareZero:
        "Change condition to check for 0 (`value !== 0`)",
      conditionFixCompareNaN:
        "Change condition to check for NaN (`!Number.isNaN(value)`)",
    },
  },
  "@typescript-eslint/switch-exhaustiveness-check": {
    type: "suggestion",
    docs: {
      description:
        "Require switch-case statements to be exhaustive with union type",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/switch-exhaustiveness-check",
    },
    hasSuggestions: true,
    schema: [],
    messages: {
      switchIsNotExhaustive:
        "Switch is not exhaustive. Cases not matched: {{missingBranches}}",
      addMissingCases: "Add branches for missing cases.",
    },
  },
  "@typescript-eslint/triple-slash-reference": {
    type: "suggestion",
    docs: {
      description:
        "Disallow certain triple slash directives in favor of ES6-style import declarations",
      recommended: "recommended",
      url: "https://typescript-eslint.io/rules/triple-slash-reference",
    },
    messages: {
      tripleSlashReference:
        "Do not use a triple slash reference for {{module}}, use `import` style instead.",
    },
    schema: [
      {
        type: "object",
        properties: {
          lib: {
            type: "string",
            enum: ["always", "never"],
          },
          path: {
            type: "string",
            enum: ["always", "never"],
          },
          types: {
            type: "string",
            enum: ["always", "never", "prefer-import"],
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/type-annotation-spacing": {
    type: "layout",
    docs: {
      description: "Require consistent spacing around type annotations",
      url: "https://typescript-eslint.io/rules/type-annotation-spacing",
    },
    fixable: "whitespace",
    messages: {
      expectedSpaceAfter: "Expected a space after the '{{type}}'.",
      expectedSpaceBefore: "Expected a space before the '{{type}}'.",
      unexpectedSpaceAfter: "Unexpected space after the '{{type}}'.",
      unexpectedSpaceBefore: "Unexpected space before the '{{type}}'.",
      unexpectedSpaceBetween:
        "Unexpected space between the '{{previousToken}}' and the '{{type}}'.",
    },
    schema: [
      {
        $defs: {
          spacingConfig: {
            type: "object",
            properties: {
              before: {
                type: "boolean",
              },
              after: {
                type: "boolean",
              },
            },
            additionalProperties: false,
          },
        },
        type: "object",
        properties: {
          before: {
            type: "boolean",
          },
          after: {
            type: "boolean",
          },
          overrides: {
            type: "object",
            properties: {
              colon: {
                $ref: "#/items/0/$defs/spacingConfig",
              },
              arrow: {
                $ref: "#/items/0/$defs/spacingConfig",
              },
              variable: {
                $ref: "#/items/0/$defs/spacingConfig",
              },
              parameter: {
                $ref: "#/items/0/$defs/spacingConfig",
              },
              property: {
                $ref: "#/items/0/$defs/spacingConfig",
              },
              returnType: {
                $ref: "#/items/0/$defs/spacingConfig",
              },
            },
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
    ],
  },
  "@typescript-eslint/typedef": {
    docs: {
      description: "Require type annotations in certain places",
      url: "https://typescript-eslint.io/rules/typedef",
    },
    messages: {
      expectedTypedef: "Expected a type annotation.",
      expectedTypedefNamed: "Expected {{name}} to have a type annotation.",
    },
    schema: [
      {
        type: "object",
        additionalProperties: false,
        properties: {
          arrayDestructuring: {
            type: "boolean",
          },
          arrowParameter: {
            type: "boolean",
          },
          memberVariableDeclaration: {
            type: "boolean",
          },
          objectDestructuring: {
            type: "boolean",
          },
          parameter: {
            type: "boolean",
          },
          propertyDeclaration: {
            type: "boolean",
          },
          variableDeclaration: {
            type: "boolean",
          },
          variableDeclarationIgnoreFunction: {
            type: "boolean",
          },
        },
      },
    ],
    type: "suggestion",
  },
  "@typescript-eslint/unbound-method": {
    docs: {
      description:
        "Enforce unbound methods are called with their expected scope",
      recommended: "recommended",
      requiresTypeChecking: true,
      url: "https://typescript-eslint.io/rules/unbound-method",
    },
    messages: {
      unbound:
        "Avoid referencing unbound methods which may cause unintentional scoping of `this`.",
      unboundWithoutThisAnnotation:
        "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
    },
    schema: [
      {
        type: "object",
        properties: {
          ignoreStatic: {
            description:
              "Whether to skip checking whether `static` methods are correctly bound.",
            type: "boolean",
          },
        },
        additionalProperties: false,
      },
    ],
    type: "problem",
  },
  "@typescript-eslint/unified-signatures": {
    docs: {
      description:
        "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
      recommended: "strict",
      url: "https://typescript-eslint.io/rules/unified-signatures",
    },
    type: "suggestion",
    messages: {
      omittingRestParameter: "{{failureStringStart}} with a rest parameter.",
      omittingSingleParameter:
        "{{failureStringStart}} with an optional parameter.",
      singleParameterDifference:
        "{{failureStringStart}} taking `{{type1}} | {{type2}}`.",
    },
    schema: [
      {
        additionalProperties: false,
        properties: {
          ignoreDifferentlyNamedParameters: {
            description:
              "Whether two parameters with different names at the same index should be considered different even if their types are the same.",
            type: "boolean",
          },
        },
        type: "object",
      },
    ],
  },
};

module.exports = {
  result,
  rulesMeta,
};
